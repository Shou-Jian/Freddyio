<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Freddy.io</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-12T07:26:26.911Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Shou Jian/Freddy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql刷题总结</title>
    <link href="http://example.com/2022/07/15/mysql%E5%88%B7%E9%A2%98/"/>
    <id>http://example.com/2022/07/15/mysql%E5%88%B7%E9%A2%98/</id>
    <published>2022-07-15T10:26:11.000Z</published>
    <updated>2022-09-12T07:26:26.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><p><strong><code>select </code></strong></p><p> <code>distinct</code> (去重)   <code>??? as ?? </code>(命名) <code>count(  )，round( , )， avg(  ) ，max(  ) ,prod_price*0.9 as ??</code>(函数)</p><p><code>if(age &gt;= 25, &quot;25岁及以上&quot;, &quot;25岁以下&quot;) as age_cut</code> (age_cut分组，25岁以下和以上)</p><p><strong><code>from</code></strong></p><p><code>(select 语句) as ???</code> (子查询)<code>,??? as??</code></p><p>(连接写法)</p><p><code>left/right/null join t_b b on a.column_a = b.column_a</code>(可多连)</p><p><code>join t_b b using(column_a)</code>(简化写法)(可多连)</p><p><code>where a.column_a = b.column_a </code>(内连)</p><p><strong><code>where</code></strong></p><p><code>difficulty = &#39;hard&#39; and &#39;level&#39; = 7</code>(基本判断)</p><p><code>??? in (&#39;北京大学&#39;,&#39;复旦大学&#39;,&#39;山东大学&#39;)</code>(找到学校为北大、复旦和山大的同学)</p><p><code> ??? in (select---)</code>(匹配搜索结果)</p><p><code>(gpa&gt;3.5 and university = &#39;山东大学&#39;) or (gpa&gt;3.8 and university = &#39;复旦大学&#39;)</code>(或用法)</p><p><code>is (not) NULL</code> <code>between 20 and 23</code>  <code>LIKE ‘张%’ LIKE &#39;张__&#39;</code>(匹配0个或多个字符, 匹配任意一个字符)</p><p><strong><code>group by ???</code></strong>(分组自动去重)</p><p>**<code>having avg(question_cnt) &lt; 5 or avg(answer_cnt) &lt; 20</code>**9(使用函数要having)</p><p><strong><code>order by</code></strong> (语句必须放在 where 之后 ASC （默认）升序 是从小到大  DESC 降序 是从大到小)</p><h2 id="经典题型"><a href="#经典题型" class="headerlink" title="经典题型"></a>经典题型</h2><p>现有用户信息表user_info（uid用户ID，nick_name昵称, achievement成就值, level等级, job职业方向, register_time注册时间）：</p><table><thead><tr><th>id</th><th>uid</th><th>nick_name</th><th>achievement</th><th>level</th><th>job</th><th>register_time</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>牛客1号</td><td>3100</td><td>7</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>2</td><td>1002</td><td>牛客2号</td><td>2300</td><td>7</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>3</td><td>1003</td><td>牛客3号</td><td>2500</td><td>7</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>4</td><td>1004</td><td>牛客4号</td><td>1200</td><td>5</td><td>算法</td><td>2020-01-01 10:00:00</td></tr><tr><td>5</td><td>1005</td><td>牛客5号</td><td>1600</td><td>6</td><td>C++</td><td>2020-01-01 10:00:00</td></tr><tr><td>6</td><td>1006</td><td>牛客6号</td><td>2000</td><td>6</td><td>C++</td><td>2020-01-01 10:00:00</td></tr></tbody></table><p>试卷信息表examination_info（exam_id试卷ID, tag试卷类别, difficulty试卷难度, duration考试时长, release_time发布时间）：</p><p>：</p><table><thead><tr><th>id</th><th>exam_id</th><th>tag</th><th>difficulty</th><th>duration</th><th>release_time</th></tr></thead><tbody><tr><td>1</td><td>9001</td><td>SQL</td><td>hard</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>2</td><td>9002</td><td>C++</td><td>hard</td><td>60</td><td>2021-09-01 06:00:00</td></tr><tr><td>3</td><td>9003</td><td>算法</td><td>medium</td><td>80</td><td>2021-09-01 10:00:00</td></tr></tbody></table><p>试卷作答记录表exam_record（uid用户ID, exam_id试卷ID, start_time开始作答时间, submit_time交卷时间, score得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>exam_id</th><th>start_time</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>9001</td><td>2021-09-01 09:01:01</td><td>2021-09-01 09:31:00</td><td>81</td></tr><tr><td>2</td><td>1002</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:01</td><td>81</td></tr><tr><td>3</td><td>1003</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:40:01</td><td>86</td></tr><tr><td>4</td><td>1003</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:51</td><td>89</td></tr><tr><td>5</td><td>1004</td><td>9001</td><td>2021-09-01 19:01:01</td><td>2021-09-01 19:30:01</td><td>85</td></tr><tr><td>6</td><td>1005</td><td>9002</td><td>2021-09-01 12:01:01</td><td>2021-09-01 12:31:02</td><td>85</td></tr><tr><td>7</td><td>1006</td><td>9003</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:21:01</td><td>84</td></tr><tr><td>8</td><td>1006</td><td>9001</td><td>2021-09-07 10:01:01</td><td>2021-09-07 10:21:01</td><td>80</td></tr></tbody></table><p>题目练习记录表practice_record（uid用户ID, question_id题目ID, submit_time提交时间, score得分）：</p><table><thead><tr><th>id</th><th>uid</th><th>question_id</th><th>submit_time</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1001</td><td>8001</td><td>2021-08-02 11:41:01</td><td>60</td></tr><tr><td>2</td><td>1002</td><td>8001</td><td>2021-09-02 19:30:01</td><td>50</td></tr><tr><td>3</td><td>1002</td><td>8001</td><td>2021-09-02 19:20:01</td><td>70</td></tr><tr><td>4</td><td>1002</td><td>8002</td><td>2021-09-02 19:38:01</td><td>70</td></tr><tr><td>5</td><td>1004</td><td>8001</td><td>2021-08-02 19:38:01</td><td>70</td></tr><tr><td>6</td><td>1004</td><td>8002</td><td>2021-08-02 19:48:01</td><td>90</td></tr><tr><td>7</td><td>1001</td><td>8002</td><td>2021-08-02 19:38:01</td><td>70</td></tr><tr><td>8</td><td>1004</td><td>8002</td><td>2021-08-02 19:48:01</td><td>90</td></tr><tr><td>9</td><td>1004</td><td>8002</td><td>2021-08-02 19:58:01</td><td>94</td></tr><tr><td>10</td><td>1004</td><td>8003</td><td>2021-08-02 19:38:01</td><td>70</td></tr><tr><td>11</td><td>1004</td><td>8003</td><td>2021-08-02 19:48:01</td><td>90</td></tr><tr><td>12</td><td>1004</td><td>8003</td><td>2021-08-01 19:38:01</td><td>80</td></tr></tbody></table><p>请你找到高难度SQL试卷得分平均值大于80并且是7级的红名大佬，统计他们的2021年试卷总完成次数和题目总练习次数，只保留2021年有试卷完成记录的用户。结果按试卷完成数升序，按题目练习数降序。</p><p>示例数据输出如下：</p><table><thead><tr><th>uid</th><th>exam_cnt</th><th>question_cnt</th></tr></thead><tbody><tr><td>1001</td><td>1</td><td>2</td></tr><tr><td>1003</td><td>2</td><td>0</td></tr></tbody></table><p>解释：用户1001、1003、1004、1006满足高难度SQL试卷得分平均值大于80，但只有1001、1003是7级红名大佬；1001完成了1次试卷1001，练习了2次题目；1003完成了2次试卷9001、9002，未练习题目（因此计数为0）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    uid,</span><br><span class="line">    exam_cnt,</span><br><span class="line">    if(question_cnt is null, 0, question_cnt)</span><br><span class="line">from</span><br><span class="line">(select </span><br><span class="line">    uid,</span><br><span class="line">    count(submit_time) as exam_cnt</span><br><span class="line">from exam_record</span><br><span class="line">where YEAR(submit_time) = 2021</span><br><span class="line">group by uid) t</span><br><span class="line"></span><br><span class="line">left join</span><br><span class="line"></span><br><span class="line">(select</span><br><span class="line">    uid,</span><br><span class="line">    count(submit_time) as question_cnt</span><br><span class="line">from practice_record</span><br><span class="line">where YEAR(submit_time) = 2021</span><br><span class="line">group by uid) t2 using(uid)</span><br><span class="line"></span><br><span class="line">where uid in</span><br><span class="line">(</span><br><span class="line">select</span><br><span class="line">    uid</span><br><span class="line">from exam_record</span><br><span class="line">join examination_info using(exam_id)</span><br><span class="line">join user_info using(uid)</span><br><span class="line">where tag = &#x27;SQL&#x27; and difficulty = &#x27;hard&#x27; and `level` = 7</span><br><span class="line">group by uid</span><br><span class="line">having avg(score) &gt;= 80</span><br><span class="line">)</span><br><span class="line">order by exam_cnt asc, question_cnt desc</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;查询语句&quot;&gt;&lt;a href=&quot;#查询语句&quot; class=&quot;headerlink&quot; title=&quot;查询语句&quot;&gt;&lt;/a&gt;查询语句&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;select &lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;code&gt;distinct&lt;/</summary>
      
    
    
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MySQL索引</title>
    <link href="http://example.com/2022/06/15/MySQL%E7%B4%A2%E5%BC%95/"/>
    <id>http://example.com/2022/06/15/MySQL%E7%B4%A2%E5%BC%95/</id>
    <published>2022-06-15T11:36:54.000Z</published>
    <updated>2022-09-12T07:23:17.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL索引"><a href="#MySQL索引" class="headerlink" title="MySQL索引"></a>MySQL索引</h2><p>​MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。索引分单列索引和组合索引。单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。组合索引，即一个索引包含多个列。</p><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX indexName ON table_name (column_name)</span><br><span class="line">#duration列创建普通索引idx_duration</span><br><span class="line">CREATE INDEX idx_duration ON examination_info(duration);</span><br></pre></td></tr></table></figure><h3 id="修改表结构-添加索引"><a href="#修改表结构-添加索引" class="headerlink" title="修改表结构(添加索引)"></a>修改表结构(添加索引)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER table tableName ADD INDEX indexName(columnName)</span><br></pre></td></tr></table></figure><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX indexName ON mytable(username(length)) </span><br><span class="line">#在exam_id列创建唯一性索引uniq_idx_exam_id</span><br><span class="line">CREATE UNIQUE INDEX uniq_idx_exam_id ON examination_info(exam_id);</span><br></pre></td></tr></table></figure><h3 id="修改表结构-添加索引-1"><a href="#修改表结构-添加索引-1" class="headerlink" title="修改表结构(添加索引)"></a>修改表结构(添加索引)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER table mytable ADD UNIQUE [indexName] (username(length))</span><br></pre></td></tr></table></figure><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE FULLTEXT INDEX full_idx_tag ON examination_info(tag);</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index indexName on table_name (column_name)</span><br></pre></td></tr></table></figure><h3 id="在mysql当中，怎么查看一个SQL语句是否使用了索引进行检索"><a href="#在mysql当中，怎么查看一个SQL语句是否使用了索引进行检索" class="headerlink" title="在mysql当中，怎么查看一个SQL语句是否使用了索引进行检索?"></a>在mysql当中，怎么查看一个SQL语句是否使用了索引进行检索?</h3><p>1.在SQL语句前，添加 explian关键字<br>2.当type&#x3D;ALL时，表示使用全表查询(未使用索引)<br>3.当type&#x3D;RES时，表示使用索引</p><h3 id="索引失效的情况"><a href="#索引失效的情况" class="headerlink" title="索引失效的情况:"></a>索引失效的情况:</h3><p>1.模糊匹配当中以“%”开头时，索引失效<br>2.OR有一边的条件字段没有索引时，索引失效<br>3.使用复合索引的时候，没有使用左侧的列查找，索引失效<br>4.在where当中索引列参加了运算，索引失效<br>5.在where当中索引列使用了函数，索引失效</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h3><p>1.在任何数据库当中主键上都会自动添加索引对象<br>2.在mysql当中，一个字段上如果有unique约束的话，也会自动创建索引对象</p><h3 id="建立索引注意事项"><a href="#建立索引注意事项" class="headerlink" title="建立索引注意事项"></a>建立索引注意事项</h3><p>1，索引不是越多越好，虽然索引会提高 select效率，但是也降低了insert以及update的效率<br>2.数据量小的表不需要建立索引，会增加额外的索引开销<br>3.不经常使用的列不要建立索引<br>4.频繁更新的列不要建立索引，会影响更新的效率</p><h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><p>1.尽量避免在where字句中对字段进行空值判断，这会导致引擎放弃使用索引，进行全表扫描<br>2.字段值分布很稀少的字段，不适合建立索引<br>3.不要用字符字段做主键<br>4.字符字段只建立前缀索引<br>5.不要用外键和UNIQUE<br>6，使用多列索引时，注意顺序和查询条件保持一致，同时删除不必要的单列索引</p><p>索引常见类型：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MySQL索引&quot;&gt;&lt;a href=&quot;#MySQL索引&quot; class=&quot;headerlink&quot; title=&quot;MySQL索引&quot;&gt;&lt;/a&gt;MySQL索引&lt;/h2&gt;&lt;p&gt;​	MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。索</summary>
      
    
    
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络2.0</title>
    <link href="http://example.com/2022/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <id>http://example.com/2022/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
    <published>2022-06-10T03:16:21.000Z</published>
    <updated>2022-09-12T07:12:17.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="1-什么是-IP-地址？"><a href="#1-什么是-IP-地址？" class="headerlink" title="1.  什么是 IP 地址？"></a>1.  什么是 IP 地址？</h3><p>​<strong>IP 地址是指互联网协议地址</strong>。IP 地址是 IP 协议提供的一种统一的地址格式，它为互联网上的每<strong>一个网络和每一台主机分配一个逻辑地址</strong>，以此来屏蔽物理地址的差异</p><p><img src="https://s1.vika.cn/space/2022/09/12/1b99e8016fa14314b33aec2b34cd673e"></p><h3 id="2-OSI-七层网络模型的划分？"><a href="#2-OSI-七层网络模型的划分？" class="headerlink" title="2.OSI 七层网络模型的划分？"></a>2.OSI 七层网络模型的划分？</h3><p>​这个网络协议是分层的，网络OSI七层模型：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层 其中，HTTP协议处于应用层，TCP协议处于传输层。</p><p><img src="https://s1.vika.cn/space/2022/09/12/451fb73f3ebf4f148fd8f4d11a2f08da"></p><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><p>电脑或手机使用的应用软件都是在应用层实现。</p><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><p>应用层的数据包会传给传输层，传输层（Transport Layer）是为应用层提供网络支持的。</p><p>在传输层会有两个传输协议，分别是 TCP 和 UDP。</p><p>应用需要传输数据可能会非常大，如果直接传输就不好控制。</p><p><code>分块</code>因此当传输层的数据包大小超过 MSS（<strong>TCP 最大报文段长度</strong>） ，就要将数据包分块，这样即使中途有一个分块丢失或损坏了，只需要重新发送这一个分块，而不用重新发送整个数据包。在 TCP 协议中，我们把每个分块称为一个 <strong>TCP 段（TCP Segment）</strong>。</p><p><code>端口号作用</code>当设备作为接收方时，传输层则要负责把数据包传给应用，但是一台设备上可能会有很多应用在接收或者传输数据，因此需要用一个编号将应用区分开来，这个编号就是<strong>端口</strong>。<br>比如 <strong>80</strong> 端口通常是 Web 服务器用的，<strong>22</strong> 端口通常是远程登录服务器用的。</p><p>而对于浏览器（客户端）中的每个标签栏都是一个独立的进程，操作系统会为这些进程分配临时的端口号。<br>由于传输层的<strong>报文</strong>中会携带端口号，因此接收方可以识别出该报文是发送给哪个应用。</p><p><img src="https://s1.vika.cn/space/2022/09/12/a9b9007ab28941cf993fbc190cbe3699"></p><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><p>实际的传输功能就交给下一层，也就是网络层（Internet Layer）。</p><p>网络层最常使用的是 IP 协议（Internet Protocol），IP 协议会将<strong>传输层报文作为数据部分</strong>，再加上 IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（以太网中一般为 1500 字节）就会再次进行分片，得到一个即将发送到网络的 <strong>IP 报文。</strong></p><p>网络层<strong>负责将数据从一个设备传输到另一个设备</strong>，世界上那么多设备，又该如何找到对方呢？因此，网络层需要有区分设备的编号。<br>我们一般用 IP 地址给设备进行编号，对于 IPv4 协议， IP 地址共 32 位，分成了四段，每段是 8 位。<br>因此，需要将 IP 地址分成两种意义：<br>一个是网络号，负责标识该 IP 地址是属于哪个子网的；<br>一个是主机号，负责标识同一子网下的不同主机；<br>怎么分的呢？这需要配合子网掩码才能算出 IP 地址 的网络号和主机号。那么在寻址的过程中，先匹配到相同的网络号，才会去找对应的主机。<br>除了寻址能力， IP 协议还有另一个重要的能力就是路由。</p><p>实际场景中，两台设备并不是用一条网线连接起来的，而是通过很多网关、路由器、交换机等众多网络设备连接起来的，那么就会形成很多条网络的路径，因此当数据包到达一个网络节点，就需要通过算法决定下一步走哪条路径。<br>所以，IP 协议的寻址作用是告诉我们去往下一个目的地该朝哪个方向走，路由则是根据「下一个目的地」选择路径。寻址更像在导航，路由更像在操作方向盘。</p><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><p>一个专门的层来<strong>标识</strong>网络中的设备，让数据在一个链路中传输，这就是数据链路层（Data Link Layer），</p><p>它主要为网络层提供链路级别传输的服务。</p><p>实际场景中，网络并不是一个整体，比如你家和我家就不属于一个网络，所以数据不仅可以在同一个网络中设备间进行传输，也可以跨网络进行传输。</p><p>一旦数据需要跨网络传输，就需要有一个设备同时在两个网络当中，这个设备一般是路由器，路由器可以通过路由表计算出下一个要去的 IP 地址。<br>那问题来了，路由器怎么知道这个 IP 地址是哪个设备的呢？<br>于是，就需要有一个专门的层来<strong>标识</strong>网络中的设备，让数据在一个链路中传输，这就是数据链路层（Data Link Layer），它主要为网络层提供链路级别传输的服务。</p><p>每一台设备的网卡都会有一个 MAC 地址，它就是用来唯一标识设备的。路由器计算出了下一个目的地 IP 地址，再通过 ARP 协议找到该目的地的 MAC 地址，这样就知道这个 IP 地址是哪个设备的了。</p><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p>当数据准备要从设备发送到网络时，需要把数据包转换成电信号，让其可以在物理介质中传输，这一层就是物理层（Physical Layer），它主要是为数据链路层<strong>提供二进制传输</strong>的服务。</p><h3 id="3-TCP-和-UDP-有什么不同？"><a href="#3-TCP-和-UDP-有什么不同？" class="headerlink" title="3.TCP 和 UDP 有什么不同？"></a>3.TCP 和 UDP 有什么不同？</h3><p>​TCP和UDP都是通信协议 </p><p>使用TCP协议在通信之前需要先建立好链接，类似于打电话一样，因此<strong>可靠性较高</strong>。<strong>缺点</strong>是比较慢。TCP协议主要应用于对数据<strong>准确性要求比较高</strong>的场景，比如一些<strong>web项目</strong>都采用了HTTP协议，HTTP底层就是TCP </p><p>使用UDP协议在通信前不需要提前建立链接，直接像目标ip和端口发送数据包，类似于发短信一样，因此<strong>速度快</strong>，缺点是<strong>可靠性不高</strong>，如果网络不好时，可能会<strong>丢包</strong>。UDP协议主要应用于对通信速度要求比较高，但是通信质量要求不高，比如<strong>QQ聊天</strong></p><h4 id="连接："><a href="#连接：" class="headerlink" title="连接："></a>连接：</h4><p><code>TCP面向连接，三次握手建立连接，UDP不需要即刻传输数据</code></p><h4 id="服务形式"><a href="#服务形式" class="headerlink" title="服务形式"></a>服务形式</h4><p><code>TCP只能一对一，点对点服务，UDP支持一对一、一对多、多对多通信。</code></p><h4 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h4><p>TCP保证数据可靠交付,拥有确认应答和重传机制,无重复、不丢失、按序到达;UDP尽可能交付,不保证可靠性。<br>4、连接控制机制<br>TCP拥有流量控制、拥塞控制，保证传输安全性等，UDP在网络拥堵情况下不会降低发送速率。</p><h4 id="首部大小"><a href="#首部大小" class="headerlink" title="首部大小"></a>首部大小</h4><p>TCP首部长度不适用选项字段是20字节，使用选项字段长度增加(可变),UDP首部固定8字节。</p><h4 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h4><p>TCP基于字节流，没有边界,但是保证传输顺序和可靠性;<br>UDP继承了IP层特性,基于数据包,有边界可能出现乱序和丢包。</p><p>​TCP： 优点：可靠 稳定 </p><p>​TCP 的可靠体现在 TCP 在传输数据之前，会有三次握手来建立连接，而且在数据传递时，有确认. 窗 口. 重传. 拥塞控制机制，在数据传完之后，还会断开来连接用来节约系统资源。 缺点：慢，效率低，占用系统资源高，易被攻击 </p><p>​ 在传递数据之前要先建立连接，这会消耗时间，而且在数据传递时，确认机制. 重传机制. 拥塞机制 等都会消耗大量时间，而且要在每台设备上维护所有的传输连接。然而，每个连接都会占用系统的 CPU，内存等硬件资源。因为 TCP 有确认机制. 三次握手机制，这些也导致 TCP 容易被利用，实现 DOS. DDOS. CC 等攻击。</p><p>​UDP： 优点：快，比 TCP 稍安全  UDP 没有 TCP 拥有的各种机制，是一种无状态的传输协议，所以传输数据非常快，没有 TCP 的这些 机制，被攻击利用的机会就少一些，但是也无法避免被攻击。 缺点：不可靠，不稳定 </p><p>​因为没有 TCP 的这些机制，UDP 在传输数据时，如果网络质量不好，就会很容易丢包，造成数据的缺失。 </p><h3 id="4-HTTP-和-HTTPS-的区别？"><a href="#4-HTTP-和-HTTPS-的区别？" class="headerlink" title="4. HTTP 和 HTTPS 的区别？"></a>4. HTTP 和 HTTPS 的区别？</h3><h4 id="安全性："><a href="#安全性：" class="headerlink" title="安全性："></a>安全性：</h4><p>HTTP 是<strong>超文本传输协议</strong>，信息是明文传输，存在安全风险的问题。</p><p>HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 <strong>SSL&#x2F;TLS 安全协议</strong>，使得报文能够加密传输。</p><h4 id="连接：-1"><a href="#连接：-1" class="headerlink" title="连接："></a>连接：</h4><p>HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 HTTPS 在 TCP 三次握手之后，还需进行 SSL&#x2F;TLS 的握手过程，才可进入加密报文传输。HTTP 工作于<strong>应用层</strong>，HTTPS 工作于<strong>传输层</strong>。</p><h4 id="技术层面："><a href="#技术层面：" class="headerlink" title="技术层面："></a>技术层面：</h4><p>HTTP 的端口号是 <strong>80</strong>，HTTPS 的端口号是 <strong>443</strong>。</p><p>HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。</p><p>HTTPS 解决了 HTTP 的哪些问题？</p><h4 id="HTTP-由于是明文传输，所以安全上存在以下三个风险："><a href="#HTTP-由于是明文传输，所以安全上存在以下三个风险：" class="headerlink" title="HTTP 由于是明文传输，所以安全上存在以下三个风险："></a>HTTP 由于是明文传输，所以安全上存在以下三个风险：</h4><p>窃听风险，比如通信链路上可以获取通信内容，用户号容易没。<br>篡改风险，比如强制植入垃圾广告，视觉污染，用户眼容易瞎。<br>冒充风险，比如冒充淘宝网站，用户钱容易没。</p><h4 id="HTTPS在-HTTP-与-TCP-层之间加入了-SSL-x2F-TLS协议，可以很好的解决了上述的风险："><a href="#HTTPS在-HTTP-与-TCP-层之间加入了-SSL-x2F-TLS协议，可以很好的解决了上述的风险：" class="headerlink" title="HTTPS在 HTTP 与 TCP 层之间加入了 SSL&#x2F;TLS协议，可以很好的解决了上述的风险："></a>HTTPS在 HTTP 与 TCP 层之间加入了 SSL&#x2F;TLS协议，可以很好的解决了上述的风险：</h4><p><strong>信息加密</strong>：交互信息无法被窃取，但你的号会因为「自身忘记」账号而没。<br><strong>校验机制</strong>：无法篡改通信内容，篡改了就不能正常显示，但百度「竞价排名」依然可以搜索垃圾广告。<br><strong>身份证书</strong>：证明淘宝是真的淘宝网，但你的钱还是会因为「剁手」而没。<br>可见，只要自身不做「恶」，SSL&#x2F;TLS 协议是能保证通信是安全的。</p><h4 id="HTTPS-是如何解决上面的三个风险的？"><a href="#HTTPS-是如何解决上面的三个风险的？" class="headerlink" title="HTTPS 是如何解决上面的三个风险的？"></a>HTTPS 是如何解决上面的三个风险的？</h4><p><strong>混合加密</strong>的方式实现信息的机密性，解决了窃听的风险。<br><strong>摘要算法</strong>的方式来实现完整性，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了篡改的风险。将服务器公钥放入到数字证书中，解决了冒充的风险。</p><h3 id="5-cookies-和-session-的区别？"><a href="#5-cookies-和-session-的区别？" class="headerlink" title="5. cookies 和 session 的区别？"></a>5. cookies 和 session 的区别？</h3><p>1、作用<br>1．在第一次登录服务器之后，返回一些数据(cookie)给浏览器</p><p>2．浏览器将数据保存在本地<br>3．两次发送请求时,自动把上一次请求存储的cookie发送给服务器</p><p>4、服务器通过该数据判断用户<br>2、特点<br>可存储的数据量有限,一般不会超过4KB</p><p>​cookies:</p><p>作用：针对每一个网站的信息，每一个网站只对应一个，其它网站不能访问</p><p>1.在第一次登录服务器之后，返回一些数据(cookie)给浏览器2.浏览器将数据保存在<strong>本地浏览器</strong>3.两次发送请求时,自动把上一次请求存储的cookie发送给服务器4.服务器通过该数据判断用户</p><p>cookies 文 件的内容大致包函这些信息如用户名，密码，设置等。 </p><p>​session： </p><p>是针对每一个用户的，只有客户机访问，程序就会在<strong>服务器</strong>上为这个客户新增一个 session。session 里主 要保存的是用户的<strong>登录信息，操作信息</strong>等。这个 session 在用户访问<strong>结束</strong>后会被<strong>自动消失</strong>（如果超时也会）。</p><h3 id="6-HTTP-的-get-请求和-post-请求的区别？"><a href="#6-HTTP-的-get-请求和-post-请求的区别？" class="headerlink" title="6.  HTTP 的 get 请求和 post 请求的区别？"></a>6.  HTTP 的 get 请求和 post 请求的区别？</h3><p><img src="https://s1.vika.cn/space/2022/09/12/6840d6ed9f234b748c6136d4d9686334"></p><p>Get方法的含义是请求从服务器获取资源，这个资源可以是静态的文本、页面、图片视频等。</p><p>POST方法则是相反操作，它向 URI指定的资源提交数据，数据就放在报文的 body 里。</p><p>先说明下安全和幂等的概念：<br>在 HTTP 协议里，所谓的「安全」是指请求方法不会「破坏」服务器上的资源。<br>所谓的「幂等」，意思是多次执行相同的操作，结果都是「相同」的。</p><p>那么很明显 GET 方法就是安全且幂等的，因为它是「<strong>只读</strong>」操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的。<br>POST因为是「<strong>新增或提交数据</strong>」的操作，会修改服务器上的资源，所以是不安全的，且多次提交数据就会创建多个资源，所以不是幂等的。</p><p>区别如下： </p><p>实际上本质都是一样的，并无区别<br>1.都是<strong>HTTP</strong>请求协议的请求方法，而HTTP又是基于<strong>TCP&#x2F;IP</strong>的关于数据如何在万维网中如何通信的协议，所以<br>GET&#x2F;POST实际上都是<strong>TCP链接</strong><br>2.由于HTTP的规定以及浏览器&#x2F;服务器的限制，导致它们<strong>在应用过程中</strong>可能会有所不同</p><p>get请求可以被浏览器缓存， get请求可以直接通过浏览器访问，支持刷新和后退。post请求不能被缓存 ，post请求不能直接使用浏览器访问，刷新后数据要重新发送。</p><p>post请求参数放在报文的body中，安全性相对较好，请求信息长度没有限制。get请求参数放在url里，url的长度是受限的，最大为2048个字符。</p><h3 id="7-HTTP1-0-和-HTTP1-1-有什么区别？"><a href="#7-HTTP1-0-和-HTTP1-1-有什么区别？" class="headerlink" title="7. HTTP1.0 和 HTTP1.1 有什么区别？"></a>7. HTTP1.0 和 HTTP1.1 有什么区别？</h3><p>​HTTP 协议老的标准是 HTTP&#x2F;1.0，目前最通用的标准是 HTTP&#x2F;1.1。  在同一个 tcp 的连接中可以传送多个 HTTP 请求和响应. 多个请求和响应可以重叠，多个请求和响应可以同时进行. 更加多的请求头和响应头(比如 HTTP1.0 没有 host 的字段). </p><p>​它们最大的区别： </p><p>使用 TCP 长连接的方式改善了 HTTP&#x2F;1.0 短连接造成的性能开销。<br>支持管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。</p><p>在 HTTP&#x2F;1.0 中,大多实现为每个请求&#x2F;响应交换使用新的连接。HTTP 1.0 规定浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个 TCP 连接，服务器完成请求处理后立即断开 TCP 连接， 服务器不跟踪每个客户也不记录过去的请求。 </p><p>​在 HTTP&#x2F;1.1 中,一个连接可用于一次或多次请求&#x2F;响应交换,尽管连接可能由于各种原因被关闭。HTTP  1.1 支持持久连接，在一个 TCP 连接上可以传送多个 HTTP 请求和响应，减少了建立和关闭连接的消耗和延迟。 一个包含有许多图像的网页文件的多个请求和应答可以在一个连接中传输，但每个单独的网页文件的请求和 应答仍然需要使用各自的连接。HTTP 1.1 还允许客户端不用等待上一次请求结果返回，就可以发出下一次请 求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请 求的响应内容，这样也显著地减少了整个下载过程所需要的时间。</p><h3 id="8-Tcp三次握手四次挥手流程"><a href="#8-Tcp三次握手四次挥手流程" class="headerlink" title="8.  Tcp三次握手四次挥手流程"></a>8.  Tcp三次握手四次挥手流程</h3><p><img src="https://s1.vika.cn/space/2022/09/12/896283de93d74eac970c8377c4b65266"></p><p>1.第一个SYN报文：</p><p>客户端随机初始化序列号client_isn，放进TCP首部序列号段，然后把SYN 同步序列编号（<em>Syn</em>chronize Sequence Numbers）置1。把SYN报文发送给服务端，表示发起连接，之后客户端出于SYN-SENT状态。</p><p>2.第二个报文SYN+ACK报文：</p><p>服务端收到客户端的SYN报文，把自己的序号server_isn放进TCP首部序列号段，确认应答号填入client_ins + 1，把SYN+ACK置1，把SYN+ACK报文发送个客户端，然后进入SYN-RCVD状态。</p><p>3.第三个报文ACK (<em>Ack</em>nowledge character）即是确认字符：</p><p>客户端收到服务端报文后，还要向服务端回应最后一个应答报文。首先该应答报文TCP首部ACK标志位置为1，其次确认应答号字段填入server_isn + 1,最后把报文发送给服务端，这次报文可以携带客户到服务器的数据之后客户端出于ESTABLISHED状态。</p><p>服务器收到客户端的应答报文后，也进入ESTABLISHED状态。</p><p>为什么需要三次握⼿？ 总结： </p><ol><li>三次握手才可以阻止重复历史连接的初始化（主因）</li><li>三次握手才可以同步双方的初始序列号</li><li>三次握手CIA可以避免资源浪费</li></ol><p><img src="https://s1.vika.cn/space/2022/09/12/c71c861e72064b049fdab57c988b67b2"></p><p><img src="https://s1.vika.cn/space/2022/09/12/de57f80dbd1c4ce98093feaf446c2b19"></p><p><img src="https://s1.vika.cn/space/2022/09/12/8de1ba8d29db4b09b72f98f5d5b65412"></p><p><img src="https://s1.vika.cn/space/2022/09/12/af87bfb458ce4f5a8c396dfe3d033734"></p><p><img src="https://s1.vika.cn/space/2022/09/12/f9c280dac55e495dafc971b81fabd742"></p><h3 id="9-客户端使用-DHCP-获取-IP-的过程？"><a href="#9-客户端使用-DHCP-获取-IP-的过程？" class="headerlink" title="9. 客户端使用 DHCP 获取 IP 的过程？"></a>9. 客户端使用 DHCP 获取 IP 的过程？</h3><p>​发现阶段：即 DHCP 客户端寻找 DHCP 服务器的阶段。 提供阶段：即 DHCP 服务器提供 IP 地址的阶段。 选择阶段：即 DHCP 客户端选择某台 DHCP 服务器提供的 IP 地址的阶段。 确认阶段：即 DHCP 服务器确认所提供的 IP 地址的阶段。</p><h3 id="10-B-x2F-S-和-C-x2F-S-的区别"><a href="#10-B-x2F-S-和-C-x2F-S-的区别" class="headerlink" title="10.  B&#x2F;S 和 C&#x2F;S 的区别"></a>10.  B&#x2F;S 和 C&#x2F;S 的区别</h3><p>​b&#x2F;s 代表浏览器和服务器架构；c&#x2F;s 代表客户端和服务器架构 </p><p>​网络环境不同（c&#x2F;s 建立在专用的局域网上，b&#x2F;s 建立在广域网上） </p><p>​安全要求不同（c&#x2F;s 必须安装客户端，安全度较高；b&#x2F;s 安全度较低） </p><p>​系统维护不同（c&#x2F;s 升级困难，需要重新安装最新客户端；b&#x2F;s 无缝升级） </p><p>​对系统要求不同（c&#x2F;s 对系统要求较高；b&#x2F;s 对系统要求较低）</p><h3 id="11-线程和进程的区别"><a href="#11-线程和进程的区别" class="headerlink" title="11. 线程和进程的区别"></a>11. 线程和进程的区别</h3><p>进程——资源分配的最小单位，线程——程序执行的最小单位。</p><p>线程又称为轻量级进程，进程有进程控制块，线程有线程控制块</p><p>属于同一个进程的所有线程共享该进程的所有资源，包括文件描述符。而不同过的进程相互独立。</p><p>线程必定也只能属于一个进程，而进程可以拥有多个线程而且至少拥有一个线程；</p><p>比如公司就是一个进程，公司的员工就是线程。线程占用的资源要⽐进程少很多。线程之间通信比进程更方便</p><p> 线程进程的区别体现在几个方面： </p><p>第一：进程有自己独立的地址空间，每启动一个进程，系统都会为其分配地址空间，建立数据表来维护代码段、堆栈段和数据段，线程没有独立的地址空间，它使用相同的地址空间共享数据，系统开销比较大。CPU切换一个线程比切换进程花费小;创建一个线程比进程开销小。线程占用的资源要比进程少很多。</p><p>第二：线程之间通信更方便，同一个进程下，线程共享全局变量，静态变量等数据，进程之间的通信需要以通信的方式（IPC）进行;(但多线程程序处理好同步与互斥是个难点)。多进程程序更安全，生命力更强，一个进程死掉不会对另一个进程造成影响(源于有独立的地址空间)，多线程程序更不易维护，一个线程死掉，整个进程就死掉了（因为共享地址空间);</p><h3 id="12-常用的响应码"><a href="#12-常用的响应码" class="headerlink" title="12. 常用的响应码"></a>12. 常用的响应码</h3><p>​反映了 web 服务器处理 HTTP 请求状态，每一个响 应码都代表了一种服务端反馈的响应状态，标识了本次请求是否成功。</p><p><img src="https://s1.vika.cn/space/2022/09/12/f9e70482bb7f40e7a1329f155cde645f"></p><p><img src="https://s1.vika.cn/space/2022/09/12/8bc8c2c89cdf4eb6a46043809a458d08"></p><h3 id="13-在浏览器中输入了一个url后，请求流程是什么样的"><a href="#13-在浏览器中输入了一个url后，请求流程是什么样的" class="headerlink" title="13.  在浏览器中输入了一个url后，请求流程是什么样的"></a>13.  在浏览器中输入了一个url后，请求流程是什么样的</h3><p>​1.DNS域名解析 2、与服务器建立TCP连接 3、发起HTTP请求，发送数据 4、服务器响应HTTP请求，返回数据 5、浏览器解析数据、渲染 6、关闭TCP连接</p><p><img src="https://s1.vika.cn/space/2022/09/12/a971743de435476fbf0611115f9aa12c"></p><p><img src="https://s1.vika.cn/space/2022/09/12/d1b17018859e48b6b3fab649c3d63d91"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;计算机网络&quot;&gt;&lt;a href=&quot;#计算机网络&quot; class=&quot;headerlink&quot; title=&quot;计算机网络&quot;&gt;&lt;/a&gt;计算机网络&lt;/h2&gt;&lt;h3 id=&quot;1-什么是-IP-地址？&quot;&gt;&lt;a href=&quot;#1-什么是-IP-地址？&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Python3基础 2.0</title>
    <link href="http://example.com/2022/05/25/Python/"/>
    <id>http://example.com/2022/05/25/Python/</id>
    <published>2022-05-25T05:56:14.000Z</published>
    <updated>2022-09-12T07:23:26.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h3><p>内置的 type() 函数可以用来查询变量所指的对象类型。</p><ul><li><p>Number（数字）</p></li><li><p>String（字符串）</p></li><li><p>List（列表）</p></li><li><p>Tuple（元组）</p></li><li><p>Set（集合）</p></li><li><p>Dictionary（字典）</p></li><li><p><strong>不可变数据（3 个）：</strong>Number（数字）、String（字符串）、Tuple（元组）；</p></li><li><p><strong>可变数据（3 个）：</strong>List（列表）、Dictionary（字典）、Set（集合）。</p></li></ul><h3 id="数字（Number）"><a href="#数字（Number）" class="headerlink" title="数字（Number）"></a>数字（Number）</h3><p>int</p><p>bool</p><p>float</p><p>complex</p><p>内置的 type() 函数可以用来查询变量所指的对象类型。</p><p><em>Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加，</em> <strong>True&#x3D;&#x3D;1、False&#x3D;&#x3D;0</strong> <em>会返回</em> <strong>True</strong><em>，但可以通过</em> <strong>is</strong> <em>来判断类型。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span> + <span class="number">4</span>  <span class="comment"># 加法</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4.3</span> - <span class="number">2</span> <span class="comment"># 减法</span></span><br><span class="line"><span class="number">2.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> * <span class="number">7</span>  <span class="comment"># 乘法</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> / <span class="number">4</span>  <span class="comment"># 除法，得到一个浮点数</span></span><br><span class="line"><span class="number">0.5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> // <span class="number">4</span> <span class="comment"># 除法，得到上述的一个整数</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">17</span> % <span class="number">3</span> <span class="comment"># 取余</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> ** <span class="number">5</span> <span class="comment"># 乘方</span></span><br><span class="line"><span class="number">32</span></span><br></pre></td></tr></table></figure><h3 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h3><ul><li><p>Python 中单引号 <strong>‘</strong> 和双引号 <strong>“</strong> 使用完全相同。</p></li><li><p>反斜杠可以用来转义，使用 <strong>r</strong> 可以让反斜杠不发生转义。 如 <strong>r”this is a line with \n”</strong> 则 <strong>\n</strong> 会显示，并不是换行。</p></li><li><p>字符串可以用 <strong>+</strong> 运算符连接在一起，用 ***** 运算符重复。</p></li><li><p>Python 中的字符串有两种索引方式，从左往右以 <strong>0</strong> 开始，从右往左以 <strong>-1</strong> 开始。</p></li><li><p>与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] &#x3D; ‘m’会导致错误。</p></li><li><p>截取字符串中的一部分，遵循<strong>左闭右开</strong>原则，str[0:2] 是不包含第 3 个字符的。</p></li><li><p>字符串的截取的语法格式如下：<strong>变量[头下标:尾下标:步长]</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Runoob&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>)          <span class="comment"># 输出字符串</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])    <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>[<span class="number">0</span>])       <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])     <span class="comment"># 输出从第三个开始到第五个的字符</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>[<span class="number">2</span>:])      <span class="comment"># 输出从第三个开始的后的所有字符</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span> * <span class="number">2</span>)      <span class="comment"># 输出字符串两次，也可以写成 print (2 * str)</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span> + <span class="string">&quot;TEST&quot;</span>) <span class="comment"># 连接字符串</span></span><br><span class="line">Runoob</span><br><span class="line">Runoo</span><br><span class="line">R</span><br><span class="line">noo</span><br><span class="line">noob</span><br><span class="line">RunoobRunoob</span><br><span class="line">RunoobTEST</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;我叫 %s 今年 %d 岁!&quot;</span> % (<span class="string">&#x27;小明&#x27;</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><h4 id="Python-字符串更新"><a href="#Python-字符串更新" class="headerlink" title="Python 字符串更新"></a>Python 字符串更新</h4><p>你可以截取字符串的一部分并与其他字段拼接，如下实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var1 = &#x27;Hello World!&#x27;  </span><br><span class="line">print (&quot;已更新字符串 : &quot;, var1[:6] + &#x27;Runoob!&#x27;)</span><br><span class="line">已更新字符串 :  Hello Runoob!</span><br></pre></td></tr></table></figure><h4 id="len-返回字符串长度"><a href="#len-返回字符串长度" class="headerlink" title=" len() 返回字符串长度"></a><code> len()</code> 返回字符串长度</h4><p><code> len()</code> 方法返回对象（字符、列表、元组等）长度或项目个数。</p><h4 id="capitalize-字符串的第一个字母变成大写，其他字母变小写"><a href="#capitalize-字符串的第一个字母变成大写，其他字母变小写" class="headerlink" title="capitalize() 字符串的第一个字母变成大写，其他字母变小写"></a><code>capitalize()</code> 字符串的第一个字母变成大写，其他字母变小写</h4><p><code>capitalize()</code> 将字符串的第一个字母变成大写，其他字母变小写。</p><h4 id="count-统计字符串里某个字符出现的次数"><a href="#count-统计字符串里某个字符出现的次数" class="headerlink" title="count() 统计字符串里某个字符出现的次数"></a><code>count()</code> 统计字符串里某个字符出现的次数</h4><p><code>count()</code> 方法用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str.count(sub, start= 0,end=len(string))</span><br><span class="line">- sub -- 搜索的子字符串</span><br><span class="line">- start -- 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。</span><br><span class="line">- end -- 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置</span><br></pre></td></tr></table></figure><h4 id="find-检测字符串中是否包含子字符串-str"><a href="#find-检测字符串中是否包含子字符串-str" class="headerlink" title="find() 检测字符串中是否包含子字符串 str"></a><code>find() </code>检测字符串中是否包含子字符串 str</h4><p><code>find() </code>方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，如果指定范围内如果包含指定索引值，返回的是索引值在字符串中的起始位置。如果不包含索引值，返回-1。</p><p><code>find()</code>方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str.find(str, beg=0, end=len(string))</span><br><span class="line">- str -- 指定检索的字符串</span><br><span class="line">- beg -- 开始索引，默认为0。</span><br><span class="line">- end -- 结束索引，默认为字符串的长度。</span><br><span class="line">返回值</span><br><span class="line">如果包含子字符串返回开始的索引值，否则返回-1。</span><br></pre></td></tr></table></figure><h4 id="join-序列中的元素以指定的字符连接生成一个新的字符串"><a href="#join-序列中的元素以指定的字符连接生成一个新的字符串" class="headerlink" title="join()序列中的元素以指定的字符连接生成一个新的字符串"></a><code>join()</code>序列中的元素以指定的字符连接生成一个新的字符串</h4><p><code>join()</code> 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</p><p><code>join()</code>方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str.join(sequence)</span><br><span class="line">sequence -- 要连接的元素序列。</span><br><span class="line">返回值</span><br><span class="line">返回通过指定字符连接序列中元素后生成的新字符串。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s1 = &quot;-&quot;</span><br><span class="line">s2 = &quot;&quot;</span><br><span class="line">seq = (&quot;r&quot;, &quot;u&quot;, &quot;n&quot;, &quot;o&quot;, &quot;o&quot;, &quot;b&quot;) # 字符串序列</span><br><span class="line">**print** (s1.join( seq ))</span><br><span class="line">**print** (s2.join( seq ))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r-u-n-o-o-b</span><br><span class="line">runoob</span><br></pre></td></tr></table></figure><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><p><code>replace()</code> 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。</p><p><code>replace()</code>方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str.replace(old, new[, max])</span><br><span class="line">- old -- 将被替换的子字符串。</span><br><span class="line">- new -- 新字符串，用于替换old子字符串。</span><br><span class="line">- max -- 可选字符串, 替换不超过 max 次</span><br><span class="line">返回值</span><br><span class="line">返回字符串中的 old（旧字符串） 替换成 new(新字符串)后生成的新字符串，如果指定第三个参数max，则替换不超过 max 次</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  str = &quot;www.w3cschool.cc&quot; </span><br><span class="line">  print (&quot;菜鸟教程旧地址：&quot;, str) </span><br><span class="line">  print (&quot;菜鸟教程新地址：&quot;, str.replace(&quot;w3cschool.cc&quot;, &quot;runoob.com&quot;))  </span><br><span class="line">  str = &quot;this is string example....wow!!!&quot; p</span><br><span class="line">  rint (str.replace(&quot;is&quot;, &quot;was&quot;, 3))</span><br><span class="line">菜鸟教程旧地址： www.w3cschool.cc</span><br><span class="line">菜鸟教程新地址： www.runoob.com</span><br><span class="line">thwas was string example....wow!!!</span><br></pre></td></tr></table></figure><h3 id="列表（List）"><a href="#列表（List）" class="headerlink" title="列表（List）"></a>列表（List）</h3><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号 <strong>[]</strong> 之间、用逗号分隔开的元素列表。</p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p>列表截取的语法格式如下：</p><p>索引值以 <strong>0</strong> 为开始值，**-1** 为从末尾的开始位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>)            <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">0</span>])         <span class="comment"># 输出列表第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 从第二个开始输出到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">2</span>:])        <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinylist * <span class="number">2</span>)    <span class="comment"># 输出两次列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span> + tinylist) <span class="comment"># 连接列表</span></span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>]</span><br><span class="line">abcd</span><br><span class="line">[<span class="number">786</span>, <span class="number">2.23</span>]</span><br><span class="line">[<span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>]</span><br><span class="line">[<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] = <span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">5</span>] = []   <span class="comment"># 将对应的元素值设置为 []</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="append-更新列表"><a href="#append-更新列表" class="headerlink" title="append()更新列表"></a><code>append()</code>更新列表</h4><p>你可以对列表的数据项进行修改或更新，你也可以使用 append() 方法来添加列表项，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">list = [&#x27;Google&#x27;, &#x27;Runoob&#x27;, 1997, 2000]  </span><br><span class="line">print (&quot;第三个元素为 : &quot;, list[2]) list[2] = 2001 </span><br><span class="line">print (&quot;更新后的第三个元素为 : &quot;, list[2])  </span><br><span class="line">list1 = [&#x27;Google&#x27;, &#x27;Runoob&#x27;, &#x27;Taobao&#x27;] </span><br><span class="line">list1.append(&#x27;Baidu&#x27;) </span><br><span class="line">print (&quot;更新后的列表 : &quot;, list1)</span><br><span class="line">num = [2]</span><br><span class="line">alist.append( num )</span><br><span class="line"></span><br><span class="line">第三个元素为 :  1997</span><br><span class="line">更新后的第三个元素为 :  2001</span><br><span class="line">更新后的列表 :  [&#x27;Google&#x27;, &#x27;Runoob&#x27;, &#x27;Taobao&#x27;, &#x27;Baidu&#x27;]</span><br></pre></td></tr></table></figure><p>append() 方法用于在列表末尾添加新的对象。该方法无返回值，但是会修改原来的列表。 是浅拷贝</p><p>在 Python 中，对象赋值实际上是对象的引用。当创建一个对象，然后把它赋给另一个变量的时候，Python 并没有拷贝这个对象，而只是拷贝了这个对象的引用，我们称之为浅拷贝。</p><p>在 Python 中，为了使当进行赋值操作时，两个变量互补影响，可以使用 copy 模块中的 deepcopy 方法，称之为深拷贝。</p><p>当 list 类型的对象进行 append 操作时，实际上追加的是该对象的引用。</p><p><strong>id()</strong> 函数：返回对象的唯一标识，可以类比成该对象在内存中的地址。</p><p>&gt;&gt;&gt;alist &#x3D; [] &gt;&gt;&gt; num &#x3D; [2] &gt;&gt;&gt; alist.append( num ) &gt;&gt;&gt; id( num ) &#x3D;&#x3D; id( alist[0] ) True</p><p>如上例所示，当 num 发生变化时(前提是 id(num) 不发生变化），alist 的内容随之会发生变化。往往会带来意想不到的后果，想避免这种情况，可以采用深拷贝解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alist.append( copy.deepcopy( num ) )</span><br></pre></td></tr></table></figure><h4 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h4><p>可以使用 del 语句来删除列表的的元素 del list[2]</p><h4 id="Python列表脚本操作符"><a href="#Python列表脚本操作符" class="headerlink" title="Python列表脚本操作符"></a>Python列表脚本操作符</h4><p>列表对 + 和 * 的操作符与字符串相似<em><em>。+ 号用于组合列表，</em> 号用于重复列表。</em>*</p><p>如下所示：</p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1, 2, 3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td align="left">组合</td></tr><tr><td align="left">[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="left">重复</td></tr><tr><td align="left">3 in [1, 2, 3]</td><td align="left">True</td><td align="left">元素是否存在于列表中</td></tr><tr><td align="left">for x in [1, 2, 3]: print(x, end&#x3D;” “)</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><h4 id="嵌套列表-二维数组"><a href="#嵌套列表-二维数组" class="headerlink" title="嵌套列表(二维数组)"></a>嵌套列表(二维数组)</h4><p>使用嵌套列表即在列表里创建其它列表，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>n = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [a, n]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">[[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>]</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"><span class="string">&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</span><br></pre></td></tr></table></figure><h4 id="list-元组或字符串转换为列表"><a href="#list-元组或字符串转换为列表" class="headerlink" title="list() 元组或字符串转换为列表"></a><code>list()</code> 元组或字符串转换为列表</h4><p><code>list()</code> 方法用于将元组或字符串转换为列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">aTuple = (<span class="number">123</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>)</span><br><span class="line">list1 = <span class="built_in">list</span>(aTuple)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;列表元素 : &quot;</span>, list1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;Hello World&quot;</span></span><br><span class="line">list2=<span class="built_in">list</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;列表元素 : &quot;</span>, list2)</span><br><span class="line"></span><br><span class="line">列表元素 :  [<span class="number">123</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>]</span><br><span class="line">列表元素 :  [<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="count-方法用于统计某个元素在列表中出现的次数。"><a href="#count-方法用于统计某个元素在列表中出现的次数。" class="headerlink" title="count() 方法用于统计某个元素在列表中出现的次数。"></a><code>count() </code>方法用于统计某个元素在列表中出现的次数。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.count(obj)</span><br></pre></td></tr></table></figure><h4 id="extend-函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。"><a href="#extend-函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。" class="headerlink" title="extend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。"></a><code>extend()</code> 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.extend(seq)</span><br></pre></td></tr></table></figure><h4 id="index-函数用于从列表中找出某个值第一个匹配项的索引位置。"><a href="#index-函数用于从列表中找出某个值第一个匹配项的索引位置。" class="headerlink" title="index() 函数用于从列表中找出某个值第一个匹配项的索引位置。"></a><code>index()</code> 函数用于从列表中找出某个值第一个匹配项的索引位置。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.index(x[, start[, end]])</span><br></pre></td></tr></table></figure><h4 id="insert-函数用于将指定对象插入列表的指定位置。"><a href="#insert-函数用于将指定对象插入列表的指定位置。" class="headerlink" title="insert() 函数用于将指定对象插入列表的指定位置。"></a><code>insert()</code> 函数用于将指定对象插入列表的指定位置。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.insert(index, obj)</span><br></pre></td></tr></table></figure><h4 id="pop-函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。"><a href="#pop-函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。" class="headerlink" title="pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。"></a><code>pop() </code>函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.pop([index=-1])</span><br></pre></td></tr></table></figure><h4 id="remove-函数用于移除列表中某个值的第一个匹配项。"><a href="#remove-函数用于移除列表中某个值的第一个匹配项。" class="headerlink" title="remove() 函数用于移除列表中某个值的第一个匹配项。"></a><code>remove() </code>函数用于移除列表中某个值的第一个匹配项。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.remove(obj)</span><br></pre></td></tr></table></figure><h4 id="reverse-函数用于反向列表中元素。"><a href="#reverse-函数用于反向列表中元素。" class="headerlink" title="reverse() 函数用于反向列表中元素。"></a><code>reverse()</code> 函数用于反向列表中元素。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.reverse()</span><br></pre></td></tr></table></figure><h4 id="sort-函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。"><a href="#sort-函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。" class="headerlink" title="sort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。"></a><code>sort() </code>函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.sort( key=None, reverse=False)</span><br><span class="line">key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</span><br><span class="line">reverse -- 排序规则，reverse = True 降序， reverse = False 升序（默认）。</span><br></pre></td></tr></table></figure><h3 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h3><p>元组（tuple）与列表类似，列表使用方括号 **[ ]**。不同之处在于元组的元素不能修改。元组写在小括号 <strong>()</strong> 里，元素之间用逗号隔开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tuple</span> = ( <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span> + tinytuple) <span class="comment"># 连接元组</span></span><br><span class="line"></span><br><span class="line">(<span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>)</span><br><span class="line">abcd</span><br><span class="line">(<span class="number">786</span>, <span class="number">2.23</span>)</span><br><span class="line">(<span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>)</span><br><span class="line">(<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span>, <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>, <span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(tup[<span class="number">0</span>])</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(tup[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup[<span class="number">0</span>] = <span class="number">11</span>  <span class="comment"># 修改元组元素的操作是非法的</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，注意：创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</p><p>创建格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">parame = &#123;value01,value02,...&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="built_in">set</span>(value)</span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line">sites = &#123;<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;Zhihu&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sites)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Runoob&#x27;</span> <span class="keyword">in</span> sites :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 在集合中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 不在集合中&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br><span class="line">&#123;<span class="string">&#x27;Zhihu&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>&#125;</span><br><span class="line">Runoob 在集合中</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">s.add( x )</span><br><span class="line"></span><br><span class="line">s.update( x )</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>thisset = <span class="built_in">set</span>((<span class="string">&quot;Google&quot;</span>, <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;Taobao&quot;</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>thisset.update(&#123;<span class="number">1</span>,<span class="number">3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(thisset)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>thisset.update([<span class="number">1</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>])  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(thisset)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">s.remove( x )</span><br><span class="line">将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。</span><br><span class="line">s.discard( x )</span><br><span class="line">还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。</span><br></pre></td></tr></table></figure><h4 id="map-函数会根据提供的函数对指定序列做映射。"><a href="#map-函数会根据提供的函数对指定序列做映射。" class="headerlink" title="map() 函数会根据提供的函数对指定序列做映射。"></a><code>map()</code> 函数会根据提供的函数对指定序列做映射。</h4><p>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>以下是 map() 方法的语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">map(function, iterable, ...)</span><br><span class="line">- function -- 函数</span><br><span class="line">- iterable -- 一个或多个序列</span><br><span class="line">返回值</span><br><span class="line"></span><br><span class="line">返回一个迭代器。</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>) :         <span class="comment"># 计算平方数</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])    <span class="comment"># 计算列表各个元素的平方</span></span><br><span class="line">&lt;<span class="built_in">map</span> <span class="built_in">object</span> at <span class="number">0x100d3d550</span>&gt;     <span class="comment"># 返回迭代器</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))   <span class="comment"># 使用 list() 转换为列表</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]))   <span class="comment"># 使用 lambda 匿名函数</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h4 id="set-函数创建一个无序不重复元素集"><a href="#set-函数创建一个无序不重复元素集" class="headerlink" title="set() 函数创建一个无序不重复元素集"></a><code>set()</code> 函数创建一个无序不重复元素集</h4><p>可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</p><p>set 语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">set</span>([iterable])</span><br><span class="line">&gt;&gt;&gt;x = <span class="built_in">set</span>(<span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="built_in">set</span>(<span class="string">&#x27;google&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y</span><br><span class="line">(<span class="built_in">set</span>([<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>]), <span class="built_in">set</span>([<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;l&#x27;</span>]))   <span class="comment"># 重复的被删除</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x &amp; y         <span class="comment"># 交集</span></span><br><span class="line"><span class="built_in">set</span>([<span class="string">&#x27;o&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x | y         <span class="comment"># 并集</span></span><br><span class="line"><span class="built_in">set</span>([<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x - y         <span class="comment"># 差集</span></span><br><span class="line"><span class="built_in">set</span>([<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;n&#x27;</span>])</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="Dictionary（字典）"><a href="#Dictionary（字典）" class="headerlink" title="Dictionary（字典）"></a>Dictionary（字典）</h3><p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p><p>键(key)必须使用不可变类型。</p><p>在同一个字典中，键(key)必须是唯一的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;1 - 菜鸟教程&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>]     = <span class="string">&quot;2 - 菜鸟工具&quot;</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>])       <span class="comment"># 输出键为 &#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br><span class="line"><span class="number">1</span> - 菜鸟教程</span><br><span class="line"><span class="number">2</span> - 菜鸟工具</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line">dict_keys([<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;site&#x27;</span>])</span><br><span class="line">dict_values([<span class="string">&#x27;runoob&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>])</span><br><span class="line"></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">    number = <span class="built_in">input</span>(<span class="string">&quot;输入学生学号：&quot;</span>)</span><br><span class="line">    score = <span class="built_in">input</span>(<span class="string">&quot;输入学生成绩：&quot;</span>)</span><br><span class="line">    <span class="comment"># dic.__setitem__(number, score)</span></span><br><span class="line">    dic[number] = score</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">&#123;<span class="string">&#x27;423&#x27;</span>: <span class="string">&#x27;435&#x27;</span>, <span class="string">&#x27;543&#x27;</span>: <span class="string">&#x27;54&#x27;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="dict-构造函数可以直接从键值对序列中构建字典如下："><a href="#dict-构造函数可以直接从键值对序列中构建字典如下：" class="headerlink" title="dict()构造函数可以直接从键值对序列中构建字典如下："></a><code>dict()</code>构造函数可以直接从键值对序列中构建字典如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>([(<span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1</span>), (<span class="string">&#x27;Google&#x27;</span>, <span class="number">2</span>), (<span class="string">&#x27;Taobao&#x27;</span>, <span class="number">3</span>)])</span><br><span class="line">&#123;<span class="string">&#x27;Runoob&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Google&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dict</span>(Runoob=<span class="number">1</span>, Google=<span class="number">2</span>, Taobao=<span class="number">3</span>)</span><br><span class="line">&#123;<span class="string">&#x27;Runoob&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Google&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="get-函数返回指定键的值。"><a href="#get-函数返回指定键的值。" class="headerlink" title="get()函数返回指定键的值。"></a><code>get()</code>函数返回指定键的值。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.get(key[, value]) </span><br></pre></td></tr></table></figure><h4 id="items-函数以列表返回可遍历的-键-值-元组数组。"><a href="#items-函数以列表返回可遍历的-键-值-元组数组。" class="headerlink" title="items() 函数以列表返回可遍历的(键, 值) 元组数组。"></a><code>items() </code>函数以列表返回可遍历的(键, 值) 元组数组。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.items()</span><br></pre></td></tr></table></figure><p>以下实例展示了 items()函数的使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tinydict = &#123;<span class="string">&#x27;Google&#x27;</span>: <span class="string">&#x27;www.google.com&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>, <span class="string">&#x27;taobao&#x27;</span>: <span class="string">&#x27;www.taobao.com&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;字典值 : %s&quot;</span> %  tinydict.items()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 遍历字典列表</span></span><br><span class="line"><span class="keyword">for</span> key,values <span class="keyword">in</span>  tinydict.items():</span><br><span class="line">    <span class="built_in">print</span> key,values</span><br><span class="line">    </span><br><span class="line">字典值 : [(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;www.google.com&#x27;</span>), (<span class="string">&#x27;taobao&#x27;</span>, <span class="string">&#x27;www.taobao.com&#x27;</span>), (<span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>)]</span><br><span class="line">Google www.google.com</span><br><span class="line">taobao www.taobao.com</span><br><span class="line">Runoob www.runoob.com</span><br></pre></td></tr></table></figure><h3 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h3><p>在显式类型转换中，用户将对象的数据类型转换为所需的数据类型。 我们使用 int()、float()、str() 等预定义函数来执行显式类型转换。</p><p><strong>int()</strong> 强制转换为整型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="number">1</span>)   <span class="comment"># x 输出结果为 1</span></span><br><span class="line">y = <span class="built_in">int</span>(<span class="number">2.8</span>) <span class="comment"># y 输出结果为 2</span></span><br><span class="line">z = <span class="built_in">int</span>(<span class="string">&quot;3&quot;</span>) <span class="comment"># z 输出结果为 3</span></span><br></pre></td></tr></table></figure><p><strong>str()</strong> 强制转换为字符串类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="built_in">str</span>(<span class="string">&quot;s1&quot;</span>) <span class="comment"># x 输出结果为 &#x27;s1&#x27;</span></span><br><span class="line">y = <span class="built_in">str</span>(<span class="number">2</span>)    <span class="comment"># y 输出结果为 &#x27;2&#x27;</span></span><br><span class="line">z = <span class="built_in">str</span>(<span class="number">3.0</span>)  <span class="comment"># z 输出结果为 &#x27;3.0&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Python-推导式"><a href="#Python-推导式" class="headerlink" title="Python 推导式"></a>Python 推导式</h3><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><p>列表推导式格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[表达式 for 变量 in 列表] </span><br><span class="line">[out_exp_res for out_exp in input_list]</span><br><span class="line"></span><br><span class="line">或者 </span><br><span class="line"></span><br><span class="line">[表达式 for 变量 in 列表 if 条件]</span><br><span class="line">[out_exp_res for out_exp in input_list if condition]</span><br></pre></td></tr></table></figure><ul><li>out_exp_res：列表生成元素表达式，可以是有返回值的函数。</li><li>for out_exp in input_list：迭代 input_list 将 out_exp 传入到 out_exp_res 表达式中。</li><li>if condition：条件语句，可以过滤列表中不符合条件的值。</li></ul><p>过滤掉长度小于或等于3的字符串列表，并将剩下的转换成大写字母：</p><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>names = [<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;Wendy&#x27;</span>,<span class="string">&#x27;Smith&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>new_names = [name.upper() <span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> <span class="built_in">len</span>(name)&gt;<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(new_names)</span><br><span class="line">[<span class="string">&#x27;ALICE&#x27;</span>, <span class="string">&#x27;JERRY&#x27;</span>, <span class="string">&#x27;WENDY&#x27;</span>, <span class="string">&#x27;SMITH&#x27;</span>]</span><br></pre></td></tr></table></figure><p>计算 30 以内可以被 3 整除的整数：</p><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>multiples = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (multiples)</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">27</span>]</span><br></pre></td></tr></table></figure><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><p>字典推导基本格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; key_expr: value_expr for value in collection &#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">&#123; key_expr: value_expr for value in collection if condition &#125;</span><br></pre></td></tr></table></figure><p>使用字符串及其长度创建字典：</p><p>实例</p><p>listdemo &#x3D; [‘Google’,’Runoob’, ‘Taobao’]<br># 将列表中各字符串值为键，各字符串的长度为值，组成键值对<br>&gt;&gt;&gt; newdict &#x3D; {key:len(key) <strong>for</strong> key <strong>in</strong> listdemo}<br>&gt;&gt;&gt; newdict<br>{‘Google’: 6, ‘Runoob’: 6, ‘Taobao’: 6}</p><p>提供三个数字，以三个数字为键，三个数字的平方为值来创建字典：</p><p>实例</p><p>&gt;&gt;&gt; dic &#x3D; {x: x ** 2  for   x  in  (2, 4, 6)}<br>&gt;&gt;&gt; dic<br>{2: 4, 4: 16, 6: 36}<br>&gt;&gt;&gt; type(dic)<br>&lt;**class** ‘dict’&gt;</p><h4 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h4><p>集合推导式基本格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; expression for item in Sequence &#125;</span><br><span class="line">或</span><br><span class="line">&#123; expression for item in Sequence if conditional &#125;</span><br></pre></td></tr></table></figure><p>计算数字 1,2,3 的平方数：</p><p>实例</p><p>&gt;&gt;&gt; setnew &#x3D; {i**2 <strong>for</strong> i <strong>in</strong> (1,2,3)}<br>&gt;&gt;&gt; setnew<br>{1, 4, 9}</p><p>判断不是 abc 的字母并输出：</p><p>实例</p><p>&gt;&gt;&gt; a &#x3D; {x <strong>for</strong> x <strong>in</strong> ‘abracadabra’ <strong>if</strong> x <strong>not</strong> <strong>in</strong> ‘abc’}<br>&gt;&gt;&gt; a<br>{‘d’, ‘r’}<br>&gt;&gt;&gt; type(a)<br>&lt;**class** ‘set’&gt;</p><h3 id="Python位运算符"><a href="#Python位运算符" class="headerlink" title="Python位运算符"></a>Python位运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td><td align="left">(a &amp; b) 输出结果 12 ，二进制解释： 0000 1100</td></tr><tr><td align="left">|</td><td align="left">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td><td align="left">(a | b) 输出结果 61 ，二进制解释： 0011 1101</td></tr><tr><td align="left">^</td><td align="left">按位异或运算符：当两对应的二进位相异时，结果为1</td><td align="left">(a ^ b) 输出结果 49 ，二进制解释： 0011 0001</td></tr><tr><td align="left">~</td><td align="left">按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。**~x** 类似于 <strong>-x-1</strong></td><td align="left">(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">左移动运算符：运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td><td align="left">a &lt;&lt; 2 输出结果 240 ，二进制解释： 1111 0000</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">右移动运算符：把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数</td><td align="left">a &gt;&gt; 2 输出结果 15 ，二进制解释： 0000 1111</td></tr></tbody></table><h3 id="Python-数据结构"><a href="#Python-数据结构" class="headerlink" title="Python 数据结构"></a>Python 数据结构</h3><h4 id="将列表当做堆栈使用"><a href="#将列表当做堆栈使用" class="headerlink" title="将列表当做堆栈使用"></a>将列表当做堆栈使用</h4><p>列表方法使得列表可以很方便的作为一个堆栈来使用，堆栈作为特定的数据结构，最先进入的元素最后一个被释放（后进先出）。用 append() 方法可以把一个元素添加到堆栈顶。用不指定索引的 pop() 方法可以把一个元素从堆栈顶释放出来。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.append(<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.append(<span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.pop()</span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.pop()</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack.pop()</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stack</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h4 id="将列表当作队列使用"><a href="#将列表当作队列使用" class="headerlink" title="将列表当作队列使用"></a>将列表当作队列使用</h4><p>也可以把列表当做队列用，只是在队列里第一加入的元素，第一个取出来；但是拿列表用作这样的目的效率不高。在列表的最后添加或者弹出元素速度快，然而在列表里插入或者从头部弹出速度却不快（因为所有其他的元素都得一个一个地移动）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue = deque([<span class="string">&quot;Eric&quot;</span>, <span class="string">&quot;John&quot;</span>, <span class="string">&quot;Michael&quot;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="string">&quot;Terry&quot;</span>)           <span class="comment"># Terry arrives</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.append(<span class="string">&quot;Graham&quot;</span>)          <span class="comment"># Graham arrives</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.popleft()                 <span class="comment"># The first to arrive now leaves</span></span><br><span class="line"><span class="string">&#x27;Eric&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue.popleft()                 <span class="comment"># The second to arrive now leaves</span></span><br><span class="line"><span class="string">&#x27;John&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>queue                           <span class="comment"># Remaining queue in order of arrival</span></span><br><span class="line">deque([<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Terry&#x27;</span>, <span class="string">&#x27;Graham&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="遍历技巧"><a href="#遍历技巧" class="headerlink" title="遍历技巧"></a>遍历技巧</h4><p>在字典中遍历时，关键字和对应的值可以使用 items() 方法同时解读出来：</p><p>&gt;&gt;&gt; knights &#x3D; {‘gallahad’: ‘the pure’, ‘robin’: ‘the brave’}<br>&gt;&gt;&gt; <strong>for</strong> k, v <strong>in</strong> knights.items():<br>…   <strong>print</strong>(k, v)<br>…<br>gallahad the pure<br>robin the brave</p><p>在序列中遍历时，索引位置和对应值可以使用 enumerate() 函数同时得到：</p><p>&gt;&gt;&gt; <strong>for</strong> i, v <strong>in</strong> enumerate([‘tic’, ‘tac’, ‘toe’]):<br>…   <strong>print</strong>(i, v)<br>…<br>0 tic<br>1 tac<br>2 toe</p><p>同时遍历两个或更多的序列，可以使用 zip() 组合：</p><p>&gt;&gt;&gt; questions &#x3D; [‘name’, ‘quest’, ‘favorite color’]<br>&gt;&gt;&gt; answers &#x3D; [‘lancelot’, ‘the holy grail’, ‘blue’]<br>&gt;&gt;&gt; <strong>for</strong> q, a <strong>in</strong> zip(questions, answers):<br>…   <strong>print</strong>(‘What is your {0}?  It is {1}.’.format(q, a))<br>…<br>What <strong>is</strong> your name?  It <strong>is</strong> lancelot.<br>What <strong>is</strong> your quest?  It <strong>is</strong> the holy grail.<br>What <strong>is</strong> your favorite color?  It <strong>is</strong> blue.</p><p>要反向遍历一个序列，首先指定这个序列，然后调用 reversed() 函数：</p><p>&gt;&gt;&gt; <strong>for</strong> i <strong>in</strong> reversed(range(1, 10, 2)):<br>…   <strong>print</strong>(i)<br>…<br>9<br>7<br>5<br>3<br>1</p><p>要按顺序遍历一个序列，使用 sorted() 函数返回一个已排序的序列，并不修改原值：</p><p>&gt;&gt;&gt; basket &#x3D; [‘apple’, ‘orange’, ‘apple’, ‘pear’, ‘orange’, ‘banana’]<br>&gt;&gt;&gt; <strong>for</strong> f <strong>in</strong> sorted(set(basket)):<br>…   <strong>print</strong>(f)<br>…<br>apple<br>banana<br>orange<br>pear</p><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p>我们自己补充输入，我所知的Python输入有两种：</p><p>1、input()<br>2、sys.stdin</p><p>首先输入有两个函数需要了解：</p><p>1、strip()：删除字符串开头或结尾的字符，默认是空格或者转行，如有需要则在括号内加入需要删除的字符，如要删除 - 则strip(’-’)<br>2、split()：将字符类型转换成list，表示将字符串分开，默认以空格分开，如果需要其他的分开方式，方法同1</p><p>实际应用中，我发现input()函数读取的时间要大于sys.stdin，所以选择sys.stdin</p><p>注意事项：<br>1、一般：input().strip().split()，删除在前，分割在后<br>2、Sys.stdin.readline().strip()只能在readline后面加strip()，不能直接加</p><p>sys.stdin的三种输入情况<br>1、单行多个输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">a = sys.stdin.readline().split()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>2、不一定单行输入，且没有提示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">a = line.split()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(a[<span class="number">0</span>])+<span class="built_in">int</span>(a[<span class="number">1</span>]))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>3、多行输入，第一行为输入的行数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">line = sys.stdin.readline().strip()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(line)):</span><br><span class="line">a = sys.stdin.readline().strip()</span><br></pre></td></tr></table></figure><h4 id="try-x2F-except-x2F-else-x2F-finally"><a href="#try-x2F-except-x2F-else-x2F-finally" class="headerlink" title="try&#x2F;except&#x2F;else&#x2F;finally"></a>try&#x2F;except&#x2F;else&#x2F;finally</h4><p><img src="https://s1.vika.cn/space/2022/09/12/7f770d9e7b634e539d045db98559c159"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    runoob()</span><br><span class="line"><span class="keyword">except</span> AssertionError <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.log&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            read_data = file.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> fnf_error:</span><br><span class="line">        <span class="built_in">print</span>(fnf_error)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这句话，无论异常是否发生都会执行。&#x27;</span>)</span><br></pre></td></tr></table></figure><p>try 语句按照如下方式工作；</p><ul><li>首先，执行 try 子句（在关键字 try 和关键字 except 之间的语句）。</li><li>如果没有异常发生，忽略 except 子句，try 子句执行后结束。</li><li>如果在执行 try 子句的过程中发生了异常，那么 try 子句余下的部分将被忽略。如果异常的类型和 except 之后的名称相符，那么对应的 except 子句将被执行。</li><li>如果一个异常没有与任何的 except 匹配，那么这个异常将会传递给上层的 try 中。</li></ul><p>一个 try 语句可能包含多个except子句，分别来处理不同的特定的异常。最多只有一个分支会被执行。</p><p>处理程序将只针对对应的 try 子句中的异常进行处理，而不是其他的 try 的处理程序中的异常。</p><p>一个except子句可以同时处理多个异常，这些异常将被放在一个括号里成为一个元组，例如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">except</span> (RuntimeError, TypeError, NameError):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><p>Python 使用 raise 语句抛出一个指定的异常。</p><p>raise语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">raise [Exception [, args [, traceback]]]</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2022/09/12/9f03c18ddd0442b2be755e08816f3eca"></p><p>以下实例如果 x 大于 5 就触发异常:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">5</span>:</span><br><span class="line">  <span class="keyword">raise</span> Exception(<span class="string">&#x27;x 不能大于 5。x 的值为: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(x))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h2&gt;&lt;h3 id=&quot;标准数据类型&quot;&gt;&lt;a href=&quot;#标准数据类型&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>mysql 操作 2.0</title>
    <link href="http://example.com/2022/04/25/mysql%E8%AF%AD%E5%8F%A5/"/>
    <id>http://example.com/2022/04/25/mysql%E8%AF%AD%E5%8F%A5/</id>
    <published>2022-04-25T02:27:13.000Z</published>
    <updated>2022-09-12T07:23:22.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql-操作"><a href="#mysql-操作" class="headerlink" title="mysql 操作"></a>mysql 操作</h1><h2 id="查操作"><a href="#查操作" class="headerlink" title="查操作"></a>查操作</h2><h3 id="去重-限制行数-将查询后的列重新命名"><a href="#去重-限制行数-将查询后的列重新命名" class="headerlink" title="去重+限制行数+将查询后的列重新命名"></a>去重+限制行数+将查询后的列重新命名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select distinct device_id as user_infos_example from user_profile limit 2 </span><br><span class="line">#去重方法2：使用group by：</span><br><span class="line">SELECT university from user_profile GROUP BY university;</span><br></pre></td></tr></table></figure><p>select <code>distinct</code> device_id <code>as user_infos_example</code> from user_profile <code>limit 2</code> </p><h3 id="where用法：重点where后字符应用方式"><a href="#where用法：重点where后字符应用方式" class="headerlink" title="where用法：重点where后字符应用方式"></a>where用法：重点where后字符应用方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#找到gpa在3.5以上(不包括3.5)的山东大学用户 或 gpa在3.8以上(不包括3.8)的复旦大学同学</span><br><span class="line">select device_id,gender,age,university,gpa from user_profile</span><br><span class="line">where (gpa&gt;3.5 and university = &#x27;山东大学&#x27;)</span><br><span class="line">or (gpa&gt;3.8 and university = &#x27;复旦大学&#x27;)</span><br><span class="line">#找到学校为北大、复旦和山大的同学</span><br><span class="line">select device_id, gender, age, university, gpa from user_profile where university in (&#x27;北京大学&#x27;,&#x27;复旦大学&#x27;,&#x27;山东大学&#x27;);</span><br><span class="line">#取出所有年龄值不为空的用户</span><br><span class="line">select device_id, gender ,age, university from user_profile where age != &#x27;NUll&#x27;</span><br><span class="line">is NULL</span><br></pre></td></tr></table></figure><p>where university <code>in (&#39;北京大学&#39;,&#39;复旦大学&#39;,&#39;山东大学&#39;);</code></p><p>where age <code>!= &#39;NUll&#39;</code></p><p>where <code>(gpa&gt;3.5 and university = &#39;山东大学&#39;)</code><br><code>or (gpa&gt;3.8 and university = &#39;复旦大学&#39;)</code></p><p>where age <code>between</code> 20 and 23</p><p>select * from product where (product_id &#x3D; 100 or product_id &#x3D; 101) and product_price &gt; 200</p><h3 id="where用法-like"><a href="#where用法-like" class="headerlink" title="where用法:like"></a>where用法:like</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM 学生表 WHERE 姓名 LIKE ‘张%’ </span><br><span class="line">select prod_name, prod_desc from Products where prod_desc like &#x27;%toy%&#x27; 包含 toy 一词</span><br><span class="line">select * from  Products where prod_desc like &#x27;%toy%carrots%&#x27; 以先后顺序同时出现 toy 和 carrots</span><br><span class="line"># 查询学生表中姓‘张’的学生的详细信息。%：匹配0个或多个字符；</span><br><span class="line"></span><br><span class="line">SELECT * FROM 学生表 WHERE name LIKE &#x27;张__&#x27;  </span><br><span class="line"># 查询姓“张”且名字是3个字的学生姓名。_：匹配任意一个字符；</span><br><span class="line"></span><br><span class="line">SELECT * FROM 学生表 WHERE 姓名 LIKE &#x27;[张李刘]%’  </span><br><span class="line"># 查询学生表中姓‘张’、姓‘李’和姓‘刘’的学生的情况。[ ]：匹配[ ]中的任意一个字符(若要比较的字符是连续的，则可以用连字符“-”表 达 )；</span><br><span class="line"></span><br><span class="line">SELECT * FROM 学生表 WHERE 学号 LIKE &#x27;%[^235]&#x27;  </span><br><span class="line"># 从学生表表中查询学号的最后一位不是2、3、5的学生信息。[^ ]：不匹配[ ]中的任意一个字符。</span><br></pre></td></tr></table></figure><h3 id="函数用法：count-，round-，-avg-，max-prod-price-0-9"><a href="#函数用法：count-，round-，-avg-，max-prod-price-0-9" class="headerlink" title="函数用法：count(  )，round( , )， avg(  ) ，max(  ) ,prod_price*0.9"></a>函数用法：count(  )，round( , )， avg(  ) ，max(  ) ,prod_price*0.9</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select count(gender) as male_num, round(avg(gpa),1) as avg_gpa</span><br><span class="line">from user_profile</span><br><span class="line">where gender=&#x27;male&#x27;</span><br><span class="line">#男性用户有多少人以及他们的平均gpa是多少, round（column,1）函数进行平均数的四舍五入，保留1位小数</span><br><span class="line">select prod_id, prod_price ,prod_price*0.9 as sale_price from Products</span><br><span class="line">#sale_price 是一个包含促销价格的计算字段。提示：可以乘以 0.9，得到原价的 90%</span><br></pre></td></tr></table></figure><p>where中不能<code>使用聚合函数</code></p><p>having用于聚合函数的<code>筛选</code></p><h3 id="group-by-分组"><a href="#group-by-分组" class="headerlink" title="group by 分组"></a>group by 分组</h3><h3 id="每个学校每种性别的用户数、30天内平均活跃天数和平均发帖数量"><a href="#每个学校每种性别的用户数、30天内平均活跃天数和平均发帖数量" class="headerlink" title="每个学校每种性别的用户数、30天内平均活跃天数和平均发帖数量"></a>每个学校每种性别的用户数、30天内平均活跃天数和平均发帖数量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select gender,university,</span><br><span class="line">count(gender) as user_num,</span><br><span class="line">avg(active_days_within_30) as avg_active_day,</span><br><span class="line">avg(question_cnt) as avg_question_cnt</span><br><span class="line">from user_profile</span><br><span class="line">group by gender,university</span><br><span class="line"></span><br><span class="line">链接：https://www.nowcoder.com/questionTerminal/009d8067d2df47fea429afe2e7b9de45?answerType=1&amp;f=discussion</span><br><span class="line">来源：牛客网</span><br><span class="line">每个学校每种性别的用户数、30天内平均活跃天数和平均发帖数量</span><br><span class="line">限定条件：无；</span><br><span class="line">每个学校每种性别：按学校和性别分组：group by gender, university</span><br><span class="line">用户数：count(device_id)</span><br><span class="line">30天内平均活跃天数：avg(active_days_within_30)</span><br><span class="line">平均发帖数量：avg(question_cnt)</span><br></pre></td></tr></table></figure><h3 id="group-by-分组-加-having"><a href="#group-by-分组-加-having" class="headerlink" title="group by 分组 加 having"></a>group by 分组 加 having</h3><h4 id="取出平均发贴数低于5的学校或平均回帖数小于20的学校"><a href="#取出平均发贴数低于5的学校或平均回帖数小于20的学校" class="headerlink" title="取出平均发贴数低于5的学校或平均回帖数小于20的学校"></a>取出平均发贴数低于5的学校或平均回帖数小于20的学校</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">select university, avg(question_cnt) as avg_question_cnt, avg(answer_cnt) as avg_answer_cnt</span><br><span class="line">from user_profile</span><br><span class="line">group by university</span><br><span class="line">having avg_question_cnt &lt; 5 or avg_answer_cnt &lt; 20</span><br><span class="line"></span><br><span class="line">链接：https://www.nowcoder.com/questionTerminal/ddbcedcd9600403296038ee44a172f2d?answerType=1&amp;f=discussion</span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line">取出平均发贴数低于5的学校或平均回帖数小于20的学校</span><br><span class="line"></span><br><span class="line">问题分解：</span><br><span class="line">限定条件：平均发贴数低于5或平均回帖数小于20的学校，avg(question_cnt)&lt;5 or avg(answer_cnt)&lt;20，聚合函数结果作为筛选条件时，不能用where，而是用having语法，配合重命名即可；</span><br><span class="line">按学校输出：需要对每个学校统计其平均发贴数和平均回帖数，因此group by university</span><br><span class="line">细节问题：</span><br><span class="line">表头重命名：as</span><br><span class="line">用having不用where</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select order_num, sum(item_price * quantity) as total_price from  OrderItems group by order_num HAVING total_price &gt;= 1000 order by total_price asc </span><br><span class="line">#根据订单号聚合，返回订单总价不小于1000 的所有订单号，最后的结果按订单号进行升序排序。</span><br></pre></td></tr></table></figure><h3 id="order-by-排序"><a href="#order-by-排序" class="headerlink" title="order by 排序"></a>order by 排序</h3><p><code>order</code> 语句必须放在 where 之后</p><p><strong>ASC</strong>（默认）升序 是从小到大</p><p><strong>DESC</strong> 降序 是从大到小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">select university, avg(question_cnt) as avg_question_cnt</span><br><span class="line">from user_profile</span><br><span class="line">group by university</span><br><span class="line">order by avg_question_cnt, university ASC</span><br><span class="line"></span><br><span class="line">链接：https://www.nowcoder.com/questionTerminal/e00bbac732cb4b6bbc62a52b930cb15e?answerType=1&amp;f=discussion</span><br><span class="line">来源：牛客网</span><br><span class="line">查看不同大学的用户平均发帖情况，并期望结果按照平均发帖情况进行升序排列，请你取出相应数据</span><br><span class="line">不同大学的用户平均发帖情况，并按照平均发帖情况进行升序排列</span><br><span class="line"></span><br><span class="line">问题分解：</span><br><span class="line">限定条件：无；</span><br><span class="line">不同大学：按学校分组group by university</span><br><span class="line">平均发帖数：avg(question_cnt)</span><br><span class="line">升序排序：order by avg_question_cnt</span><br><span class="line">细节问题：</span><br><span class="line">表头重命名：as</span><br></pre></td></tr></table></figure><h3 id="group-by函数-表连接"><a href="#group-by函数-表连接" class="headerlink" title="group by函数+表连接"></a>group by函数+表连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT u.university, count(q.question_id)/count(distinct q.device_id) as avg_answer_cnt</span><br><span class="line">FROM question_practice_detail q , user_profile u</span><br><span class="line">WHERE q.device_id = u.device_id</span><br><span class="line">group by u.university</span><br><span class="line"></span><br><span class="line">链接：https://www.nowcoder.com/questionTerminal/88aa923a9a674253b861a8fa56bac8e5?answerType=1&amp;f=discussion</span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line">每个学校的用户平均答题数量</span><br><span class="line"></span><br><span class="line">问题分解：</span><br><span class="line">限定条件：无；</span><br><span class="line">每个学校：按学校分组，group by university</span><br><span class="line">平均答题数量：在每个学校的分组内，用总答题数量除以总人数即可得到平均答题数量count(question_id) / count(distinct device_id)。</span><br><span class="line">表连接：学校和答题信息在不同的表，需要做连接</span><br><span class="line">细节问题：</span><br><span class="line">表头重命名：as 22</span><br></pre></td></tr></table></figure><h3 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select ct.cust_name, sum(ol.item_price*ol.quantity) as total_price</span><br><span class="line">from OrderItems as ol, Orders as od, Customers as ct</span><br><span class="line">where ol.order_num=od.order_num and od.cust_id=ct.cust_id</span><br><span class="line">group by ct.cust_name</span><br><span class="line">having sum(ol.item_price*ol.quantity) &gt;= 1000</span><br><span class="line">order by total_price</span><br></pre></td></tr></table></figure><h3 id="组合-分别取出，结果不去重和不去重"><a href="#组合-分别取出，结果不去重和不去重" class="headerlink" title="组合,分别取出，结果不去重和不去重"></a>组合,分别取出，结果不去重和不去重</h3><h4 id="合并两个或多个-SELECT-语句的结果集"><a href="#合并两个或多个-SELECT-语句的结果集" class="headerlink" title="合并两个或多个 SELECT 语句的结果集"></a>合并两个或多个 SELECT 语句的结果集</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SELECT device_id,gender,age,gpa</span><br><span class="line">from user_profile</span><br><span class="line">where university=&#x27;山东大学&#x27;</span><br><span class="line">union all</span><br><span class="line">SELECT device_id,gender,age,gpa</span><br><span class="line">from user_profile</span><br><span class="line">where gender=&#x27;male&#x27;</span><br><span class="line"></span><br><span class="line">分别查看学校为山东大学或者性别为男性的用户的device_id、gender、age和gpa数据，请取出相应结果，结果不去重。</span><br><span class="line">链接：https://www.nowcoder.com/questionTerminal/979b1a5a16d44afaba5191b22152f64a?answerType=1&amp;f=discussion</span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line">题分解：</span><br><span class="line">限定条件：学校为山东大学或者性别为男性的用户：university=&#x27;山东大学&#x27;, gender=&#x27;male&#x27;；</span><br><span class="line">分别查看&amp;结果不去重：所以直接使用两个条件的or是不行的，直接用union也不行，要用union all，分别去查满足条件1的和满足条件2的，然后合在一起不去重</span><br><span class="line">细节问题：</span><br><span class="line">不去重：union all</span><br><span class="line"></span><br><span class="line">select prod_name from Products</span><br><span class="line">union</span><br><span class="line">select cust_name as prod_name from Customers</span><br><span class="line">order by prod_name</span><br><span class="line">#组合 Products 表中的产品名称（prod_name）和 Customers 表中的顾客名称（cust_name）并返回，然后按产品名称对结果进行升序排序。</span><br></pre></td></tr></table></figure><p>union与union all 都是行合并，前者去重，后者不去重，会全部罗列出来。他们合并后列数不变，行数变多<br>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</p><h3 id="分段-if"><a href="#分段-if" class="headerlink" title="分段 if"></a>分段 if</h3><h4 id="将用户划分为25岁以下和25岁及以上两个年龄段，分别查看这两个年龄段用户数量"><a href="#将用户划分为25岁以下和25岁及以上两个年龄段，分别查看这两个年龄段用户数量" class="headerlink" title="将用户划分为25岁以下和25岁及以上两个年龄段，分别查看这两个年龄段用户数量"></a>将用户划分为25岁以下和25岁及以上两个年龄段，分别查看这两个年龄段用户数量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">select if(age &gt;= 25, &#x27;25岁及以上&#x27;, &#x27;25岁以下&#x27;) as age_cut, count(device_id) as number</span><br><span class="line">from user_profile</span><br><span class="line">group by age_cut</span><br><span class="line"></span><br><span class="line">链接：https://www.nowcoder.com/questionTerminal/30f9f470390a4a8a8dd3b8e1f8c7a9fa?answerType=1&amp;f=discussion</span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line">将用户划分为25岁以下和25岁及以上两个年龄段，分别查看这两个年龄段用户数量</span><br><span class="line"></span><br><span class="line">问题分解：</span><br><span class="line">限定条件：无；</span><br><span class="line">年龄划分为两段：if(age&gt;=25, &quot;25岁及以上&quot;, &quot;25岁以下&quot;)</span><br><span class="line">统计用户数量：count，每个段分别统计，用group by age_cut分组</span><br><span class="line">当然本题也可以用union all解决，不过用if更直观</span><br><span class="line">细节问题：</span><br><span class="line">表头重命名</span><br><span class="line">注意题目描述的示例和testcase结果不一致！！（已修复）</span><br><span class="line">针对年龄为空的记录，需要明确是划分到哪边</span><br><span class="line">不同段的释义要根据testcase调整</span><br></pre></td></tr></table></figure><p><code>if(age&gt;=25, &quot;25岁及以上&quot;, &quot;25岁以下&quot;) as age_cut</code></p><h3 id="分段case"><a href="#分段case" class="headerlink" title="分段case"></a>分段case</h3><h4 id="将用户划分为20岁以下，20-24岁，25岁及以上三个年龄段，分别查看不同年龄段用户的明细情况，年龄为空输出为其他"><a href="#将用户划分为20岁以下，20-24岁，25岁及以上三个年龄段，分别查看不同年龄段用户的明细情况，年龄为空输出为其他" class="headerlink" title="将用户划分为20岁以下，20-24岁，25岁及以上三个年龄段，分别查看不同年龄段用户的明细情况，年龄为空输出为其他"></a>将用户划分为20岁以下，20-24岁，25岁及以上三个年龄段，分别查看不同年龄段用户的明细情况，年龄为空输出为其他</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">select device_id, gender, case when age&lt;20 then &#x27;20岁以下&#x27;</span><br><span class="line">when age&gt;=20 and age&lt;=24 then &#x27;20-24岁&#x27;</span><br><span class="line">when age&gt;=25 then &#x27;25岁及以上&#x27;</span><br><span class="line">when age is null then &#x27;其他&#x27;</span><br><span class="line">end as age_cut</span><br><span class="line">from user_profile</span><br><span class="line"></span><br><span class="line">链接：https://www.nowcoder.com/questionTerminal/ae44b2b78525417b8b2fc2075b557592?answerType=1&amp;f=discussion</span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line">题意明确：</span><br><span class="line">将用户划分为20岁以下，20-24岁，25岁及以上三个年龄段，分别查看不同年龄段用户的明细情况，年龄为空输出为其他</span><br><span class="line"></span><br><span class="line">问题分解：</span><br><span class="line">限定条件：无；</span><br><span class="line">划分年龄段：数值条件判断，可以用多重if，不过更方便的是用case when [expr] then [result1]...else [default] end</span><br><span class="line">附：case when用法</span><br><span class="line">细节问题：</span><br><span class="line">表头重命名：as</span><br><span class="line">输出的段明文在题目描述和输出示例中不一致，以输出示例为准</span><br></pre></td></tr></table></figure><p>when age is null then ‘其他’<br><code>end</code> as age_cut</p><h3 id="截取与其他字符串函数"><a href="#截取与其他字符串函数" class="headerlink" title="截取与其他字符串函数"></a>截取与其他字符串函数</h3><h4 id="统计每个性别的用户分别有多少参赛者"><a href="#统计每个性别的用户分别有多少参赛者" class="headerlink" title="统计每个性别的用户分别有多少参赛者"></a>统计<strong>每个性别</strong>的用户分别有<strong>多少参赛者</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">select substring_index(profile,&#x27;,&#x27;,-1) as gender,</span><br><span class="line">count(device_id) as number</span><br><span class="line">from user_submit</span><br><span class="line">group by gender;</span><br><span class="line"></span><br><span class="line">链接：https://www.nowcoder.com/questionTerminal/f04189f92f8d4f6fa0f383d413af7cb8?answerType=1&amp;f=discussion</span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line">统计每个性别的用户分别有多少参赛者</span><br><span class="line"></span><br><span class="line">问题分解：</span><br><span class="line">限定条件：无；</span><br><span class="line"></span><br><span class="line">每个性别：按性别分组group by gender，但是没有gender字段，需要从profile字段截取，按字符,分割后取出即可。可使用substring_index函数可以按特定字符串截取源字符串。</span><br><span class="line"></span><br><span class="line">substring_index(FIELD, sep, n)可以将字段FIELD按照sep分隔：</span><br><span class="line"></span><br><span class="line">(1).当n大于0时取第n个分隔符(n从1开始)左边的全部内容；</span><br><span class="line"></span><br><span class="line">(2).当n小于0时取倒数第n个分隔符(n从-1开始)右边的全部内容；</span><br><span class="line"></span><br><span class="line">因此，本题可以直接用substring_index(profile, &#x27;,&#x27;, -1)取出性别。 附：substring_index函数解析</span><br><span class="line"></span><br><span class="line">多少参赛者：计数统计，count(device_id)</span><br><span class="line"></span><br><span class="line">链接：https://www.nowcoder.com/questionTerminal/b8d8a87fe1fc415c96f355dc62bdd12f?answerType=1&amp;f=discussion</span><br><span class="line">来源：牛客网</span><br><span class="line"></span><br><span class="line">统计每个年龄的用户分别有多少参赛者</span><br><span class="line"></span><br><span class="line">问题分解：</span><br><span class="line">限定条件：无；</span><br><span class="line">每个年龄：按年龄分组group by age，但是没有age字段，需要从profile字段截取，按字符,分割后取出即可。可使用substring_index函数可以按特定字符串截取源字符串。</span><br><span class="line">substring_index(FIELD, sep, n)可以将字段FIELD按照sep分隔：</span><br><span class="line">(1).当n大于0时取第n个分隔符(n从1开始)之后的全部内容；</span><br><span class="line">(2).当n小于0时取倒数第n个分隔符(n从-1开始)之前的全部内容；</span><br><span class="line">因此，本题可以先用substring_index(profile, &#x27;,&#x27;, 3)取出&quot;180cm,75kg,27&quot;，然后用substring_index(profile, &#x27;,&#x27;, -1)取出27。</span><br><span class="line">当然也可以用substring_index(substring_index(profile, &quot;,&quot;, -2), &quot;,&quot;, 1)取出27。</span><br><span class="line">附：substring_index函数解析</span><br><span class="line">多少参赛者：计数统计，count(device_id)</span><br><span class="line">细节问题：</span><br><span class="line">表头重命名：as</span><br><span class="line">完整代码：</span><br><span class="line">select</span><br><span class="line">    substring_index(substring_index(profile, &#x27;,&#x27;, 3), &#x27;,&#x27;, -1) as age,</span><br><span class="line">    count(device_id) as number</span><br><span class="line">from user_submit</span><br><span class="line">group by age</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1、LOCATE(substr , str )：返回子串 substr 在字符串 str 中第一次出现的位置，如果字符substr在字符串str中不存在，则返回0；</p><p>2、POSITION(substr IN str )：返回子串 substr 在字符串 str 中第一次出现的位置，如果字符substr在字符串str中不存在，与LOCATE函数作用相同；</p><p>3、LEFT(str, length)：从左边开始截取str，length是截取的长度；</p><p>4、RIGHT(str, length)：从右边开始截取str，length是截取的长度；</p><p>5、<code>SUBSTRING_INDEX(str ,substr ,n)：</code>返回字符substr在str中第n次出现位置之前的字符串;</p><p>6、<code>SUBSTRING(str ,n ,m)：</code>返回字符串str从第n个字符截取到第m个字符；</p><p>7、REPLACE(str, n, m)：将字符串str中的n字符替换成m字符；</p><p>8、LENGTH(str)：计算字符串str的长度。</p><h3 id="字符串拼接与大写"><a href="#字符串拼接与大写" class="headerlink" title="字符串拼接与大写"></a>字符串拼接与大写</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select cust_id, cust_name, </span><br><span class="line">upper(concat(substring(cust_contact,1,2), substring(cust_city,1,3))) as user_login </span><br><span class="line">from Customers</span><br><span class="line">#其中登录名全部为大写字母，并由顾客联系人的前两个字符（cust_contact）和其所在城市的前三个字符（cust_city）组成</span><br><span class="line">用法：</span><br><span class="line">字符串的截取：substring(字符串，起始位置，截取字符数）</span><br><span class="line">字符串的拼接：concat(字符串1，字符串2，字符串3,...)</span><br><span class="line">字母大写：upper(字符串）</span><br></pre></td></tr></table></figure><h3 id="每个学校gpa最低的同学"><a href="#每个学校gpa最低的同学" class="headerlink" title="每个学校gpa最低的同学"></a>每个学校gpa最低的同学</h3><h4 id="每个学校gpa最低的同学来做调研，请你取出每个学校的最低gpa。"><a href="#每个学校gpa最低的同学来做调研，请你取出每个学校的最低gpa。" class="headerlink" title="每个学校gpa最低的同学来做调研，请你取出每个学校的最低gpa。"></a>每个学校gpa最低的同学来做调研，请你取出每个学校的最低gpa。</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select device_id,university,gpa</span><br><span class="line">from user_profile</span><br><span class="line">where (university,gpa) in (select university,min(gpa) from user_profile group by university)</span><br><span class="line">order by university</span><br></pre></td></tr></table></figure><h3 id="左连接，右连接"><a href="#左连接，右连接" class="headerlink" title="左连接，右连接"></a>左连接，右连接</h3><h3 id="检索每个顾客的名称（Customers表中的-cust-name）和所有的订单号（Orders-表中的-order-num），列出所有的顾客，即使他们没有下过订单。最后根据顾客姓名cust-name升序返回。"><a href="#检索每个顾客的名称（Customers表中的-cust-name）和所有的订单号（Orders-表中的-order-num），列出所有的顾客，即使他们没有下过订单。最后根据顾客姓名cust-name升序返回。" class="headerlink" title="检索每个顾客的名称（Customers表中的 cust_name）和所有的订单号（Orders 表中的 order_num），列出所有的顾客，即使他们没有下过订单。最后根据顾客姓名cust_name升序返回。"></a>检索每个顾客的名称（Customers表中的 cust_name）和所有的订单号（Orders 表中的 order_num），列出所有的顾客，即使他们没有下过订单。最后根据顾客姓名cust_name升序返回。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">select cust_name, order_num</span><br><span class="line">from   Customers as ct</span><br><span class="line">left join Orders as od on od.cust_id=ct.cust_id</span><br><span class="line">order by cust_name</span><br><span class="line"></span><br><span class="line">select prod_name,order_num</span><br><span class="line">from Products as p</span><br><span class="line">left join OrderItems as o</span><br><span class="line">on p.prod_id=o.prod_id</span><br><span class="line">order by prod_name asc</span><br><span class="line">#使用 OUTER JOIN 联结 Products 表和 OrderItems 表，返回产品名称（prod_name）和与之相关的订单号（order_num）的列表，并按照产品名称升序排序</span><br><span class="line"></span><br><span class="line">select p.prod_name,count(o.order_num) as orders</span><br><span class="line">from Products p</span><br><span class="line">left join OrderItems o on p.prod_id = o.prod_id</span><br><span class="line">group by p.prod_name</span><br><span class="line">order by p.prod_name</span><br><span class="line">#返回产品和产品对应的实际支付的订单数，但是无实际订单的产品soda也返回，最后根据产品名称升序排序。</span><br><span class="line"></span><br><span class="line">select V.vend_id, count(if(prod_id is null,null,prod_id)) as prod_id</span><br><span class="line">from  Vendors V</span><br><span class="line">left join Products P</span><br><span class="line">on V.vend_id = P.vend_id</span><br><span class="line">group by V.vend_id</span><br><span class="line">order by V.vend_id</span><br><span class="line">#列出供应商（Vendors 表中的 vend_id）及其可供产品的数量，包括没有产品的供应商。你需要使用 OUTER JOIN 和 COUNT()聚合函数来计算 Products 表中每种产品的数量，最后根据vend_id 升序排序。</span><br><span class="line">#注意：vend_id 列会显示在多个表中，因此在每次引用它时都需要完全限定它。</span><br></pre></td></tr></table></figure><p>关键信息：<strong>没有下过单顾客名也需要列出来</strong>，需要使用左外连接或者右外连接；最后采用<code>order by</code>排序;</p><p>左外连接：连接符号左边的表里面的数据全部显示，连接符号右边的表如果与左表匹配则正常列出；如果不匹配则置为<code>NULL</code>；MySQL中为<code>表1 left outer join 表2 on 连接条件</code>,其中<code>outer</code>可以省略；</p><p>右外连接：与左外连接相反；MySQL中为<code>表1 right outer join 表2 on 连接条件</code>,其中<code>outer</code>可以省略；</p><p><code>谁为主，谁显示的多放左边</code>  <code>on加条件</code></p><h2 id="增删改操作"><a href="#增删改操作" class="headerlink" title="增删改操作"></a>增删改操作</h2><h3 id="插入题（一）"><a href="#插入题（一）" class="headerlink" title="插入题（一）"></a>插入题（一）</h3><p>考察的是SQL插入<code>多行数据</code>的方法，为了方便理解后面用中文进行填写（不是很规范），即：</p><ul><li><code>INSERT INTO tab_name (col_name) VALUES</code> (要插入的数据,这里是第一行数据), (要插入的数据,这里是第二行数据)…(要插入的数据，第n行数据);</li></ul><p>但是我们要<strong>注意题目中的两个小细节：</strong></p><ul><li>第一个就是<strong>插入的表格存在自增主键</strong><img src="/mysql%E8%AF%AD%E5%8F%A5.assets/D2B5CA33BD970F64A6301FA75AE2EB22" alt="alt"> 这里的id是<strong>自增主键（PRIMARY KEY)<strong>，这就意味着不需要你自己手动填入，它会跟随表格行数进行自己增加（比如这样增加id值👉1，2，3…n）。<br>所以我们在插入数据的时候，</strong>方法之一： 可以指定插入的列名，</strong> 这样就不用填写id这一列的数据，让他自增。具体插入代码如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO exam_record (uid, exam_id, start_time, submit_time, score) VALUES``(``1001``, ``9001``, ``&#x27;2021-09-01 22:11:12&#x27;``, ``&#x27;2021-09-01 23:01:12&#x27;``, ``90``),``(``1002``, ``9002``, ``&#x27;2021-09-04 07:01:02&#x27;``, NULL, NULL);</span><br></pre></td></tr></table></figure><p><strong>方法之二：把id的值设置为NULL或0，这样MySQL会自己处理这个自增的id列。</strong> 具体代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO exam_record VALUES``(NULL, ``1001``, ``9001``, ``&#x27;2021-09-01 22:11:12&#x27;``, ``&#x27;2021-09-01 23:01:12&#x27;``, ``90``),``(NULL, ``1002``, ``9002``, ``&#x27;2021-09-04 07:01:02&#x27;``, NULL, NULL);</span><br></pre></td></tr></table></figure><p>其实<strong>还有一个方法三：直接填入id值</strong>，不过仅针对插入数据不多的时候使用，大家了解一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO exam_record VALUES``(``1``, ``1001``, ``9001``, ``&#x27;2021-09-01 22:11:12&#x27;``, ``&#x27;2021-09-01 23:01:12&#x27;``, ``90``),``(``2``, ``1002``, ``9002``, ``&#x27;2021-09-04 07:01:02&#x27;``, NULL, NULL);</span><br></pre></td></tr></table></figure><ul><li>第二个<strong>细节就是这句“在10分钟后退出了平台”</strong>，以及表格创建的这里的YES👇： <img src="/mysql%E8%AF%AD%E5%8F%A5.assets/D2B5CA33BD970F64A6301FA75AE2EB22" alt="alt"></li></ul><p>这两个地方都表明了用户1002是没有做完试卷就结束了考试。 所以submit_time 和score这两列都填NULL即可。</p><p><a href="https://www.nowcoder.com/practice/5d2a42bfaa134479afb9fffd9eee970c?tpId=240&amp;tqId=2221797&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=/exam/oj?page=1&tab=SQL%25E7%25AF%2587&topicId=240">https://www.nowcoder.com/practice/5d2a42bfaa134479afb9fffd9eee970c?tpId=240&amp;tqId=2221797&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DSQL%25E7%25AF%2587%26topicId%3D240</a></p><h3 id="插入题（二）"><a href="#插入题（二）" class="headerlink" title="插入题（二）"></a>插入题（二）</h3><p>插入记录的方式汇总：</p><ul><li>普通插入（全字段）：INSERT INTO table_name VALUES (value1, value2, …)</li><li>普通插入（限定字段）：INSERT INTO table_name (column1, column2, …) VALUES (value1, value2, …)</li><li>多条一次性插入：INSERT INTO table_name (column1, column2, …) VALUES (value1_1, value1_2, …), (value2_1, value2_2, …), …</li><li>从另一个表导入：INSERT INTO table_name SELECT * FROM table_name2 [WHERE key&#x3D;value]</li></ul><hr><h4 id="细节剖析："><a href="#细节剖析：" class="headerlink" title="细节剖析："></a>细节剖析：</h4><ul><li>新表exam_record_before_2021已创建好；</li><li>第一列为自增主键列，不能直接复制过去；</li><li>只复制2021年之前的记录；</li><li>只复制已完成了的试题作答纪录；</li></ul><hr><h4 id="思路实现："><a href="#思路实现：" class="headerlink" title="思路实现："></a>思路实现：</h4><ul><li>本题可采用第四种插入方式，需根据细节剖析的点做稍微改动，改为限定字段插入，即只插入除自增id列以外的列:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO exam_record_before_2021(uid, exam_id, start_time, submit_time, score)``SELECT uid, exam_id, start_time, submit_time, score``FROM exam_record``WHERE YEAR(submit_time) &lt; ``&#x27;2021&#x27;``;</span><br></pre></td></tr></table></figure><ul><li>注意上面的WHERE条件简化了细节剖析里的后两个条件，用submit_time来判断可以隐含的保证已完成这个条件。如果用start_time判断可能会出错（如下代码），比如20201231晚上开始做，20210101凌晨完成，分开来筛选结果会不对，写作：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-- 错误示例``WHERE YEAR(start_time) &lt; ``&#x27;2021&#x27;` `and submit_time IS NOT NULL;</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/9681abf28745468c8adacb3b029a18ce?tpId=240&amp;tqId=2223554&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=/exam/oj?page=1&tab=SQL%25E7%25AF%2587&topicId=240">https://www.nowcoder.com/practice/9681abf28745468c8adacb3b029a18ce?tpId=240&amp;tqId=2223554&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DSQL%25E7%25AF%2587%26topicId%3D240</a></p><h3 id="插入题（三）"><a href="#插入题（三）" class="headerlink" title="插入题（三）"></a>插入题（三）</h3><p>明确考点：</p><p>插入记录的方式汇总：</p><ul><li>普通插入（全字段）：INSERT INTO table_name VALUES (value1, value2, …)</li><li>普通插入（限定字段）：INSERT INTO table_name (column1, column2, …) VALUES (value1, value2, …)</li><li>多条一次性插入：INSERT INTO table_name (column1, column2, …) VALUES (value1_1, value1_2, …), (value2_1, value2_2, …), …</li><li>从另一个表导入：INSERT INTO table_name SELECT * FROM table_name2 [WHERE key&#x3D;value]</li><li>带更新的插入：REPLACE INTO table_name VALUES (value1, value2, …) （注意这种原理是检测到主键或唯一性索引键重复就删除原记录后重新插入）</li></ul><hr><h4 id="细节剖析：-1"><a href="#细节剖析：-1" class="headerlink" title="细节剖析："></a>细节剖析：</h4><ul><li>高难度SQL试卷；</li><li>时长为一个半小时，等于90分钟；</li><li>2021-01-01 00:00:00 作为发布时间；</li><li>不管该ID试卷是否存在，都要插入成功；</li></ul><hr><h4 id="思路实现：-1"><a href="#思路实现：-1" class="headerlink" title="思路实现："></a>思路实现：</h4><ul><li>本题可采用第五种插入方式，试卷ID列有唯一性索引，自增主键可直接设置为NULL或0或DEFAULT:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE INTO examination_info VALUES`` ``(NULL, ``9003``, ``&quot;SQL&quot;``, ``&quot;hard&quot;``, ``90``, ``&quot;2021-01-01 00:00:00&quot;``);</span><br></pre></td></tr></table></figure><ul><li>当然也可以限定字段插入，写作：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE INTO examination_info(exam_id,tag,difficulty,duration,release_time) VALUES`` ``(``9003``, ``&quot;SQL&quot;``, ``&quot;hard&quot;``, ``90``, ``&quot;2021-01-01 00:00:00&quot;``);</span><br></pre></td></tr></table></figure><ul><li>最后还有一种曲折方式，就是先删除可能存在的9003号试卷，再用insert into插入：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM examination_info WHERE exam_id=``9003``;``INSERT INTO examination_info (exam_id, tag, difficulty, duration, release_time) VALUES`` ``(``9003``, ``&quot;SQL&quot;``, ``&quot;hard&quot;``, ``90``, ``&quot;2021-01-01 00:00:00&quot;``)</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/978bcee6530a430fb0be716423d84082?tpId=240&amp;tqId=2223556&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=/exam/oj?page=1&tab=SQL%25E7%25AF%2587&topicId=240">https://www.nowcoder.com/practice/978bcee6530a430fb0be716423d84082?tpId=240&amp;tqId=2223556&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DSQL%25E7%25AF%2587%26topicId%3D240</a></p><h3 id="更新记录（一）"><a href="#更新记录（一）" class="headerlink" title="更新记录（一）"></a>更新记录（一）</h3><h4 id="明确考点："><a href="#明确考点：" class="headerlink" title="明确考点："></a>明确考点：</h4><p>修改记录的方式汇总：</p><ul><li>设置为新值：UPDATE table_name SET column_name&#x3D;new_value [, column_name2&#x3D;new_value2] [WHERE column_name3&#x3D;value3]</li><li>根据已有值替换：UPDATE table_name SET key1&#x3D;replace(key1, ‘查找内容’, ‘替换成内容’) [WHERE column_name3&#x3D;value3]</li></ul><hr><h4 id="细节剖析：-2"><a href="#细节剖析：-2" class="headerlink" title="细节剖析："></a>细节剖析：</h4><ul><li>tag为PYTHON的tag字段全部修改为Python</li></ul><hr><h4 id="思路实现：-2"><a href="#思路实现：-2" class="headerlink" title="思路实现："></a>思路实现：</h4><ul><li>本题采用两种修改方式均可，语义为『当tag为PYTHON时，修改tag为Python』，先用第一种:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE examination_info``SET tag = ``&quot;Python&quot;``WHERE tag = ``&quot;PYTHON&quot;``;</span><br></pre></td></tr></table></figure><ul><li>如果采用第二种，写作：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE examination_info``SET tag = REPLACE(tag, ``&quot;PYTHON&quot;``, ``&quot;Python&quot;``)``WHERE tag = ``&quot;PYTHON&quot;``;</span><br></pre></td></tr></table></figure><ul><li>思维扩展：第二种方式不仅可用于整体替换，还能做子串替换，例如要实现将tag中所有的PYTHON替换为Python（如CPYTHON&#x3D;&gt;CPython），可写作：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE examination_info``SET tag = REPLACE(tag, ``&quot;PYTHON&quot;``, ``&quot;Python&quot;``)``WHERE tag LIKE ``&quot;%PYTHON%&quot;``;</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/bfe8ad2bddc540fc911614aa648868b3?tpId=240&amp;tqId=2223557&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=/exam/oj?page=1&tab=SQL%25E7%25AF%2587&topicId=240">https://www.nowcoder.com/practice/bfe8ad2bddc540fc911614aa648868b3?tpId=240&amp;tqId=2223557&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DSQL%25E7%25AF%2587%26topicId%3D240</a></p><h3 id="更新记录（二）"><a href="#更新记录（二）" class="headerlink" title="更新记录（二）"></a>更新记录（二）</h3><h4 id="明确考点：-1"><a href="#明确考点：-1" class="headerlink" title="明确考点："></a>明确考点：</h4><p>修改记录的方式汇总：</p><ul><li>设置为新值：UPDATE table_name SET column_name&#x3D;new_value [, column_name2&#x3D;new_value2] [WHERE column_name3&#x3D;value3]</li><li>根据已有值替换：UPDATE table_name SET key1&#x3D;replace(key1, ‘查找内容’, ‘替换成内容’) [WHERE column_name3&#x3D;value3]</li></ul><hr><h4 id="细节剖析：-3"><a href="#细节剖析：-3" class="headerlink" title="细节剖析："></a>细节剖析：</h4><ul><li>只改2021年9月1日之前开始作答的记录；</li><li>只改未完成的记录；</li><li>改为被动完成：完成时间改为’2099-01-01 00:00:00’，分数改为0</li></ul><hr><h4 id="思路实现：-3"><a href="#思路实现：-3" class="headerlink" title="思路实现："></a>思路实现：</h4><ul><li>本题宜采用第一种修改方式，满足条件1和条件2就修改:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE exam_record``SET submit_time=``&#x27;2099-01-01 00:00:00&#x27;``, score=``0``WHERE start_time &lt; ``&#x27;2021-09-01 00:00:00&#x27;` `AND score IS NULL;</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/0c2e81c6b62e4a0f848fa7693291defc?tpId=240&amp;tqId=2223560&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=/exam/oj?page=1&tab=SQL%25E7%25AF%2587&topicId=240">https://www.nowcoder.com/practice/0c2e81c6b62e4a0f848fa7693291defc?tpId=240&amp;tqId=2223560&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DSQL%25E7%25AF%2587%26topicId%3D240</a></p><h3 id="删除记录（一）"><a href="#删除记录（一）" class="headerlink" title="删除记录（一）"></a>删除记录（一）</h3><h4 id="明确考点：-2"><a href="#明确考点：-2" class="headerlink" title="明确考点："></a>明确考点：</h4><p>删除记录的方式汇总：</p><ul><li>根据条件删除：DELETE FROM tb_name [WHERE options] [ [ ORDER BY fields ] LIMIT n ]</li><li>全部删除（表清空，包含自增计数器重置）：TRUNCATE tb_name</li></ul><p>时间差：</p><ul><li>TIMESTAMPDIFF(interval, time_start, time_end)可计算time_start-time_end的时间差，单位以指定的interval为准，常用可选：<ul><li>SECOND 秒</li><li>MINUTE 分钟（返回秒数差除以60的整数部分）</li><li>HOUR 小时（返回秒数差除以3600的整数部分）</li><li>DAY 天数（返回秒数差除以3600*24的整数部分）</li><li>MONTH 月数</li><li>YEAR 年数</li></ul></li></ul><hr><h4 id="细节剖析：-4"><a href="#细节剖析：-4" class="headerlink" title="细节剖析："></a>细节剖析：</h4><ul><li>作答时间小于5分钟整的记录；</li><li>分数不及格（及格线为60分）的记录；</li></ul><hr><h4 id="思路实现：-4"><a href="#思路实现：-4" class="headerlink" title="思路实现："></a>思路实现：</h4><ul><li>本题采用第一种删除方式，满足条件1和条件2就删除:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM exam_record``WHERE TIMESTAMPDIFF(MINUTE, start_time, submit_time) &lt; ``5``  ``AND score &lt; ``60``;</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/d331359c5ca04a3b87f06b97da42159c?tpId=240&amp;tqId=2223561&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=/exam/oj?page=1&tab=SQL%25E7%25AF%2587&topicId=240">https://www.nowcoder.com/practice/d331359c5ca04a3b87f06b97da42159c?tpId=240&amp;tqId=2223561&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DSQL%25E7%25AF%2587%26topicId%3D240</a></p><h3 id="删除记录（二）"><a href="#删除记录（二）" class="headerlink" title="删除记录（二）"></a>删除记录（二）</h3><h4 id="明确考点：-3"><a href="#明确考点：-3" class="headerlink" title="明确考点："></a>明确考点：</h4><p>删除记录的方式汇总：</p><ul><li>根据条件删除：DELETE FROM tb_name [WHERE options] [ [ ORDER BY fields ] LIMIT n ]</li><li>全部删除（表清空，包含自增计数器重置）：TRUNCATE tb_name</li></ul><p>时间差：</p><ul><li>TIMESTAMPDIFF(interval, time_start, time_end)可计算time_start-time_end的时间差，单位以指定的interval为准，常用可选：<ul><li>SECOND 秒</li><li>MINUTE 分钟（返回秒数差除以60的整数部分）</li><li>HOUR 小时（返回秒数差除以3600的整数部分）</li><li>DAY 天数（返回秒数差除以3600*24的整数部分）</li><li>MONTH 月数</li><li>YEAR 年数</li></ul></li></ul><hr><h4 id="细节剖析：-5"><a href="#细节剖析：-5" class="headerlink" title="细节剖析："></a>细节剖析：</h4><ul><li>未完成作答的记录；</li><li>或作答时间小于5分钟整的记录；</li><li>开始作答时间最早的3条记录；</li></ul><hr><h4 id="思路实现：-5"><a href="#思路实现：-5" class="headerlink" title="思路实现："></a>思路实现：</h4><ul><li>本题采用第一种删除方式，满足条件1或条件2就删除，但只删除3条记录:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM exam_record``WHERE submit_time IS NULL``  ``OR TIMESTAMPDIFF(MINUTE, start_time, submit_time) &lt; ``5``ORDER BY start_time``LIMIT ``3``;</span><br></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/964c9f7fffbb4ab18b507cfed4111b4a?tpId=240&amp;tqId=2223562&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=/exam/oj?page=1&tab=SQL%25E7%25AF%2587&topicId=240">https://www.nowcoder.com/practice/964c9f7fffbb4ab18b507cfed4111b4a?tpId=240&amp;tqId=2223562&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DSQL%25E7%25AF%2587%26topicId%3D240</a></p><h3 id="删除记录（三）"><a href="#删除记录（三）" class="headerlink" title="删除记录（三）"></a>删除记录（三）</h3><h4 id="明确考点：-4"><a href="#明确考点：-4" class="headerlink" title="明确考点："></a>明确考点：</h4><p>删除记录的方式汇总：</p><ul><li>根据条件删除：DELETE FROM tb_name [WHERE options] [ [ ORDER BY fields ] LIMIT n ]</li><li>全部删除（表清空，包含自增计数器重置）：TRUNCATE tb_name</li></ul><hr><h4 id="细节剖析：-6"><a href="#细节剖析：-6" class="headerlink" title="细节剖析："></a>细节剖析：</h4><ul><li>删除exam_record表中所有记录；</li><li>并重置自增主键；</li></ul><hr><h4 id="思路实现：-6"><a href="#思路实现：-6" class="headerlink" title="思路实现："></a>思路实现：</h4><ul><li>本题采用第二种删除方式，满足条件1或条件2就删除，但只删除3条记录:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE exam_record;</span><br></pre></td></tr></table></figure><ul><li>也可采用第一种，不过需要手动重置自增ID，不过效率角度考虑，还是第二种方式效率更高：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM exam_record;``ALTER TABLE exam_record auto_increment=``1``;</span><br></pre></td></tr></table></figure><h2 id="表与索引操作"><a href="#表与索引操作" class="headerlink" title="表与索引操作"></a>表与索引操作</h2><h3 id="创建一张新表"><a href="#创建一张新表" class="headerlink" title="创建一张新表"></a>创建一张新表</h3><h3 id="明确考点：-5"><a href="#明确考点：-5" class="headerlink" title="明确考点："></a>明确考点：</h3><p>表的创建、修改与删除：</p><ul><li>1.1 直接创建表：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE</span><br><span class="line">[IF NOT EXISTS] tb_name -- 不存在才创建，存在就跳过</span><br><span class="line">(column_name1 data_type1 -- 列名和类型必选</span><br><span class="line">  [ PRIMARY KEY -- 可选的约束，主键</span><br><span class="line">   | FOREIGN KEY -- 外键，引用其他表的键值</span><br><span class="line">   | AUTO_INCREMENT -- 自增ID</span><br><span class="line">   | COMMENT comment -- 列注释（评论）</span><br><span class="line">   | DEFAULT default_value -- 默认值</span><br><span class="line">   | UNIQUE -- 唯一性约束，不允许两条记录该列值相同</span><br><span class="line">   | NOT NULL -- 该列非空</span><br><span class="line">  ], ...</span><br><span class="line">) [CHARACTER SET charset] -- 字符集编码</span><br><span class="line">[COLLATE collate_value] -- 列排序和比较时的规则（是否区分大小写等）</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>1.2 从另一张表复制表结构创建表： <code>CREATE TABLE tb_name LIKE tb_name_old</code></li><li>1.3 从另一张表的查询结果创建表： <code>CREATE TABLE tb_name AS SELECT * FROM tb_name_old WHERE options</code></li><li>2.1 修改表：<code>ALTER TABLE 表名 修改选项</code> 。选项集合：</li></ul><p><a href="https://www.nowcoder.com/practice/a61ee5519d14444aa99e530309a8e043?tpId=240&tqId=2223564&ru=/exam/oj&qru=/ta/sql-advanced/question-ranking&sourceUrl=/exam/oj?page=1&tab=SQL%E7%AF%87&topicId=240#">复制代码</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123; ADD COLUMN &lt;列名&gt; &lt;类型&gt;  -- 增加列</span><br><span class="line"> | CHANGE COLUMN &lt;旧列名&gt; &lt;新列名&gt; &lt;新列类型&gt; -- 修改列名或类型</span><br><span class="line"> | ALTER COLUMN &lt;列名&gt; &#123; SET DEFAULT &lt;默认值&gt; | DROP DEFAULT &#125; -- 修改/删除 列的默认值</span><br><span class="line"> | MODIFY COLUMN &lt;列名&gt; &lt;类型&gt; -- 修改列类型</span><br><span class="line"> | DROP COLUMN &lt;列名&gt; -- 删除列</span><br><span class="line"> | RENAME TO &lt;新表名&gt; -- 修改表名</span><br><span class="line"> | CHARACTER SET &lt;字符集名&gt; -- 修改字符集</span><br><span class="line"> | COLLATE &lt;校对规则名&gt; &#125; -- 修改校对规则（比较和排序时用到）</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>3.1 删除表：<code>DROP TABLE [IF EXISTS] 表名1 [ ,表名2]</code>。</li></ul><p><a href="https://www.nowcoder.com/practice/a61ee5519d14444aa99e530309a8e043?tpId=240&amp;tqId=2223564&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=/exam/oj?page=1&tab=SQL%25E7%25AF%2587&topicId=240">https://www.nowcoder.com/practice/a61ee5519d14444aa99e530309a8e043?tpId=240&amp;tqId=2223564&amp;ru=/exam/oj&amp;qru=/ta/sql-advanced/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DSQL%25E7%25AF%2587%26topicId%3D240</a></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>索引创建、删除与使用：</p><ul><li>1.1 create方式创建索引：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE </span><br><span class="line">  [UNIQUE -- 唯一索引</span><br><span class="line">  | FULLTEXT -- 全文索引</span><br><span class="line">  ] INDEX index_name ON table_name -- 不指定唯一或全文时默认普通索引</span><br><span class="line">  (column1[(length) [DESC|ASC]] [,column2,...]) -- 可以对多列建立组合索引  </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>1.2 alter方式创建索引：<code>ALTER TABLE tb_name ADD [UNIQUE | FULLTEXT] [INDEX] index_content(content)</code></p></li><li><p>2.1 drop方式删除索引：<code>DROP INDEX &lt;索引名&gt; ON &lt;表名&gt;</code></p></li><li><p>2.2 alter方式删除索引：<code>ALTER TABLE &lt;表名&gt; DROP INDEX &lt;索引名&gt;</code></p></li><li><p>3.1 索引的使用：</p><ul><li>索引使用时满足最左前缀匹配原则，即对于组合索引(col1, col2)，在不考虑引擎优化时，条件必须是col1在前col2在后，或者只使用col1，索引才会生效；</li><li>索引不包含有NULL值的列</li><li>一个查询只使用一次索引，where中如果使用了索引，order by就不会使用</li><li>like做字段比较时只有前缀确定时才会使用索引</li><li>在列上进行运算后不会使用索引，如year(start_time)&lt;2020不会使用start_time上的索引</li></ul><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 法1</span><br><span class="line">drop index uniq_idx_exam_id on examination_info;</span><br><span class="line">drop index full_idx_tag  on examination_info;</span><br><span class="line"># 法2</span><br><span class="line">alter table examination_info drop index uniq_idx_exam_id;</span><br><span class="line">alter table examination_info drop index full_idx_tag;</span><br></pre></td></tr></table></figure><h3 id="错题1："><a href="#错题1：" class="headerlink" title="错题1："></a>错题1：</h3><p>学生表:TB STUDENT(SNO,SNAME,SEX,AGE,CLASS)</p><p>课程表:TB COURSE(CNO,CNAME,CREDIT),</p><p>成绩表:TB REPORT(SNO,CNO,SCORE)<br>此次开设的课程有’Java、Python’、’Gơ。</p><p>请查询此次完成Java，GO两门学科并考试合格(TB REPORT.SCORE&gt;&#x3D;60)</p><p>的学生的(SNO)、姓名(SNAME)、班级(CLASS)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">select SNO, SNAME, CLASS from TB STUDENT as STU where STU.SNO in (</span><br><span class="line">select REP.SNO </span><br><span class="line">    from TB_COURSE as COU, TB_REPORT as REP </span><br><span class="line">    where COU.CNO = REP.CNO</span><br><span class="line">and COU.CNAME  in (&#x27;java&#x27;,&#x27;go&#x27;) </span><br><span class="line">    group by REP.SNO</span><br><span class="line">    having min(REP.SCORE) &gt;= 60</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">select STU.SNO, STU.SNAME, STU.CLASS from TB STUDENT as STU where STU.SNO in (</span><br><span class="line">select REP.SNO from</span><br><span class="line">(select s1.SNO from TB REPORT as s1</span><br><span class="line">     join TB_COURSE as COU using(CNO) and COU.CNAME  in (&#x27;java&#x27;) )REP,</span><br><span class="line">(select s2.SNO from TB REPORT as s2</span><br><span class="line">     join TB_COURSE as COU2 using(CNO) and COU2.CNAME  in (&#x27;go&#x27;) )REP2</span><br><span class="line">where</span><br><span class="line">REP.SNO = REP2.SNO</span><br><span class="line">    group by REP.SNO</span><br><span class="line">    having min(REP.SCORE) &gt;= 60</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Mysql中用join-using来简化join-on"><a href="#Mysql中用join-using来简化join-on" class="headerlink" title="Mysql中用join using来简化join on"></a>Mysql中用join using来简化join on</h2><p>using(column_name)</p><p>简化前</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from t_a a</span><br><span class="line">join t_b b on a.column_a = b.column_a;</span><br></pre></td></tr></table></figure><p>简化后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from t_a a</span><br><span class="line">join t_b b using(column_a);</span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2022/09/12/0d7465b59c59495c957ec22fc380baae"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql-操作&quot;&gt;&lt;a href=&quot;#mysql-操作&quot; class=&quot;headerlink&quot; title=&quot;mysql 操作&quot;&gt;&lt;/a&gt;mysql 操作&lt;/h1&gt;&lt;h2 id=&quot;查操作&quot;&gt;&lt;a href=&quot;#查操作&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL基础</title>
    <link href="http://example.com/2022/01/25/mysql/"/>
    <id>http://example.com/2022/01/25/mysql/</id>
    <published>2022-01-25T09:34:53.000Z</published>
    <updated>2022-09-12T07:23:08.962Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、什么是数据库？"><a href="#1、什么是数据库？" class="headerlink" title="1、什么是数据库？"></a>1、什么是数据库？</h2><p>数据库是用来存储和管理数据的仓库。</p><h2 id="2-数据库存储的好处"><a href="#2-数据库存储的好处" class="headerlink" title="2.数据库存储的好处"></a>2.数据库存储的好处</h2><p>1、可存储大量数据；</p><p>2、方便检索；</p><p>3、保持数据的一致性、完整性；</p><p>4、安全性，可共享性</p><h2 id="3-常见数据库"><a href="#3-常见数据库" class="headerlink" title="3.常见数据库"></a>3.常见数据库</h2><p>1、Oracle2、SQL Server3、DB2 </p><p>4、<strong>MySql</strong> 优点：体积小、速度快、总体拥有成本低</p><h2 id="4-MySql-安装"><a href="#4-MySql-安装" class="headerlink" title="4.MySql 安装"></a>4.MySql 安装</h2><p>字符集基本使用UTF-8 端口默认3306</p><h2 id="5-Mysql-基础"><a href="#5-Mysql-基础" class="headerlink" title="5.Mysql 基础"></a>5.Mysql 基础</h2><p>三种存储引擎：InnoDB-常用（默认）     支持事务安全表，支持行锁定和外键，需要注意InnoDB是默认的MySQL引擎。  </p><p><img src="https://s1.vika.cn/space/2022/09/12/e28ffbf30205493a8bbc1c515a4f2386"></p><p><img src="https://s1.vika.cn/space/2022/09/12/f43b47c791f247b98c676262e9804b2b"></p><p><img src="https://s1.vika.cn/space/2022/09/12/b33e083c474d4ae4a1f4de161bfe719d"></p><p><img src="https://s1.vika.cn/space/2022/09/12/8a90974ff4ce45de87d5f3adc64a04e3"></p><p><strong>float单精度</strong>存储浮点类型的话就是4x8&#x3D;<strong>32位</strong>的长度,所以float单精度浮点数在内存中占<strong>4</strong>个字节，并且用<strong>32位二进制</strong>。</p><p> <strong>double双精度</strong>存储浮点类型就是8x8&#x3D;<strong>64位</strong>的长度,所以double双精度浮点数在内存中占<strong>8</strong>个字节，并且用<strong>64位</strong>二进制。</p><p><img src="https://s1.vika.cn/space/2022/09/12/e90896a100574f3c898500bb30cd27d0"></p><h2 id="6-SQL-语言分类"><a href="#6-SQL-语言分类" class="headerlink" title="6.SQL 语言分类"></a>6.SQL 语言分类</h2><p>1、DDL：数据定义语言，用来定义数据库对象：库、表、列等，常见关键字CREATE、DROP、ALTER等等；</p><p> 2、DML：数据操作语言，用来定义数据库记录，常见关键字INSERT、UPDATE、DELETE等；</p><p> 3、DCL：数据控制语言，用来定义访问权限和安全级别；</p><p> <strong>4、DQL：数据查询语言，用来查询记录，SELECT相关关键字。</strong></p><p>7.DDL 数据定义语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 1、创建数据库</span><br><span class="line">CREATE DATABASE IF NOT EXISTS change818; -- 建立change818数据库（IF NOT EXISTS可以不写，但是数据库名不能重复）</span><br><span class="line">-- 2、创建数据库并指定字符集</span><br><span class="line">CREATE DATABASE IF NOT EXISTS change818 DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci; </span><br><span class="line">-- 3、查看所有数据库名称</span><br><span class="line">SHOW DATABASES;</span><br><span class="line">-- 4、切换到change818数据库</span><br><span class="line">USE change818;</span><br><span class="line">-- 5、删除数据库</span><br><span class="line">DROP DATABASE IF EXISTS change818; -- 删除change818的数据库（IF EXISTS可以不写，但是数据库名必须存在）</span><br></pre></td></tr></table></figure><p><strong>创建</strong><br>    语法<br>        CREATE TABLE 表名 (列名1 列类型,列名2 列类型,列名3 列类型);<br>    举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student (</span><br><span class="line">id INT (11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">stu_no VARCHAR (10) NOT NULL,</span><br><span class="line">stu_name VARCHAR (20) NOT NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>修改</strong><br>    <strong>添加列</strong><br>        语法<br>            ALTER TABLE 表名 ADD(列字段 VARCHAR(100));<br>        举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student ADD(update_date DATETIME); </span><br></pre></td></tr></table></figure><p>​<strong>修改列</strong><br>​语法<br>​ALTER TABLE 表名 MODIFY 列字段 CHAR(2);<br>​举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student MODIFY update_date DATE;</span><br></pre></td></tr></table></figure><p>​<strong>修改列名</strong><br>​语法<br>​ALTER TABLE 表名 CHANGE 原列字段名 新列字段名 CHAR(2);<br>​举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student change update_date update_date datetime;</span><br></pre></td></tr></table></figure><p>​<strong>删除列</strong><br>​语法<br>​ALTER TABLE 表名 DROP 列名;<br>​举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student DROP update_date1;</span><br></pre></td></tr></table></figure><p>​<strong>修改表名称</strong><br>​语法<br>​ALTER TABLE 原表名 RENAME TO 新表名;<br>​举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE student RENAME TO student1;</span><br></pre></td></tr></table></figure><p><strong>数据库表操作</strong><br>    <strong>新增数据</strong><br>        语法<br>            INSERT INTO 表名(列名1,列名2) VALUES (值1,值2)；<br>        举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO student (stu_no,stu_name,age,sex,create_date) VALUES (&#x27;stu_1&#x27;, &#x27;刘一&#x27;, 22, &#x27;男&#x27;, &#x27;2018-02-01 00:00:00&#x27;);</span><br></pre></td></tr></table></figure><p>​<strong>修改数据</strong><br>​语法<br>​UPDATE 表名 SET 列名1&#x3D;值1,列名n&#x3D;值n[ WHERE 条件]<br>​举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE student SET age=23 WHERE stu_no=&#x27;stu_1&#x27;;</span><br></pre></td></tr></table></figure><p>​<strong>删除数据</strong><br>​语法<br>​DELETE FROM 表名[ WHERE 条件]<br>​举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM student WHERE stu_no=&#x27;stu_1&#x27;;</span><br></pre></td></tr></table></figure><h2 id="7、DQL：数据查询语言"><a href="#7、DQL：数据查询语言" class="headerlink" title="7、DQL：数据查询语言"></a>7、DQL：数据查询语言</h2><p><strong>基础查询</strong></p><p>– SELECT 列名称1 , 列名称2 FROM 表名称;</p><p>– 查询学生表所有信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student;</span><br></pre></td></tr></table></figure><p>– 查询学生信息，要求显示学号、姓名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT stu_no,stu_name FROM student;</span><br></pre></td></tr></table></figure><p><strong>– 条件运算符</strong><br><strong>– 1、&#x3D;  !&#x3D;  &lt;&gt;  &lt;  &lt;&#x3D;  &gt;  &gt;&#x3D;</strong><br><strong>– 2、BETWEEN…AND 在什么条件之间的</strong><br><strong>– 3、IN()   在什么集合里面</strong><br><strong>– 4、IS NULL  条件是空</strong><br><strong>– 5、AND  并且，多个条件全部满足</strong><br><strong>– 6、OR  或者，多个条件有一个满足就行</strong><br><strong>– 7、NOT  取反，真为假假为真</strong><br><strong>– 8、IS NOT NULL  条件不为空</strong></p><p>– 条件查询案例<br>– 1、查询性别为女，并且年龄等于21的记录（&#x3D;、and）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student WHERE sex = &#x27;女&#x27; AND age = 21;</span><br></pre></td></tr></table></figure><p><strong>– LIKE 模糊查询用法</strong><br><strong>– 1、’_’字母占位符</strong><br><strong>– 2、’%’任意字符匹配符</strong></p><p>– LIKE 模糊查询案例</p><p>– <strong>4、查询姓名中第2个字母为“i”的学生记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student WHERE stu_name LIKE &#x27;_i%&#x27;;</span><br></pre></td></tr></table></figure><p>– 给表取别名<br>– 给列取别名</p><p>– 作用：方便、增强可读性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT *,IFNULL(t.age,0)  (AS) age_1 FROM student t ;</span><br></pre></td></tr></table></figure><p><strong>聚合函数</strong></p><p>– 1、统计：COUNT()<br>–  2、最大值：MAX()<br>–  3、最小值：MIN()<br>–  4、求和：SUM()<br>–  5、求平均值：AVG()</p><p><strong>– 1、ORDER BY 排序</strong><br><strong>– 2、GROUP BY分组查询</strong><br><strong>– 3、HAVING子句  WHERE是对“分组前”记录的条件筛选，如果某行记录没有满足WHERE子句的条件，那么这行记录不会参加分组；而HAVING是对“分组后”数据的约束（两者区别非常重要）</strong></p><p>– 4、LIMIT分页查询</p><p>– 1、查询所有学生记录，按年龄升序排序(默认为升序：ASC)</p><p>– 2、查询所有学生记录，按年龄降序排序(<strong>降序:DESC)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student ORDER BY age DESC,stu_no ASC;</span><br></pre></td></tr></table></figure><p>– 3、查询学生成绩表，找出各科最高成绩和课程编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> SELECT * FROM score;</span><br><span class="line">SELECT MAX(stu_score),course_no FROM score GROUP BY course_no;</span><br></pre></td></tr></table></figure><p>– 4、查询每门课程的平均成绩，显示平均成绩和课程编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(stu_score),course_no FROM score GROUP BY course_no;</span><br></pre></td></tr></table></figure><p>– 5、查询每门课程的平均成绩，并找出平均成绩大于60分的课程编号和平均成绩having配合group by 不会单独使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT AVG(stu_score) AS avg_score,course_no FROM score GROUP BY course_no HAVING avg_score &gt; 60;</span><br></pre></td></tr></table></figure><p>– 6、查询学生表前5行记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student LIMIT 0,5;</span><br></pre></td></tr></table></figure><p><strong>1、联合查询（UNION、UNION ALL）</strong><br><strong>2、内连接 （INNER JOIN ON）</strong><br><strong>3、左链接 （LEFT JOIN ON）</strong><br><strong>4、右链接（RIGHT JOIN ON）</strong></p><p>1、查询美国部门和中国部门所有员工姓名，要求不能用重复姓名（UNION）<br>UNION<br>    : 两个SELECT或两个以上的连接在一起 SELECT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t1.`name`</span><br><span class="line">FROM</span><br><span class="line">employees_usa t1</span><br><span class="line">UNION</span><br><span class="line">SELECT</span><br><span class="line">t2.`name`</span><br><span class="line">FROM</span><br><span class="line">employees_china t2;</span><br></pre></td></tr></table></figure><p>2、查询美国部门和中国部门所有员工姓名（UNION ALL）<br>UNION ALL<br>    : 两个SELECT或两个以上的连接在一起去重 SELECT</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t1.`name`</span><br><span class="line">FROM</span><br><span class="line">employees_usa t1</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT</span><br><span class="line">t2.`name`</span><br><span class="line">FROM</span><br><span class="line">employees_china t2;</span><br></pre></td></tr></table></figure><p>3、查询学生所有成绩，要求显示学号、姓名、成绩（使用内连接 &#x3D;<br>INNER JOIN ON） </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> SELECT</span><br><span class="line"> t1.stu_no,</span><br><span class="line">​t1.stu_name,</span><br><span class="line">​t2.stu_score</span><br><span class="line">FROM</span><br><span class="line">​student t1,</span><br><span class="line">​score t2</span><br><span class="line">WHERE</span><br><span class="line">​t1.stu_no = t2.stu_no;</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">t1.stu_no,</span><br><span class="line">t1.stu_name,</span><br><span class="line">t2.stu_score</span><br><span class="line">FROM</span><br><span class="line">student t1</span><br><span class="line">INNER JOIN score t2 ON t1.stu_no = t2.stu_no;</span><br></pre></td></tr></table></figure><p>4、查询学生所有成绩，要求显示学号、姓名、成绩（使用左连接（LEFT JSON ON）、右连接（RIGHT<br>JOIN ON））理解 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">t1.stu_no,</span><br><span class="line">t1.stu_name,</span><br><span class="line">t2.stu_score</span><br><span class="line">FROM</span><br><span class="line">student t1</span><br><span class="line">LEFT JOIN score t2 ON t1.stu_no = t2.stu_no;</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">t1.stu_no,</span><br><span class="line">t1.stu_name,</span><br><span class="line">t2.stu_score</span><br><span class="line">FROM</span><br><span class="line">student t1</span><br><span class="line">RIGHT JOIN score t2 ON t1.stu_no = t2.stu_no;</span><br></pre></td></tr></table></figure><p>– 什么是子查询：</p><p>子查询就是嵌套查询，即 SELECT 中包含SELECT，如果一条语句中存在两个或两个以上 SELECT就是子查询1. FROM后，作为被查询的一条表</p><ol start="2"><li>WHERE后，作为条件的一部分</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">sc.course_no,</span><br><span class="line">sc.stu_no,</span><br><span class="line">stu1.stu_name,</span><br><span class="line">sc.stu_score</span><br><span class="line">FROM</span><br><span class="line">score sc,</span><br><span class="line">(</span><br><span class="line">SELECT</span><br><span class="line">stu_no,stu_name</span><br><span class="line">FROM</span><br><span class="line">student</span><br><span class="line">WHERE</span><br><span class="line">stu_name = &#x27;王五&#x27;</span><br><span class="line">) stu1</span><br><span class="line">WHERE</span><br><span class="line">sc.stu_no = stu1.stu_no;</span><br></pre></td></tr></table></figure><p><strong>– 定义变量：</strong><br><strong>– 1、set@num&#x3D;1;或set@num:&#x3D;1;</strong><br><strong>– 2、select@num:&#x3D;1 （以临时表形式存在）</strong></p><p>– 1、查询学生平均成绩，按照降序排序，并显示名次、学号、平均成绩</p><p>– 查询学生平均成绩，按照降序排序，显示学号、平均成绩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    @ranking :=@ranking + 1 AS ranking,</span><br><span class="line">    t1.stu_no,</span><br><span class="line">    t1.avg_score</span><br><span class="line">FROM</span><br><span class="line">    (</span><br><span class="line">        SELECT</span><br><span class="line">            sc.stu_no,</span><br><span class="line">            avg(sc.stu_score) AS avg_score</span><br><span class="line">        FROM</span><br><span class="line">            score sc</span><br><span class="line">        GROUP BY</span><br><span class="line">            sc.stu_no</span><br><span class="line">        ORDER BY</span><br><span class="line">            avg_score DESC</span><br><span class="line">    ) t1,</span><br><span class="line">    (SELECT @ranking := 0) t2;</span><br></pre></td></tr></table></figure><h2 id="8-索引"><a href="#8-索引" class="headerlink" title="8.索引"></a>8.索引</h2><p><strong>索引</strong>：索引是对数据库表中一列或多列的值进行排序的一种结构<br>优点：</p><p><strong>索引可以大大提高MySQL的检索速度,通过创建唯一性索引 .</strong></p><p>可以保证数据库表中每一行数据的唯一性。</p><p>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</p><p>缺点：</p><p><strong>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加</strong><br>索引需要占物理空间，除了数据表占用数据空间之外，每一个索引还要占用一定的物理空间<br>对表中的数据进行增、删、改的时候，索引也要动态的维护，这就降低了整数的维护速度<br>如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果</p><p>应该创建索引的列</p><p><strong>在经常需要搜索的列上，可以加快搜索的速度；</strong><br>在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构；<br>在经常需要根据范围（&lt;，&lt;&#x3D;，&#x3D;，&gt;，&gt;&#x3D;）进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的；<br>在经常需要排序（order by）的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；<br>在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。</p><p>不该创建索引的列</p><p>对于那些在查询中很少使用或者参考的列不应该创建索引；<br>对于那些只有很少数据值或者重复值多的列也不应该增加索引；<br>对于那些定义为text,image和bit数据类型的列不应该增加索引，这些列的数据量要么相当大，要么取值很少；<br>当该列修改性能要求远远高于检索性能时，不应该创建索引。（修改性能和检索性能是互相矛盾的）</p><p><strong>索引类型：</strong></p><p>a、主键索引,一张表只能有一个主键索引，不允许重复、不允许为NULL</p><ul><li><p>ALTER TABLE TableName ADD PRIMARY KEY(column_list);</p></li><li><p>ALTER TABLE test ADD PRIMARY KEY (id);</p></li></ul><p>​b、唯一索引，</p><p>数据列不允许重复，允许为 NULL 值，一张表可有多个唯一索引，索引列的值必须唯一，但允许有空值。如果是组合索引，则列值的组合必须唯一<br>– ALTER TABLE table_name ADD UNIQUE(column_list);<br>– ALTER TABLE test ADD UNIQUE (test_no);</p><p>– c、普通索引</p><p>一张表可以创建多个普通索引，一个普通索引可以包含多个字段，允许数据重复，允许NULL值插入</p><p>– ALTER TABLE table_name ADD INDEX IndexName(<code>字段名</code>(length));<br>– ALTER TABLE test ADD INDEX test_name_index(<code>test_name</code>(15));</p><p>– d、组合索引</p><p>一个组合索引包含两个或两个以上的列，组合索引“最左原则”</p><p>– CREATE INDEX index_name ON table_name(col_name_1 , col_name_2);-创建普通组合索引<br>                CREATE INDEX test_no_name ON test(test_no,test_name);创建唯一组合索引</p><p>组合索引，列的顺序非常重要，例如：假设存在组合索引(c1,c2)；<br>查询语句select * from t1 where c1&#x3D;1 and c2&#x3D;2能够使用【组合索引(c1,c2)】；<br>查询语句select * from t1 where c1&#x3D;1也能够使用【组合索引(c1,c2)】；<br>查询语句select * from t1 where c2&#x3D;2不能够使用【组合索引(c1,c2)】；<br>因为没有组合索引的引导列，即，要想使用c2列进行查找，必需出现c1等于某值。</p><p>– 4、查看索引是否创建成功</p><p>– 5、使用客户端创建test表（不创建索引）</p><h2 id="9-MySql-事务"><a href="#9-MySql-事务" class="headerlink" title="9.MySql 事务"></a>9.MySql 事务</h2><p><strong>一个事务就是一个完整的业务逻辑，这个业务是最小的逻辑单元，不可再分，要么同时成功，要么同时失败。事务主要用于处理操作量大，复杂度高的数据</strong></p><p><strong>原子性：最小的工作单元，不可再分</strong><br><strong>一致性：同时成功或同时失败</strong><br><strong>隔离性：A事务和B事务之间有隔离</strong><br><strong>持久性：事务提交后，事务执行所产生的数据将会被持久化到数据库表中</strong></p><p>在MySQL中只有使用了Innodb数据库引擎的数据库或表才支持事务。<br>事务处理可以用来维护数据库的完整性，保证成批的SQL语句要么全部执行，要么全部不执行。<br>事务用来管理insert、update、delete语句</p><p> 通过一个简单的例子来学习变量的声明和赋值 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create procedure test2()</span><br><span class="line">begin</span><br><span class="line">  -- 使用 declare语句声明一个变量</span><br><span class="line">  declare inpunt_stu_no varchar(10) default &#x27;&#x27;;</span><br><span class="line">  declare out_stu_name varchar(20) default &#x27;&#x27;;</span><br><span class="line">  -- 使用set语句给变量赋值</span><br><span class="line">  set inpunt_stu_no = &#x27;stu_01&#x27;;</span><br><span class="line">  -- 将users表中id=1的名称赋值给username</span><br><span class="line">  select stu_name into out_stu_name from student where stu_no = inpunt_stu_no;</span><br><span class="line">  -- 返回变量</span><br><span class="line">  select out_stu_name;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>存储过程解析：</p><ol><li>变量的声明使用 declare ，一句 declare 只声明一个变量，变量必须先声明后使用；</li><li>变量具有数据类型和长度，与 mysql 的 SQL 数据类型保持一致；</li><li>变量可以通过 set 来赋值，也可以通过 select into 的方式赋值；</li><li>变量需要返回，可以使用 selec t语句，如：select 变量名</li></ol><p> 调用存储过程 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call test2(); </span><br></pre></td></tr></table></figure><p> 条件语句示例（这次考试，年龄小于20岁的学生每科+10分，小于23岁的学生每科-5分，大于23岁的学生+5） </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">create procedure test6(in in_stu_no int)</span><br><span class="line">begin</span><br><span class="line">   declare my_age int default 0;</span><br><span class="line">   select age into my_age from student where stu_no=in_stu_no;</span><br><span class="line">   if(my_age &lt; 20)</span><br><span class="line">   then </span><br><span class="line">       update score set stu_score=stu_score+10 where stu_no=in_stu_no;</span><br><span class="line">    elseif(my_age &lt; 23)</span><br><span class="line">    then </span><br><span class="line">       update score set stu_score=stu_score-5 where stu_no=in_stu_no;</span><br><span class="line">    else </span><br><span class="line">       update score set stu_score=stu_score+10 where stu_no=in_stu_no;</span><br><span class="line">    end if;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>while 语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create procedure test7()</span><br><span class="line">begin</span><br><span class="line">  declare i int default 0;</span><br><span class="line">  while(i&lt;10) do </span><br><span class="line">    begin </span><br><span class="line">        select i;</span><br><span class="line">        set i=i+1;  </span><br><span class="line">        insert into student(stu_no,stu_name) values(concat(&#x27;test_&#x27;,i),&#x27;test&#x27;);</span><br><span class="line">     end;</span><br><span class="line">  end while;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure><p>一个简单的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create function getStuName(stu_id int) returns varchar(32)</span><br><span class="line">    reads sql data  -- 从数据库中读取数据，但不修改数据</span><br><span class="line">    begin</span><br><span class="line">        declare stuName varchar(20) default &#x27;&#x27;;</span><br><span class="line">        select stu_name into stuName from student where id=stu_id;</span><br><span class="line">        return stuName;</span><br><span class="line">    end;</span><br><span class="line">调用函数</span><br><span class="line">select getStuName(10)</span><br></pre></td></tr></table></figure><p>函数与存储过程区别</p><p>函数与存储过程最大的区别是函数必须有返回值，否则会报错</p><p>函数特点</p><ol><li>创建函数使用create function 函数名(参数) returns 返回类型；</li><li>函数体放在begin和end之间；</li><li>returns 指定函数的返回值；</li><li>函数调用使用select 函数名称()；</li><li>reads sql data，可读取SQL,但不可修改 SQL 数据</li></ol><h2 id="10-视图"><a href="#10-视图" class="headerlink" title="10.视图"></a>10.视图</h2><h3 id="（1）视图定义"><a href="#（1）视图定义" class="headerlink" title="（1）视图定义"></a><strong>（1）视图定义</strong></h3><ul><li>视图是从一个或多个表中查询出来的数据保存为视图，是一种虚拟存在的表。</li></ul><h3 id="（2）视图作用"><a href="#（2）视图作用" class="headerlink" title="（2）视图作用"></a><strong>（2）视图作用</strong></h3><ol><li>视图的作用：简化SQL查询，提高效率。</li></ol><h3 id="（3）视图的优缺点"><a href="#（3）视图的优缺点" class="headerlink" title="（3）视图的优缺点"></a><strong>（3）视图的优缺点</strong></h3><ul><li>优点：<ol><li>简单性，视图能简化用户的操作</li><li>安全性，视图使用户能以多种角度看待同一数据，能够对机密数据提供安全保护</li><li>逻辑独立性，视图对重构数据库提供了一定程度的逻辑独立性</li></ol></li><li>缺点：<ol><li>性能相对较差，简单的查询也会因为牵扯多表而复杂</li><li>修改不方便，回因为表间约束而使一些数据视图无法修改</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 创建视图</span><br><span class="line">create view view_student</span><br><span class="line">as</span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line">-- 使用视图</span><br><span class="line">select * from view_student where age &lt;= 21;</span><br><span class="line"></span><br><span class="line">-- 视图的修改</span><br><span class="line">ALTER view view_student as select * from student where sex = &#x27;男&#x27;;</span><br><span class="line"></span><br><span class="line">-- 使用视图</span><br><span class="line">select * from view_student where age &lt;= 21;</span><br><span class="line"></span><br><span class="line">-- 删除视图</span><br><span class="line">drop view view_student;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、什么是数据库？&quot;&gt;&lt;a href=&quot;#1、什么是数据库？&quot; class=&quot;headerlink&quot; title=&quot;1、什么是数据库？&quot;&gt;&lt;/a&gt;1、什么是数据库？&lt;/h2&gt;&lt;p&gt;数据库是用来存储和管理数据的仓库。&lt;/p&gt;
&lt;h2 id=&quot;2-数据库存储的好处&quot;&gt;</summary>
      
    
    
    
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux 基础</title>
    <link href="http://example.com/2022/01/05/Linux%20%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/01/05/Linux%20%E5%9F%BA%E7%A1%80/</id>
    <published>2022-01-05T02:34:23.000Z</published>
    <updated>2022-09-12T07:23:04.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-基础"><a href="#Linux-基础" class="headerlink" title="Linux 基础"></a>Linux 基础</h1><p> tab补全 右键复制 I 编辑 ESC ：wq！保存退出</p><p><img src="https://s1.vika.cn/space/2022/09/12/0c0348b6e9e34f9daf31afb6404c2b7d"></p><p>&#x2F;根目录；&#x2F;etc存放系统和应用程序的配置文件</p><p>&#x2F;home存放用户文件的主目录</p><p>&#x2F;var包含各种数据文件，日志，临时文件等</p><p>&#x2F;root root用户的home目录</p><p>&#x2F;bin用户和系统管理员需要使用的命令程序</p><p>#：超级管理员$：普通用户</p><p>相对路径：从当前路径开始的路径<br>绝对路径：从根目录开始的路径&#x2F;home&#x2F;temp</p><p>cd  .. 返回上一文件夹 cd &#x2F;返回根目录cd ..&#x2F;..&#x2F;..&#x2F;连续放回3次上一层</p><p>用法：改变用户当前路径<br><strong>1、cd&#x2F;切换到根目录</strong><br><strong>2、cd&#x2F;tmp用绝对路径切换到tmp目录</strong><br><strong>3、cd tmp用相对路径切换到tmp路径</strong><br><strong>4、cd ..返回上一层</strong><br><strong>5、cd ..&#x2F;..&#x2F;..&#x2F;连续放回3次上一层</strong></p><p>ifconfig</p><p>ping命令检查连通性，退出ctrl c</p><p>pwd命令查看当前路径</p><p>whoami命令查看当前用户</p><p><strong>1、ls -l 以列表的形式查看当前目录下所有可见文件的详细属性</strong><br><strong>2、ls -a 显示所有文件，包含隐藏文件</strong><br><strong>3、ls -al 以详细信息显示所有文件，包含隐藏文件</strong></p><p><strong>ps命令</strong></p><p><strong>语法：ps -ef grep进程关键字</strong><br><strong>详细：查看java进程ps-ef grep jav</strong>a</p><p>date命令</p><p>clear命令</p><p><strong>kill -9进程编号</strong></p><p><img src="https://s1.vika.cn/space/2022/09/12/8afe4e33550349688cffce03937d6b70"></p><p><strong>新建、删除、重命名、剪切、复制、查找</strong><br><strong>touch、rm、mv、cp、find</strong></p><p><strong>文件夹（目录）新建、删除、重命名、剪切、复制、查找</strong><br><strong>mkdir、rmdir、mv、cp、find</strong></p><p><strong>1、cat命令：查看文件内容</strong><br>2、less命令：分屏查看文件内容<br>3、more命令：分屏查看文件内容<br>4、head命令：查看文件内容<br><strong>5、tail命令：查看文件内容，监控日志文件ctrlc退出</strong></p><p>1、压缩：tar cvf sum.tar aaab.txt<br>2、解压缩：tar xvf sum.tar<br>3、查看压缩包的内容：tar -tvf sum.tar<br>4、追加文件(文件夹)到压缩包：tar -rf sum.tar cccd.txt<br>5、删除压缩包的内容tar–delete-f sum.tar aaab.txt</p><p><strong>.tar.gz压缩和解压缩</strong></p><p><strong>1、压缩：gzip sum.tar</strong><br><strong>2、解压缩：gun zip sum.tar.gz</strong><br><strong>3、压缩：tar czvf sum.tar.gz sum.tar</strong><br><strong>4、解压缩：tar xzvf sum.tar.gz tab补全</strong></p><p>1、压缩：zip –r sum.zip(需要打名的名)a.txt<br>2、解压缩：unzip sum.zip<br>3、unzip -o XXXX.zip自动覆盖<br>4、unzip -d testXXX.zip解压到你需要的目录里面</p><p><strong>用法：vi文明名</strong><br><strong>【i】切换编辑模式</strong><br><strong>【:wq！】保存并且退出:w只保存不退出:q不保存退出:q!不保存强制退出</strong><br><strong>【:0】光标移动到文件的首行:$光标移动至最后一行:nu显示当前光标所在行号</strong><br><strong>【:set nu】所有内容显示行号:set nonu不显示行号</strong></p><p>chmod命令</p><p><img src="https://s1.vika.cn/space/2022/09/12/b37496f6599f4d62b1510fa195dc9675"></p><p>1、chmod后面的数字分别代表【文件所有者】、【群组用户】、【其他用户】<br>2、7&#x3D;4+2+1读写运行权限<br>3、5&#x3D;4+1读和运行权限<br>4、4&#x3D;4只读权限<br>5、<strong>chmod 777</strong>、chmod 754、chmod 751</p><p>读写运行且执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux-基础&quot;&gt;&lt;a href=&quot;#Linux-基础&quot; class=&quot;headerlink&quot; title=&quot;Linux 基础&quot;&gt;&lt;/a&gt;Linux 基础&lt;/h1&gt;&lt;p&gt; tab补全 右键复制 I 编辑 ESC ：wq！保存退出&lt;/p&gt;
&lt;p&gt;&lt;img src=</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>WebAPI</title>
    <link href="http://example.com/2022/01/03/WebAPIs/"/>
    <id>http://example.com/2022/01/03/WebAPIs/</id>
    <published>2022-01-03T03:14:53.000Z</published>
    <updated>2022-09-12T07:23:31.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-APIs-DOM、BOM"><a href="#Web-APIs-DOM、BOM" class="headerlink" title="Web APIs     DOM、BOM"></a>Web APIs     DOM、BOM</h1><h1 id="1-基本认识"><a href="#1-基本认识" class="headerlink" title="1.基本认识"></a>1.基本认识</h1><h3 id="1-1作用与分类"><a href="#1-1作用与分类" class="headerlink" title="1.1作用与分类"></a>1.1作用与分类</h3><p><strong>作用</strong>：   简而言之就是使用JavaScript去操作html和浏览器</p><p><strong>分类</strong>：   DOM（文档对象模型）BOM（浏览器对象模型）</p><p>​         <img src="../pictures/WebAPIs分类.png"  /></p><h3 id="1-2DOM-Document-Object-Model"><a href="#1-2DOM-Document-Object-Model" class="headerlink" title="1.2DOM(Document Object Model)"></a>1.2DOM(Document Object Model)</h3><p>​文档对象模型，用于呈现以及HTML和XML文档交互的API</p><p>​<strong>DOM树</strong>  将HTML文档以树状结构表现出来，称之为DOM树，直观的体现了标签和标签的关系</p> <img src="../pictures/DOM树.png"  /><p>​<strong>DOM的核心是把内容当作对象类处理</strong></p><h1 id="2-DOM的基本操作"><a href="#2-DOM的基本操作" class="headerlink" title="2.DOM的基本操作"></a>2.DOM的基本操作</h1><h3 id="2-1获取DOM元素"><a href="#2-1获取DOM元素" class="headerlink" title="2.1获取DOM元素"></a>2.1获取DOM元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取匹配的第一个元素    </span></span><br><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;css选择器&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​返回值：</p><p>​CSS选择器匹配的第一个元素,一个 HTMLElement对象，如果没有匹配到，则返回null</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取匹配的所有元素    </span></span><br><span class="line"><span class="keyword">let</span> lis = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;ul li&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​返回值：</p><p>​CSS选择器匹配的所有元素,返回的是伪数组(有长度索引号，但是不能使用数组方法)，只能通过遍历的方式获取里面的每一个DOM元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据ID获取一个元素  </span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;nav&#x27;</span>)</span><br><span class="line"><span class="comment">//根据标签获取一类元素  获取页面的所有div</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementByTagName</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="comment">//根据类名获取元素    获取页面所有类名为aoteman的</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementByClassName</span>(<span class="string">&#x27;aoteman&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意</strong>     小括号里必须加**引号’’**，然后里面写css选择器</p><h3 id="2-2设置-x2F-修改DOM元素的内容"><a href="#2-2设置-x2F-修改DOM元素的内容" class="headerlink" title="2.2设置&#x2F;修改DOM元素的内容"></a>2.2设置&#x2F;修改DOM元素的内容</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="comment">//对象.属性 = 值</span></span><br><span class="line"><span class="comment">//innerText   添加文本内容</span></span><br><span class="line">box.<span class="property">innerText</span> = <span class="string">&#x27; &#x27;</span></span><br><span class="line"><span class="comment">//innerHTML</span></span><br><span class="line">box.<span class="property">innerHTML</span> = <span class="string">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>inner<strong>Text 不会解析</strong>标签</p><p>​inner<strong>HTML会解析</strong>里面的标签</p><h3 id="2-3设置-x2F-修改DOM元素的属性"><a href="#2-3设置-x2F-修改DOM元素的属性" class="headerlink" title="2.3设置&#x2F;修改DOM元素的属性"></a>2.3设置&#x2F;修改DOM元素的属性</h3><h5 id="2-3-1修改常用属性"><a href="#2-3-1修改常用属性" class="headerlink" title="2.3.1修改常用属性"></a>2.3.1修改常用属性</h5><p><strong>对象.属性</strong> &#x3D; 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pic = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line"><span class="comment">//对象.属性 = 值</span></span><br><span class="line">pic.<span class="property">src</span> = <span class="string">&#x27;./images/img1.png&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="2-3-2修改元素的样式"><a href="#2-3-2修改元素的样式" class="headerlink" title="2.3.2修改元素的样式"></a>2.3.2修改元素的样式</h5><p>对象**.style.样式属性** &#x3D; 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="comment">//对象.style.样式属性 = 值</span></span><br><span class="line">box.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span></span><br><span class="line">box.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;400px&#x27;</span></span><br></pre></td></tr></table></figure><p>如果属性有-连接符，需要转换为小驼峰命名法；大部分数字后面都需要加单位</p><h5 id="2-3-3修改元素的类名"><a href="#2-3-3修改元素的类名" class="headerlink" title="2.3.3修改元素的类名"></a>2.3.3修改元素的类名</h5><p>box**.className** &#x3D; ‘one active’</p><p>box.classList**.remove**(‘类名’)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="comment">//1. 修改box的类名   这种方式会覆盖原有的类名，想要不覆盖添加两个类名</span></span><br><span class="line">box.<span class="property">className</span> = <span class="string">&#x27;one active&#x27;</span></span><br><span class="line"><span class="comment">//2. 追加类名</span></span><br><span class="line">box.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">//3. 删除类名</span></span><br><span class="line">box.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">//4. 切换类名</span></span><br><span class="line">box.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="2-3-4修改表单元素属性"><a href="#2-3-4修改表单元素属性" class="headerlink" title="2.3.4修改表单元素属性"></a>2.3.4修改表单元素属性</h5><p>取值:对象.属性名    赋值：对象.属性名 &#x3D; ‘新值’</p><p> disabled、checked、selected</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> checkbox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.checkbox&#x27;</span>)</span><br><span class="line"><span class="comment">//1.   取值:对象.属性名    赋值：对象.属性名 = &#x27;新值&#x27;</span></span><br><span class="line">input.<span class="property">value</span> = <span class="string">&#x27;aoteman&#x27;</span></span><br><span class="line">input.<span class="property">type</span> = <span class="string">&#x27;password&#x27;</span></span><br><span class="line"><span class="comment">//2.   修改表单元素属性</span></span><br><span class="line">btn.<span class="property">disabled</span> = <span class="literal">false</span><span class="comment">//禁用按钮</span></span><br><span class="line">checkbox.<span class="property">checked</span> = <span class="literal">false</span><span class="comment">//复选框</span></span><br></pre></td></tr></table></figure><h1 id="3-定时器-和-延时器"><a href="#3-定时器-和-延时器" class="headerlink" title="3.定时器 和 延时器"></a>3.定时器 和 延时器</h1><h3 id="3-1定时器"><a href="#3-1定时器" class="headerlink" title="3.1定时器"></a>3.1定时器</h3><p><strong>作用</strong>  每隔一段时间调用一次函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*语法</span></span><br><span class="line"><span class="comment">let 变量名 = setInterval(函数，间隔时间ms)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//开启定时器    </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">repeat</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(repeat, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除定时器  clearInterval(变量名)</span></span><br><span class="line"><span class="built_in">clearInterval</span>(timer)</span><br></pre></td></tr></table></figure><p><strong>函数每隔一段时间重复执行</strong></p><h3 id="3-2延时器"><a href="#3-2延时器" class="headerlink" title="3.2延时器"></a>3.2延时器</h3><p><strong>作用</strong>  让代码延迟执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*语法</span></span><br><span class="line"><span class="comment">let 变量名 = setTimeout(函数，间隔时间ms)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//开启定时器 </span></span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>( )</span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line"><span class="comment">//清除延时器  clearTimeout(变量名)</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timer)</span><br></pre></td></tr></table></figure><p><strong>函数只执行一次</strong></p><h1 id="4-事件"><a href="#4-事件" class="headerlink" title="4.事件"></a>4.事件</h1><h3 id="4-1事件监听"><a href="#4-1事件监听" class="headerlink" title="4.1事件监听"></a>4.1事件监听</h3><p>​让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，也称为 <strong>注册事件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*语法</span></span><br><span class="line"><span class="comment">元素.addEventListener(&#x27;事件&#x27;，要执行的函数)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>事件监听三要素</strong></p><p>​1.事件源：哪个元素被触发了</p><p>​2.事件：用什么方式触发，比如说click或者mouseenter mouseleave</p><p>​3.事件调用的函数：事件触发之后要做什么事情</p><h3 id="4-2事件类型"><a href="#4-2事件类型" class="headerlink" title="4.2事件类型"></a>4.2事件类型</h3><p>​<strong>鼠标事件：</strong></p><table><thead><tr><th>时间名</th><th>说明</th></tr></thead><tbody><tr><td>click</td><td>鼠标点击</td></tr><tr><td>mouseenter</td><td>鼠标经过</td></tr><tr><td>mouseleave</td><td>鼠标离开</td></tr></tbody></table><p><strong>焦点事件：</strong></p><table><thead><tr><th align="center">时间名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">focus</td><td align="center">获得焦点</td></tr><tr><td align="center">blur</td><td align="center">失去焦点</td></tr></tbody></table><p><strong>键盘事件：</strong></p><table><thead><tr><th align="center">时间名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">keydown</td><td align="center">键盘按下触发</td></tr><tr><td align="center">keyup</td><td align="center">键盘抬起触发</td></tr></tbody></table><p><strong>文本事件：</strong></p><table><thead><tr><th align="center">时间名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">input</td><td align="center">用户输入触发</td></tr></tbody></table><p><strong>resize</strong> :</p><p>窗口发生变化触发的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//检测屏幕宽度</span></span><br><span class="line">    <span class="keyword">let</span> w = <span class="variable language_">document</span>.<span class="property">ducumentElement</span>.<span class="property">clientWidth</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(w)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-3事件对象"><a href="#4-3事件对象" class="headerlink" title="4.3事件对象"></a>4.3事件对象</h3><h5 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h5><p>普通函数的声明与调用无顺序限制，先声明再调用。</p><p>高阶函数可以被简单理解为函数的高级应用，JavaScript 中函数可以被当成【值】来对待，基于这个特性实现函数的高 级应用。 </p><p>如果将函数 A 做为参数传递给函数 B 时，我们称函数 A 为回调函数 简单理解： 当一个函数当做参数来传递给另外一个函数的时候，这个函数就是回调函数。</p><h5 id="4-3-1介绍"><a href="#4-3-1介绍" class="headerlink" title="4.3.1介绍"></a>4.3.1介绍</h5><p>​事件对象也是个对象，这个对象里保存了触发事件时的相关信息</p><p>​在事件绑定的回调函数的第一个参数就是事件对象，一般命名为<strong>e</strong>或<strong>event</strong>或<strong>ev</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>.<span class="keyword">function</span>(<span class="params">e</span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><h5 id="4-3-2常用属性"><a href="#4-3-2常用属性" class="headerlink" title="4.3.2常用属性"></a>4.3.2常用属性</h5><table><thead><tr><th align="center">属性名</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">type</td><td align="center">获取当前的事件类型</td></tr><tr><td align="center">clientX&#x2F;clientY</td><td align="center">获取光标相对于浏览器可见窗口左上角的位置</td></tr><tr><td align="center">offsetX&#x2F;offsetY</td><td align="center">获取光标相对于当前DOM元素左上角的位置</td></tr><tr><td align="center">key</td><td align="center">用户按下的键盘键的值</td></tr><tr><td align="center">pageX&#x2F;pageY</td><td align="center">获取光标相对于文档左上角的位置</td></tr></tbody></table><h3 id="4-4事件流"><a href="#4-4事件流" class="headerlink" title="4.4事件流"></a>4.4事件流</h3><h5 id="4-4-1事件流指的是事件完整执行过程中的流动路径，有两个阶段，包括事件捕获和事件冒泡"><a href="#4-4-1事件流指的是事件完整执行过程中的流动路径，有两个阶段，包括事件捕获和事件冒泡" class="headerlink" title="4.4.1事件流指的是事件完整执行过程中的流动路径，有两个阶段，包括事件捕获和事件冒泡"></a>4.4.1事件流指的是事件完整执行过程中的流动路径，有两个阶段，包括<strong>事件捕获</strong>和<strong>事件冒泡</strong></h5><p><img src="/../pictures/%E4%BA%8B%E4%BB%B6%E6%B5%81.png" alt="事件流"></p><h5 id="4-4-2事件冒泡"><a href="#4-4-2事件冒泡" class="headerlink" title="4.4.2事件冒泡"></a>4.4.2事件冒泡</h5><p>​当一个元素触发事件后，会依次向上调用所有父级元素的同名事件+</p><h5 id="4-4-3事件捕获"><a href="#4-4-3事件捕获" class="headerlink" title="4.4.3事件捕获"></a>4.4.3事件捕获</h5><p>​从DOM的根元素开始去执行对应的事件 (从外到里) </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">DOM</span>.<span class="title function_">addEventListener</span>(事件类型，函数，是否使用捕获机制)</span><br></pre></td></tr></table></figure><p>addEventListener第三个参数传入true代表是捕获阶段触发，若传入false代表冒泡阶段触发，<strong>默认就是false</strong></p><h5 id="4-4-4阻止事件流"><a href="#4-4-4阻止事件流" class="headerlink" title="4.4.4阻止事件流"></a>4.4.4阻止事件流</h5><p>因为默认就有冒泡模式的存在，所以容易导致事件影响到父级元素，想把事件就限制在当前元素内，就需要阻止事件流动。在冒泡和捕获阶段都有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="title function_">stoppropagation</span>()</span><br></pre></td></tr></table></figure><h5 id="4-4-5阻止默认行为"><a href="#4-4-5阻止默认行为" class="headerlink" title="4.4.5阻止默认行为"></a>4.4.5阻止默认行为</h5><p>​阻止默认行为，比如链接点击不跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="title function_">preventDefult</span>()</span><br></pre></td></tr></table></figure><h3 id="4-5事件委托"><a href="#4-5事件委托" class="headerlink" title="4.5事件委托"></a>4.5事件委托</h3><p>​1.事件委托是利用事件冒泡，通过给父元素添加事件，让子元素实现对应的效果，这样就不用给子元素一个一个添加事件。<br>​2.利用   e.target获得触发事件的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-6滚动事件scroll"><a href="#4-6滚动事件scroll" class="headerlink" title="4.6滚动事件scroll"></a>4.6滚动事件scroll</h3><h5 id="4-6-1监听页面的滚动"><a href="#4-6-1监听页面的滚动" class="headerlink" title="4.6.1监听页面的滚动"></a>4.6.1监听页面的滚动</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>需要监听某个元素内部的滚动，给元素添加滚动事件即可。</p><h5 id="4-6-2scroll"><a href="#4-6-2scroll" class="headerlink" title="4.6.2scroll"></a>4.6.2scroll</h5><p><strong>获取宽高    scrollWidth  scrollHeight</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">scrollWidth</span>)   <span class="comment">//返回的是不带单位的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">scrollHeight</span>)  </span><br></pre></td></tr></table></figure><p>scroll返回的是<strong>元素内容</strong>的宽高（不含滚动条），返回值不带单位。</p><p><strong>获取位置    scrollLeft  scrollTop</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>)</span><br><span class="line">    <span class="comment">//document.documentElement HTML 文档返回对象为HTML元素</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​scroll获取元素内容往左往上滚出去看不到的距离<br>​    这两个属性是可以修改的</p><h5 id="4-6-3offset"><a href="#4-6-3offset" class="headerlink" title="4.6.3offset"></a>4.6.3offset</h5><p><strong>获取宽高    offsetWidth  offsetHeight</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">offsetWidth</span>)   <span class="comment">//返回的是不带单位的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">offsetHeight</span>)  </span><br></pre></td></tr></table></figure><p>​获取<strong>元素自身</strong>的宽高、包含盒子自身的宽高、padding、border</p><p><strong>获取位置    scrollLeft  scrollTop</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sk = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.sk&#x27;</span>)       </span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(sk.<span class="property">offsetTop</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​offsetLeft offsetTop获取元素<strong>距离自己定位父级元素</strong>的左、上距离</p><p>​只读属性不可被修改</p><h5 id="4-6-3client"><a href="#4-6-3client" class="headerlink" title="4.6.3client"></a>4.6.3client</h5><p><strong>获取宽高    clientWidth  clientHeight</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">clientWidth</span>)   <span class="comment">//返回的是不带单位的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(div.<span class="property">clientHeight</span>)  </span><br></pre></td></tr></table></figure><p>​获取<strong>元素可见部分</strong>的宽高，不包含边框滚动条，包含padding</p><p><strong>获取位置    clientLeft  clientTop</strong></p><p>​clientLeft clientTop获取左边框和上边框的宽度</p><p>​只读属性不可被修改</p><ol><li>offset家族  获取元素自身大小：包括自身设置的宽高、padding、border   获取元素距离定位父级的左和上距离 只读属性</li><li>client家族 获取元素可见区域的大小 获取元素左、上边框距离 只读属性</li><li>scroll家族  获取元素内容的总大小  获取元素向左向上滚出去看不见的距离 可读写属性</li></ol><h1 id="5-高阶函数"><a href="#5-高阶函数" class="headerlink" title="5.高阶函数"></a>5.高阶函数</h1><p><strong>高阶函数</strong>  javaScript 中函数可以被当成【值】来对待，基于这个特性实现函数的高级应用</p><h3 id="5-1函数表达式"><a href="#5-1函数表达式" class="headerlink" title="5.1函数表达式"></a>5.1函数表达式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数表达式必须先声明再调用</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="keyword">function</span>(<span class="params">x,y</span>)&#123;<span class="keyword">return</span> x+y&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">counter</span>(<span class="number">5</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="5-2回调函数"><a href="#5-2回调函数" class="headerlink" title="5.2回调函数"></a>5.2回调函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数表达式必须先声明再调用</span></span><br><span class="line"><span class="keyword">let</span> counter = <span class="keyword">function</span>(<span class="params">x,y</span>)&#123;<span class="keyword">return</span> x+y&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">counter</span>(<span class="number">5</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h1 id="6-节点"><a href="#6-节点" class="headerlink" title="6.节点"></a>6.节点</h1><h3 id="6-1节点说明"><a href="#6-1节点说明" class="headerlink" title="6.1节点说明"></a>6.1节点说明</h3><p>​<strong>DOM节点：</strong>DOM树里的每一个内容成为节点</p><p>​<strong>类型</strong>：</p><p>​1.元素节点：所有的标签      如body   div</p><p>​2.属性节点</p><p>​3.文本节点</p><p>​4.其他</p><h3 id="6-2查找节点"><a href="#6-2查找节点" class="headerlink" title="6.2查找节点"></a>6.2查找节点</h3><h5 id="6-2-1查找父元素节点"><a href="#6-2-1查找父元素节点" class="headerlink" title="6.2.1查找父元素节点"></a>6.2.1查找父元素节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法  ：子元素.parentNode</span></span><br><span class="line"><span class="keyword">let</span> son = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.son&#x27;</span>)</span><br><span class="line">son.<span class="property">parentNode</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br></pre></td></tr></table></figure><p>​返回最近一级的父元素节点，如果找不到返回为null</p><h5 id="6-2-2查找子元素节点"><a href="#6-2-2查找子元素节点" class="headerlink" title="6.2.2查找子元素节点"></a>6.2.2查找子元素节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法  ：父元素.children       仅获得元素节点**常用**</span></span><br><span class="line"><span class="comment">//       父元素.childNodes     获得所有子节点、包括文本节点（空格、换行）、注释节点等</span></span><br><span class="line">ul.<span class="property">children</span>[i].<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br></pre></td></tr></table></figure><p>​返回的是一个<strong>伪数组</strong></p><h5 id="6-2-3查找兄弟节点"><a href="#6-2-3查找兄弟节点" class="headerlink" title="6.2.3查找兄弟节点"></a>6.2.3查找兄弟节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法  ： 元素.nextElementSibling       下一个兄弟节点</span></span><br><span class="line"><span class="comment">//  元素.previousElementSibling   上一个兄弟节点</span></span><br></pre></td></tr></table></figure><h3 id="6-3增加、删除、克隆节点"><a href="#6-3增加、删除、克隆节点" class="headerlink" title="6.3增加、删除、克隆节点"></a>6.3增加、删除、克隆节点</h3><h5 id="6-3-1创建节点"><a href="#6-3-1创建节点" class="headerlink" title="6.3.1创建节点"></a>6.3.1创建节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法   document.creatElement(&#x27;标签名&#x27;)</span></span><br><span class="line"><span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">div.<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="6-3-2追加节点"><a href="#6-3-2追加节点" class="headerlink" title="6.3.2追加节点"></a>6.3.2追加节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法   父元素.appendChild(要插入的子元素)加到父元素的最后</span></span><br><span class="line"><span class="comment">//父元素.insertBefore(要插入的子元素，在哪个元素前)加到父元素的某个子元素前面</span></span><br><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ul.<span class="title function_">appendChild</span>(li)</span><br><span class="line">ul.<span class="title function_">insertBefore</span>(li, ul.<span class="property">children</span>[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h5 id="6-3-3克隆节点"><a href="#6-3-3克隆节点" class="headerlink" title="6.3.3克隆节点"></a>6.3.3克隆节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法元素.cloneNode(布尔值)</span></span><br><span class="line"><span class="comment">//若布尔值为false(默认值)，不克隆后代节点；true克隆后代节点</span></span><br><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line"><span class="comment">//一般先克隆节点，然后把复制的节点放到指定元素的内部</span></span><br><span class="line"><span class="keyword">let</span> newUl = ul.<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(newUl)</span><br></pre></td></tr></table></figure><h5 id="6-3-4删除节点"><a href="#6-3-4删除节点" class="headerlink" title="6.3.4删除节点"></a>6.3.4删除节点</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法父元素.removeChild(要删除的元素)</span></span><br><span class="line">ul.<span class="title function_">removeChild</span>(ul.<span class="property">children</span>[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>​在 JavaScript 原生DOM操作中，要删除元素必须通过父元素删除</p><p>​删除节点和隐藏节点（display:none） 有区别的： 隐藏节点还是存在的，但是删除，则从html中删除节点</p><h1 id="7-时间对象"><a href="#7-时间对象" class="headerlink" title="7.时间对象"></a>7.时间对象</h1><h3 id="1-时间对象方法"><a href="#1-时间对象方法" class="headerlink" title="1.时间对象方法"></a>1.时间对象方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得当前时间</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="comment">//获得指定时间</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;1949-10-01&#x27;</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获得年份</td><td>获取四位年份</td></tr><tr><td>getMonth()</td><td>获得月份</td><td>取值为 0 ~ 11</td></tr><tr><td>getDate()</td><td>获取月份中的每一天</td><td>不同月份取值也不相同</td></tr><tr><td>getDay()</td><td>获取星期</td><td>取值为 0 ~ 6</td></tr><tr><td>getHours()</td><td>获取小时</td><td>取值为 0 ~ 23</td></tr><tr><td>getMinutes()</td><td>获取分钟</td><td>取值为 0 ~ 59</td></tr><tr><td>getSeconds()</td><td>获取秒</td><td>取值为 0 ~ 59</td></tr></tbody></table><h3 id="2-时间戳"><a href="#2-时间戳" class="headerlink" title="2.时间戳"></a>2.时间戳</h3><p>​指的是1970年01月01日00时00分00秒起至现在的毫秒数，通常用<strong>两个</strong>时间戳计算<strong>时间差</strong></p><p>方法1：getTime()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getTime</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.首先实例化</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="comment">//2.获得时间戳</span></span><br><span class="line">date.<span class="title function_">getTime</span>()</span><br></pre></td></tr></table></figure><p>方法2：+new Date</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="keyword">new</span> <span class="title class_">Date</span>())  <span class="comment">//获得当前的时间戳</span></span><br><span class="line">consele.<span class="title function_">log</span>(+<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2022-1-1 12:00:00&#x27;</span>))  <span class="comment">//获得指定时间的时间戳</span></span><br></pre></td></tr></table></figure><p>方法3: Date().now()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>())  <span class="comment">//只能得到当前时间的时间戳</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 方法1和方法2可以返回指定时间的时间戳，方法三只能得到当前时间的时间戳</p><p>​方法1在使用getTime之前需要实例化</p><h1 id="8-BOM的基本操作"><a href="#8-BOM的基本操作" class="headerlink" title="8.BOM的基本操作"></a>8.BOM的基本操作</h1><h3 id="8-1BOM介绍"><a href="#8-1BOM介绍" class="headerlink" title="8.1BOM介绍"></a>8.1BOM介绍</h3><p>​BOM(Browser Object Model ) 是浏览器对象模型</p><p><img src="/../pictures/BOM.png" alt="BOM"></p><ul><li>window 是浏览器内置中的全局对象， Web APIs 的知识内容都是基于 window 对象实现的</li><li>window 对象下包含了 navigator、location、document、history、screen 5个属性，即所谓的 BOM （浏览器对象模型） </li><li>document 是实现 DOM 的基础，它其实是依附于 window 的属性。</li><li><strong>依附于 window 对象的所有属性和方法，使用时可以省略 window</strong></li></ul><h5 id="8-1-1location对象"><a href="#8-1-1location对象" class="headerlink" title="8.1.1location对象"></a>8.1.1location对象</h5><p>​location 的数据类型是对象，它拆分并保存了 URL 地址的各个组成部分</p><table><thead><tr><th align="center">属性和方法</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">href</td><td align="center">获取完整的 URL 地址，对其赋值时用于地址的跳转</td></tr><tr><td align="center">search</td><td align="center">获取地址中携带的参数，符号 ？后面部分</td></tr><tr><td align="center">hash</td><td align="center">获取地址中的哈希值，符号 # 后面部分</td></tr><tr><td align="center">reload()</td><td align="center">法用来刷新当前页面，传入参数 true 时表示强制刷新</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">href</span> = <span class="string">&#x27;www.baidu.com&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="8-1-2navigator对象"><a href="#8-1-2navigator对象" class="headerlink" title="8.1.2navigator对象"></a>8.1.2navigator对象</h5><p>​navigator的数据类型是对象，该对象下记录了浏览器自身的相关信息</p><p>可以通过userAgent属性来检测浏览器的版本或者平台</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> userAgent = navigator.<span class="property">userAgent</span></span><br><span class="line">    <span class="comment">//验证是否为android或者iphone</span></span><br><span class="line">    <span class="keyword">const</span> android = userAgent.<span class="title function_">match</span>(<span class="regexp">/(Android);?[\s\/]+([\d.]+)?/</span>)</span><br><span class="line"><span class="keyword">const</span> iphone = userAgent.<span class="title function_">match</span>(<span class="regexp">/(iPhone\sOS)\s([\d_]+)/</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h5 id="8-1-3history对象"><a href="#8-1-3history对象" class="headerlink" title="8.1.3history对象"></a>8.1.3history对象</h5><p>​history 的数据类型是对象，该对象与浏览器地址栏的操作相对应，如前进、后退、历史记录等</p><table><thead><tr><th align="center">方法或属性</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">back()</td><td align="center">后退一页</td></tr><tr><td align="center">forward()</td><td align="center">前进一页</td></tr><tr><td align="center">go(参数）</td><td align="center">前进或后退，参数为1前进一个页面，-1后退一个页面</td></tr></tbody></table><h3 id="8-2本地存储"><a href="#8-2本地存储" class="headerlink" title="8.2本地存储"></a>8.2本地存储</h3><h5 id="8-2-1介绍"><a href="#8-2-1介绍" class="headerlink" title="8.2.1介绍"></a>8.2.1介绍</h5><p>​网页经常需要在本地存储大量的数据，HTML5提出了规范的相关解决方案</p><ul><li>数据存储在用户的浏览器中</li><li>设置和读取方便，刷新页面不丢失数据</li><li>容量大，sessionStorage和localStorage大约5M左右</li></ul><h5 id="8-2-2-localStorage"><a href="#8-2-2-localStorage" class="headerlink" title="8.2.2 localStorage"></a>8.2.2 localStorage</h5><ul><li>生命周期永久生效，除非手动删除，否则关闭页面也会存在</li><li>可以多页面共享（同一浏览器可以共享）</li><li>以键值对的方法存储使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key,value)</span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key)</span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>   本地存储只能存储字符串，无法存储复杂数据类型，需要将复杂数据类型转换成JSON字符串再存储</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将复杂数据转换成JSON字符串   存储时使用</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">stringify</span>(复杂数据类型)</span><br><span class="line"><span class="comment">//将JSON字符串转换成对象      取出时使用</span></span><br><span class="line"><span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>字符串)</span><br></pre></td></tr></table></figure><h5 id="8-2-3-sessionStorage"><a href="#8-2-3-sessionStorage" class="headerlink" title="8.2.3 sessionStorage"></a>8.2.3 sessionStorage</h5><ul><li>生命周期生命周期为关闭浏览器窗口</li><li>在同一个窗口(页面)下数据可以共享</li><li>以键值对的方法存储使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用方法同上</span></span><br></pre></td></tr></table></figure><h1 id="9-自定义属性"><a href="#9-自定义属性" class="headerlink" title="9.自定义属性"></a>9.自定义属性</h1><h3 id="9-1介绍"><a href="#9-1介绍" class="headerlink" title="9.1介绍"></a>9.1介绍</h3><p>​<strong>固有属性:</strong>  标签天生自带的属性 比如class id title等, 可以直接使用点语法操作</p><p>​<strong>自定义属性:</strong>  由程序员自己添加的属性,在DOM对象中找不到, 无法使用点语法操作,必须使用专门的API </p><pre><code>在html5中推出来了专门的data-自定义属性 在 标签上一律以data-开头,在DOM对象上一律以dataset对象方式获取</code></pre><h1 id="10-正则表达式"><a href="#10-正则表达式" class="headerlink" title="10.正则表达式"></a>10.正则表达式</h1><h3 id="10-1介绍"><a href="#10-1介绍" class="headerlink" title="10.1介绍"></a>10.1介绍</h3><p>​正则表达式（Regular Expression）是用于匹配字符串中字符组合的模式。正则表达式也是对象</p><p>​作用：表单验证（匹配），过滤敏感词（替换），提取字符串中想要的部分（提取）</p><h3 id="10-2语法"><a href="#10-2语法" class="headerlink" title="10.2语法"></a>10.2语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义正则表达式   let 变量名 = /表达式/</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/huahua/</span></span><br><span class="line"><span class="comment">//2.用test()方法检测正则表达式与指定字符串是否匹配，返回布尔值  </span></span><br><span class="line"><span class="keyword">let</span> str = <span class="regexp">/huahuahahahakahfa/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(str))</span><br><span class="line"><span class="comment">//3.用exec()方法再之歌指定字符串中执行一个搜索匹配，返回一个数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(str))</span><br></pre></td></tr></table></figure><h3 id="10-3元字符"><a href="#10-3元字符" class="headerlink" title="10.3元字符"></a>10.3元字符</h3><h5 id="10-3-1边界符"><a href="#10-3-1边界符" class="headerlink" title="10.3.1边界符"></a>10.3.1边界符</h5><p>​表示位置，开头和结尾，必须用什么开头，用什么结尾</p><table><thead><tr><th>边界符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>表示匹配行首的文本</td></tr><tr><td>$</td><td>表示匹配行尾的文本</td></tr><tr><td>^$</td><td>两个一起用表示精准匹配</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^哈/</span>.<span class="title function_">test</span>(<span class="string">&#x27;哈&#x27;</span>))  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^哈/</span>.<span class="title function_">test</span>(<span class="string">&#x27;我哈哈大笑&#x27;</span>))  <span class="comment">// false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^哈$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;哈哈&#x27;</span>))  <span class="comment">// false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^哈$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;哈&#x27;</span>))  <span class="comment">// true </span></span><br></pre></td></tr></table></figure><h5 id="10-3-2量词"><a href="#10-3-2量词" class="headerlink" title="10.3.2量词"></a>10.3.2量词</h5><p>​用来设定 <strong>某个模式出现的次数</strong></p><table><thead><tr><th>量词</th><th align="center">说明</th></tr></thead><tbody><tr><td>*</td><td align="center">0-多</td></tr><tr><td>+</td><td align="center">1-多</td></tr><tr><td>?</td><td align="center">o或1</td></tr><tr><td>{n}</td><td align="center">n</td></tr><tr><td>{n,}</td><td align="center">n-多</td></tr><tr><td>{n,m}</td><td align="center">n-m</td></tr></tbody></table><h5 id="10-3-3字符类"><a href="#10-3-3字符类" class="headerlink" title="10.3.3字符类"></a>10.3.3字符类</h5><table><thead><tr><th align="center">字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">[abcdefg]</td><td align="center">后面的字符串只要包含[]内的任一字符都返回true</td></tr><tr><td align="center">[a-zA-Z0-9]</td><td align="center">表示a到z，A到Z，0到9都可</td></tr><tr><td align="center">[^a-z]</td><td align="center">括号里面加上^表示取反，除了小写字母以外的字符</td></tr><tr><td align="center">\d</td><td align="center">[0-9]</td></tr><tr><td align="center">\D</td><td align="center">[^0-9]</td></tr><tr><td align="center">\w</td><td align="center">[A-Za-z0-9]</td></tr><tr><td align="center">\W</td><td align="center">[^A-Za-z0-9]</td></tr><tr><td align="center">\s</td><td align="center">[\t\r\n\v\f]</td></tr><tr><td align="center">\S</td><td align="center">[^\t\r\n\v\f]</td></tr></tbody></table><h3 id="10-4修饰符"><a href="#10-4修饰符" class="headerlink" title="10.4修饰符"></a>10.4修饰符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*语法</span></span><br><span class="line"><span class="comment">/表达式/修饰符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//i  表示不区分大小写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/a/i</span>.<span class="title function_">test</span>(<span class="string">&#x27;a&#x27;</span>))<span class="comment">//true</span></span><br><span class="line"><span class="comment">//g  表示匹配所有满足正则表达式的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//replace替换</span></span><br><span class="line"><span class="comment">//  字符串.replace(/正则表达式/，&#x27;替换的文本&#x27;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Web-APIs-DOM、BOM&quot;&gt;&lt;a href=&quot;#Web-APIs-DOM、BOM&quot; class=&quot;headerlink&quot; title=&quot;Web APIs     DOM、BOM&quot;&gt;&lt;/a&gt;Web APIs     DOM、BOM&lt;/h1&gt;&lt;h1 id=&quot;1</summary>
      
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 基础</title>
    <link href="http://example.com/2021/12/15/JavaScript/"/>
    <id>http://example.com/2021/12/15/JavaScript/</id>
    <published>2021-12-15T04:21:03.000Z</published>
    <updated>2022-09-12T07:21:58.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h1><h2 id="1-引用js脚本"><a href="#1-引用js脚本" class="headerlink" title="1.引用js脚本"></a>1.引用js脚本</h2><p>​JavaScript 程序不能独立运行，它需要被嵌入 HTML 中，然后浏览器才能执行 JavaScript 代码。通过 <code>script</code> 标签将 JavaScript 代码引入到 HTML 中，有两种方式：</p><h3 id="1-1内部"><a href="#1-1内部" class="headerlink" title="1.1内部"></a>1.1内部</h3><p>​直接写在html文件里，用<script>标签包裹</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">alert</span>(<span class="string">&#x27;你好， js&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将 <script> 放在HTML文件的底部附近的原因是是浏览器会按照代码在文件中的顺序加载 HTML</p><h3 id="2-2外部"><a href="#2-2外部" class="headerlink" title="2.2外部"></a>2.2外部</h3><p>​写在.js文件里，然后引入<strong>src=" "</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./my.js&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"><span class="comment">/*块注释*/</span></span><br></pre></td></tr></table></figure><p> 快捷键：ctrl + /</p><p>快捷键：shift + alt + A</p><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3.变量"></a>3.变量</h2><p>内存：计算机中存储数据的地方，相当于一个空间</p><p>变量：是程序在内存中申请的一块用来存放数据的小空间</p><h3 id="3-1声明和赋值"><a href="#3-1声明和赋值" class="headerlink" title="3.1声明和赋值"></a>3.1声明和赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hero = <span class="string">&#x27;aoteman&#x27;</span></span><br><span class="line"><span class="keyword">var</span> hero = <span class="string">&#x27;ironman&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-2var和let的区别"><a href="#3-2var和let的区别" class="headerlink" title="3.2var和let的区别"></a>3.2var和let的区别</h3><p>由于<strong>变量提升</strong>（自动将声明放在使用前），var可以在初始化后声明，var 声明过的变量可以重复声明，但这种设计令人困惑。</p><p>let不会变量提升，必须先声明再使用。</p><h3 id="3-3变量的命名规则"><a href="#3-3变量的命名规则" class="headerlink" title="3.3变量的命名规则"></a>3.3变量的命名规则</h3><ol><li>只能是字母、数字、下划线、$，且不能能数字开头</li><li>字母区分大小写</li><li>JavaScript 内部已占用于单词（关键字或保留字）不允许使用</li><li>尽量保证变量具有一定的语义，见字知义</li><li>遵守小驼峰命名法，例：userName</li></ol><h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型"></a>4. 数据类型</h2><h3 id="4-1基本数据类型"><a href="#4-1基本数据类型" class="headerlink" title="4.1基本数据类型"></a><strong>4.1基本数据类型</strong></h3><p>基本数据类型是指存放在栈中的简单数据段，数据大小确定，内存空间大小可以分配，它们是直接按值存放的，所以可以直接按值访问</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Number</td><td>数字</td></tr><tr><td>String</td><td>字符串，可以拼接，单双引号可以互相嵌套</td></tr><tr><td>Boolean</td><td>布尔（False True）</td></tr><tr><td>null</td><td>赋值了但是内容为空</td></tr><tr><td>undefined</td><td>未赋值</td></tr><tr><td>Symbol</td><td></td></tr></tbody></table><h5 id="4-1-1检测数据类型-typeof"><a href="#4-1-1检测数据类型-typeof" class="headerlink" title="4.1.1检测数据类型   typeof"></a>4.1.1检测数据类型   typeof</h5><ul><li>typeof：返回一个<strong>小写字母</strong>的类型<strong>字符串</strong></li><li>instanceof：判断类型。左边必须是引用类型，右边必须是函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h5 id="4-1-2Number"><a href="#4-1-2Number" class="headerlink" title="4.1.2Number"></a>4.1.2Number</h5><p><code>Number</code>类型包含整数和浮点数（浮点数数值必须包含一个小数点，且小数点后面至少有一个数字）两种值</p><p>IEEE745标准规定使用64位双精度</p><p>计算小数加和结果：<code>parseFloat( (0.1+0.2).toFixed(5) )</code></p><p><strong>数值类型的转换</strong>：<br><code>Number()</code>：可以用于任何的数据类型<br><code>parseInt(string, number)</code>：提取整数数值，第二个参数为进制<br><code>paseFloat(string)</code>：提取浮点数值</p><p><strong><code>NaN</code>：</strong>非数字类型，属于Number类型。非法运算符返回NaN，NaN不等于自身。isNaN判断是否为数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ab&#x27;</span>/<span class="number">10</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>);<span class="comment">// false;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="literal">false</span>);<span class="comment">// false;</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="title class_">Nan</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>**<code>Infinity</code>**：无穷大，属于Number类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Infinity</span> + -<span class="title class_">Infinity</span> = <span class="title class_">NaN</span></span><br><span class="line"><span class="title class_">Infinity</span> + <span class="title class_">Infinity</span> = <span class="title class_">Infinity</span></span><br><span class="line">-<span class="title class_">Infinity</span> + -<span class="title class_">Infinity</span> = -<span class="title class_">Infinity</span></span><br></pre></td></tr></table></figure><p><strong>数字的属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE"><code>Number.MAX_VALUE</code></a></td><td>可表示的最大值</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE"><code>Number.MIN_VALUE</code></a></td><td>可表示的最小值</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN"><code>Number.NaN</code></a></td><td>特指”非数字“</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY"><code>Number.NEGATIVE_INFINITY</code></a></td><td>特指“负无穷”;在溢出时返回</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY"><code>Number.POSITIVE_INFINITY</code></a></td><td>特指“正无穷”;在溢出时返回</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON"><code>Number.EPSILON</code></a></td><td>表示1和比最接近1且大于1的最小<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number"><code>Number</code></a>之间的差别</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER"><code>Number.MIN_SAFE_INTEGER</code></a></td><td>JavaScript最小安全整数.</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER"><code>Number.MAX_SAFE_INTEGER</code></a></td><td>JavaScript最大安全整数.</td></tr></tbody></table><p><strong>数字的方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat"><code>Number.parseFloat()</code></a></td><td>把字符串参数解析成浮点数，     和全局方法 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat"><code>parseFloat()</code></a> 作用一致.</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt"><code>Number.parseInt()</code></a></td><td>把字符串解析成特定基数对应的整型数字，和全局方法 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt"><code>parseInt()</code></a> 作用一致.</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite"><code>Number.isFinite()</code></a></td><td>判断传递的值是否为有限数字。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger"><code>Number.isInteger()</code></a></td><td>判断传递的值是否为整数。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN"><code>Number.isNaN()</code></a></td><td>判断传递的值是否为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN"><code>NaN</code></a>. More robust version of the original global <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN"><code>isNaN()</code></a>.</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger"><code>Number.isSafeInteger()</code></a></td><td>判断传递的值是否为安全整数。</td></tr></tbody></table><h5 id="4-1-3String"><a href="#4-1-3String" class="headerlink" title="4.1.3String"></a>4.1.3String</h5><p>字符串的值是不可变的，所以很多的字符串的<code>api</code>不会改变原字符串值<br>其他转字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> my = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// let my = [&#x27;Chris&#x27;, &#x27;Bob&#x27;, &#x27;Jim&#x27;];</span></span><br><span class="line"><span class="keyword">let</span> myString = my.<span class="title function_">toString</span>();</span><br></pre></td></tr></table></figure><p>字符串转其他：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> my = <span class="string">&quot;true&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(my));</span><br><span class="line"><span class="keyword">let</span> my = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(my));</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>长度</td></tr><tr><td>indexOf('zilla')</td><td>子串起始位置</td></tr><tr><td>slice(0,3)</td><td>提取子串</td></tr><tr><td>toLowerCase / toUpperCase()</td><td>转换大小写</td></tr><tr><td>replace('moz','van')</td><td>替换</td></tr></tbody></table><p><strong>数字前添0：</strong>需要添n个0，在前面添n-1个，再截取后n个</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">&#x27;0000&#x27;</span>+num).<span class="title function_">slice</span>(-<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>字符串与数字相加：</strong>从左到右；加号左右如果有字符串，结果为字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;10&#x27;</span> + <span class="number">10.10</span> = <span class="string">&#x27;1010.1&#x27;</span></span><br><span class="line"><span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="string">&#x27;4&#x27;</span> = <span class="string">&#x27;64&#x27;</span></span><br><span class="line"><span class="string">&#x27;1&#x27;</span> + &#123;<span class="attr">a</span>:<span class="number">1</span>&#125; = <span class="string">&#x27;1[object Object]&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>模板字符串：</strong>可以使用语法糖让功能的实现代码更具可读性:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> five = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> ten = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Fifteen is <span class="subst">$&#123;five + ten&#125;</span> and not <span class="subst">$&#123;<span class="number">2</span> * five + ten&#125;</span>.`</span>);</span><br><span class="line"><span class="comment">// &quot;Fifteen is 15 and not 20.&quot;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-4Boolean"><a href="#4-1-4Boolean" class="headerlink" title="4.1.4Boolean"></a>4.1.4Boolean</h5><p>其他转boolean：</p><p>【null，undefined，NaN，0，空字符串，只包含空格的字符串】转换为<strong>false</strong></p><p>【非空对象，非0，非空字符串】转换为<strong>true</strong></p><p>boolean转其他：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Number(true): 1 　　　　|| 　　Number(false) : 0</span><br><span class="line">String(true):&#x27;true&#x27; 　 || 　　String(false):&#x27;false&#x27;</span><br></pre></td></tr></table></figure><h5 id="4-1-5Null"><a href="#4-1-5Null" class="headerlink" title="4.1.5Null"></a>4.1.5Null</h5><p>空对象指针类型</p><p>Null转其他：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Booleam</span>(<span class="literal">null</span>)  <span class="literal">false</span></span><br><span class="line"><span class="title class_">Number</span>(num)    <span class="number">0</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">null</span>)  <span class="string">&#x27;null&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="4-1-6Undefined"><a href="#4-1-6Undefined" class="headerlink" title="4.1.6Undefined"></a>4.1.6Undefined</h5><p>申明了变量但是没有初始化，默认为<code>undefined</code></p><p>Undefined转其他：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Boolean(undefined):　 false</span><br><span class="line">Number(undefined):　  NaN</span><br><span class="line">String(undefined):　　&#x27;undefined&#x27;</span><br></pre></td></tr></table></figure><h5 id="4-1-7Symbol"><a href="#4-1-7Symbol" class="headerlink" title="4.1.7Symbol"></a>4.1.7Symbol</h5><p><code>ES6</code>新增的一个基本数据类型，代表独一无二的值，最大的用法是用来定义对象的唯一属性名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> id1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> id2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id1 == id2);  <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>Symbol属性类型不支持 for...in 和 Object.keys()</p><p>但是也能有方法去访问：Object.getOwnPropertySymbols，方法会返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj)) <span class="comment">// [ Symbol(c) ]</span></span><br></pre></td></tr></table></figure><h3 id="4-2引用数据类型"><a href="#4-2引用数据类型" class="headerlink" title="4.2引用数据类型"></a>4.2<strong>引用数据类型</strong></h3><p>引用数据类型也叫对象数据类型，包括<code>function</code>,<code>object</code>,<code>array</code>,<code>date</code>,<code>RegExp</code>等可以可以使用new创建的数据，又叫对象类型，他们是存放在<strong>堆内存</strong>中的数据</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Array</td><td>['Chris', 'Bob', 'Jim']</td></tr><tr><td>Object</td><td>{ name : 'Spot', breed : 'Dalmatian' }</td></tr><tr><td>Function</td><td>函数</td></tr></tbody></table><h2 id="5-运算符"><a href="#5-运算符" class="headerlink" title="5.运算符"></a>5.运算符</h2><h3 id="5-1算数运算符"><a href="#5-1算数运算符" class="headerlink" title="5.1算数运算符"></a>5.1算数运算符</h3><p>加+     减-   乘*    除/   取余%</p><h3 id="5-2赋值运算符"><a href="#5-2赋值运算符" class="headerlink" title="5.2赋值运算符"></a>5.2赋值运算符</h3><p>=</p><p>+=  </p><p>-=  </p><p>*=  </p><p>/=  </p><p>%=</p><h3 id="5-3一元运算符"><a href="#5-3一元运算符" class="headerlink" title="5.3一元运算符"></a>5.3一元运算符</h3><p>自增：++</p><p>自减： --</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后置自增：先使用再自增</span></span><br><span class="line">num++</span><br><span class="line">num--</span><br><span class="line"><span class="comment">//前置自增：先自增再使用</span></span><br><span class="line">++num</span><br><span class="line">--num</span><br></pre></td></tr></table></figure><h3 id="5-4比较运算符"><a href="#5-4比较运算符" class="headerlink" title="5.4比较运算符"></a>5.4比较运算符</h3><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>></td><td>左边是否大于右边</td></tr><tr><td><</td><td>左边是否小于右边</td></tr><tr><td>>=</td><td>左边是否大于或等于右边</td></tr><tr><td><=</td><td>左边是否小于或等于右边</td></tr><tr><td>==</td><td>左右两边是否相等</td></tr><tr><td>===</td><td>左右两边是否类型和值都相等</td></tr><tr><td>!==</td><td>左右两边是否不全等</td></tr></tbody></table><p>比较结果为boolean类型，即只会得到true或false</p><h3 id="5-5逻辑运算符"><a href="#5-5逻辑运算符" class="headerlink" title="5.5逻辑运算符"></a>5.5逻辑运算符</h3><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>&&</td><td>与</td></tr><tr><td>||</td><td>或</td></tr><tr><td>!</td><td>非（取反）</td></tr></tbody></table><h2 id="6-语句"><a href="#6-语句" class="headerlink" title="6.语句"></a>6.语句</h2><h3 id="6-1分支语句"><a href="#6-1分支语句" class="headerlink" title="6.1分支语句"></a>6.1分支语句</h3><h5 id="6-1-1if语句"><a href="#6-1-1if语句" class="headerlink" title="6.1.1if语句"></a>6.1.1if语句</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    内容</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    内容</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-1-2三元表达式"><a href="#6-1-2三元表达式" class="headerlink" title="6.1.2三元表达式"></a>6.1.2三元表达式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件 ? 满足条件执行的代码 ： 不满足执行的代码</span><br></pre></td></tr></table></figure><h5 id="6-1-3switch语句"><a href="#6-1-3switch语句" class="headerlink" title="6.1.3switch语句"></a>6.1.3switch语句</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="number">3</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;没有数据&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到跟小括号里数据<strong>全等</strong>的case值，并执行里面对应的代码,若没有全等 === 的则执行default里的代码</p><p>般需要配合break关键字使用 没有break会造成case穿透</p><h3 id="6-2循环语句"><a href="#6-2循环语句" class="headerlink" title="6.2循环语句"></a>6.2循环语句</h3><h5 id="6-2-1while语句"><a href="#6-2-1while语句" class="headerlink" title="6.2.1while语句"></a>6.2.1while语句</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">    重复执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>continue：结束本次循环，继续下次循环 </p><p>break：跳出所在的循环</p><h5 id="6-2-2for循环"><a href="#6-2-2for循环" class="headerlink" title="6.2.2for循环"></a>6.2.2for循环</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明记录循环次数的变量; 循环条件; 变化值)&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个循环里再套一个循环，一般用在for循环里</p><h2 id="7-数组Array"><a href="#7-数组Array" class="headerlink" title="7.数组Array"></a>7.数组Array</h2><p><strong>声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;data1&#x27;</span>,<span class="string">&#x27;data2&#x27;</span>,<span class="string">&#x27;data3&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>取值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><strong>长度</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="property">length</span></span><br></pre></td></tr></table></figure><p><strong>增删改查</strong></p><p><img src="https://s1.vika.cn/space/2022/09/12/093fc8a12eae4683a7577a99ca6417fd"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增</span></span><br><span class="line">arr.<span class="title function_">push</span>(元素<span class="number">1</span>,元素<span class="number">2</span>)<span class="comment">//将一个或多个元素添加到数组的*末尾*，*并返回该数组的新长度*</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(元素<span class="number">1</span>,元素<span class="number">2</span>)<span class="comment">//将一个或多个元素添加到数组的*开头*，*并返回该数组的新长度*</span></span><br><span class="line"><span class="comment">//删</span></span><br><span class="line">arr.<span class="title function_">shift</span>()<span class="comment">//从数组中删除*第一个*元素，并*返回该元素的值*</span></span><br><span class="line">arr.<span class="title function_">pop</span>()<span class="comment">//从数组中删除*最后一个*元素，并*返回该元素的值*</span></span><br><span class="line">arr.<span class="title function_">splice</span>(起始位置,删除个数)<span class="comment">//从数组中删除*指定*元素</span></span><br><span class="line"><span class="comment">//改</span></span><br><span class="line">arr[i] = 新值</span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">arr[i]</span><br></pre></td></tr></table></figure><h2 id="8-对象Object"><a href="#8-对象Object" class="headerlink" title="8.对象Object"></a>8.对象Object</h2><p>可以理解为是<strong>无序的数据的集合</strong></p><p><strong>声明</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 对象名 = &#123;</span><br><span class="line">    属性名:属性值;</span><br><span class="line">    方法名:函数</span><br><span class="line">&#125;</span><br><span class="line">多个属性之间使用英文 , 分隔</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>访问属性   调用方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明人对象</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27; &#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18000</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">jiguang</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 访问属性    对象.属性名 or  对象[&#x27;属性名&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">uname</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="string">&#x27; &#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用方法    对象.方法名()</span></span><br><span class="line">person.<span class="title function_">jiguang</span>()</span><br></pre></td></tr></table></figure><p><strong>增删改查</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增</span></span><br><span class="line">对象.新属性名 = 新值</span><br><span class="line">对象.新方法名 = 新函数</span><br><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="keyword">delete</span> 对象名.属性名</span><br><span class="line"><span class="comment">//改  重新赋值即可</span></span><br><span class="line">对象名.属性名 = 新值</span><br><span class="line">对象名.方法名 = 新函数</span><br><span class="line"><span class="comment">//查</span></span><br><span class="line">对象名.属性名    对象名[<span class="string">&#x27;属性名&#x27;</span>]    对象名.方法名()</span><br></pre></td></tr></table></figure><p><strong>遍历对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k)  <span class="comment">// 打印属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k])  <span class="comment">// 打印属性值 </span></span><br></pre></td></tr></table></figure><p><strong>Math</strong></p><table><thead><tr><th>code</th><th>描述</th></tr></thead><tbody><tr><td>Math.random()</td><td>生成0-1之间的随机数</td></tr><tr><td>Math.ceil()</td><td>向上取整</td></tr><tr><td>Math.floor()</td><td>向下取整</td></tr><tr><td>Math.max()</td><td>取最大值</td></tr><tr><td>Math.min()</td><td>取最小值</td></tr><tr><td>Math.pow()</td><td>幂运算</td></tr><tr><td>Math.abs()</td><td>绝对值</td></tr><tr><td>Math.round</td><td>就近取整</td></tr></tbody></table><p><strong>生成n-m的随机数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min</span><br></pre></td></tr></table></figure><h2 id="9-函数function"><a href="#9-函数function" class="headerlink" title="9.函数function"></a>9.函数function</h2><p>可以理解为是无序的数据的集合</p><h3 id="9-1基本使用"><a href="#9-1基本使用" class="headerlink" title="9.1基本使用"></a>9.1基本使用</h3><p><strong>语法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>,形参<span class="number">2</span>)&#123;</span><br><span class="line">  函数体</span><br><span class="line">  <span class="keyword">return</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">函数名(实参<span class="number">1</span>,实参<span class="number">2</span>)</span><br><span class="line"><span class="comment">//关于return</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><pre><code>1.使用return关键字能将内部的执行结果交给函数外部使用2.函数内部只能出现 1 次 return，并且 return 后面代码不会再被执行,return会立即结束当前函数3.函数可以没有 return，这种情况函数默认返回值为 undefined</code></pre><p><strong>匿名函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以将匿名函数赋值给一个变量，然后通过变量名调用</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="title function_">functin</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line">其中函数的形参和实参使用跟具名函数一致。</span><br></pre></td></tr></table></figure><p><strong>立即执行函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)&#125;)()</span><br></pre></td></tr></table></figure><h3 id="9-2参数"><a href="#9-2参数" class="headerlink" title="9.2参数"></a>9.2参数</h3><h5 id="9-2-1参数默认值"><a href="#9-2-1参数默认值" class="headerlink" title="9.2.1参数默认值"></a>9.2.1参数默认值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置参数默认值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name=<span class="string">&quot;aoteman&quot;</span>, age=<span class="number">20000</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`&lt;p&gt;大家好，我叫<span class="subst">$&#123;name&#125;</span>，我今年<span class="subst">$&#123;age&#125;</span>岁了。&lt;/p&gt;`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">sayHi</span>();</span><br><span class="line"><span class="title function_">sayHi</span>(<span class="string">&#x27;杰克&#x27;</span>);</span><br><span class="line"><span class="title function_">sayHi</span>(<span class="string">&#x27;赛文&#x27;</span>, <span class="number">30000</span>);</span><br></pre></td></tr></table></figure><p>参数的默认值就是在声明参数时为形参赋值</p><p>当没有实参传入时，参数的默认值被当作实参传入</p><p>当有实参传入时，覆盖默认值</p><h5 id="9-2-2arguments"><a href="#9-2-2arguments" class="headerlink" title="9.2.2arguments"></a>9.2.2arguments</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求和函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      s += <span class="variable language_">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用求和函数</span></span><br><span class="line">  <span class="title function_">sum</span>(<span class="number">5</span>, <span class="number">10</span>); <span class="comment">// 两个参数</span></span><br><span class="line">  <span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>); <span class="comment">// 三个参数</span></span><br></pre></td></tr></table></figure><p>当不确定有多少参数传入时，使用<code>arguments</code> </p><p><code>arguments</code> 是一个伪数组(可以遍历，但是不能使用数组的方法),动态获取函数的实参</p><h5 id="9-2-3剩余参数"><a href="#9-2-3剩余参数" class="headerlink" title="9.2.3剩余参数"></a>9.2.3剩余参数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">config</span>(<span class="params">a,b,...other</span>) &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"><span class="title function_">config</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="comment">//此时a = 1   b = 2  other = [3,4,5,6]</span></span><br></pre></td></tr></table></figure><p><code>...</code> 是语法符号，置于最末函数形参之前，用于获取多余的实参</p><h3 id="9-3箭头函数"><a href="#9-3箭头函数" class="headerlink" title="9.3箭头函数"></a>9.3箭头函数</h3><p>箭头函数是一种声明函数的简洁语法，差异性体现在语法格式上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> re = <span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re);</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li>箭头函数没有函数提升，属于<strong>表达式函数</strong></li><li>函数体只有<strong>一行代码</strong>时，可以省略 { }，并自动作为返回值返回</li><li>只有一个参数值，可以省略 ( )</li><li>箭头函数没有arguments，但可以使用<strong>剩余参数</strong></li><li>箭头函数不存在this</li></ol><h2 id="10-作用域"><a href="#10-作用域" class="headerlink" title="10.作用域"></a>10.作用域</h2><p>作用域（scope）规定了变量能够被访问的“范围”，离开了这个“范围”变量便不能被访问，作用域分为全局作用域和局部作用域。</p><h3 id="10-1全局作用域"><a href="#10-1全局作用域" class="headerlink" title="10.1全局作用域"></a>10.1全局作用域</h3><p><code>&lt;script&gt;</code> 标签和 <code>.js</code> 文件的【最外层】就是全局作用域，全局作用域中声明的变量，任何其它作用域都可以被访问。</p><p><strong>注意</strong></p><ol><li>函数中未使用任何关键字声明的变量为全局变量</li><li>尽可能少的声明全局变量，防止全局变量被污染</li></ol><h3 id="10-2函数作用域"><a href="#10-2函数作用域" class="headerlink" title="10.2函数作用域"></a>10.2函数作用域</h3><p>在函数内部声明的变量只能在函数内部被访问，外部无法直接访问。</p><p><strong>注意</strong></p><ol><li>函数内部声明的变量，在函数外部无法被访问</li><li>函数的参数也是函数内部的局部变量</li><li>不同函数内部声明的变量无法互相访问</li><li>函数执行完毕后，函数内部的变量实际被清空了</li></ol><h3 id="10-3块级作用域"><a href="#10-3块级作用域" class="headerlink" title="10.3块级作用域"></a>10.3块级作用域</h3><p>在 JavaScript 中使用 <code>&#123;&#125;</code> 包裹的代码称为代码块，代码块内部声明的变量外部将【有可能】无法被访问。</p><p><strong>注意</strong></p><ol><li><code>let</code> 声明的变量会产生块作用域，<code>var</code> 不会产生块作用域</li><li><code>const</code> 声明的常量也会产生块作用域</li><li>不同代码块之间的变量无法互相访问</li></ol><h3 id="10-4作用域链"><a href="#10-4作用域链" class="headerlink" title="10.4作用域链"></a>10.4作用域链</h3><p>​作用域链本质上是底层的变量查找机制，在函数被执行时，会优先查找当前函数作用域中查找变量，如果当前作用域查找不到则会依次逐级查找父级作用域直到全局作用域。</p><h3 id="10-5变量-函数提升"><a href="#10-5变量-函数提升" class="headerlink" title="10.5变量/函数提升"></a>10.5变量/函数提升</h3><p><strong>变量提升</strong></p><p>​允许再声明变量前，即被访问。可以使用let定义变量，避免变量提升</p><p>​<strong>预解析</strong>   在代码执行前先预解析，把<strong>带有声明</strong>的变量提前解析到<strong>当前作用域</strong>的最前面，<strong>只声明不赋值</strong></p><p> <strong>函数提升</strong></p><p>​<strong>预解析</strong>   会把<strong>具有名字</strong>的函数提前解析到<strong>当前作用域</strong>的最前面，<strong>只定义不调用</strong>。函数表达式，立即执行函数，匿名函数不预解析</p><h3 id="10-6let-var-const"><a href="#10-6let-var-const" class="headerlink" title="10.6let var const"></a>10.6let var const</h3><p>变量提升指的是在变量声明之前即被访问。使用let可以避免变量提升。</p><table><thead><tr><th>关键字</th><th align="center">块级作用域</th><th align="center">变量提升</th><th align="center">初始值</th><th align="center">更改值</th><th align="center">通过window调用</th></tr></thead><tbody><tr><td>let</td><td align="center">√</td><td align="center">×√</td><td align="center">-</td><td align="center">允许</td><td align="center">不允许</td></tr><tr><td>const</td><td align="center">√</td><td align="center">×√</td><td align="center">Yes</td><td align="center">No</td><td align="center">不允许</td></tr><tr><td>var</td><td align="center">×</td><td align="center">√</td><td align="center">-</td><td align="center">不允许</td><td align="center">允许</td></tr></tbody></table><h2 id="11-闭包"><a href="#11-闭包" class="headerlink" title="11.闭包"></a>11.闭包</h2><p>闭包是一种比较特殊和函数，使用闭包能够访问函数作用域中的变量。从代码形式上看闭包是一个做为返回值的函数，如下代码所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> i = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数内部分函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(++i);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将函数做为返回值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> bar;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// fn 即为闭包函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> fn = <span class="title function_">foo</span>();</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">fn</span>(); <span class="comment">// 1</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>闭包：一个作用域有权访问另外一个作用域的局部变量，</p><p>好处：可以把一个变量使用范围延伸</p><p>1.闭包可以创建外部可访问的作用域，可以把一个变量的使用范围延伸，避免全局变量污染</p><p>2.闭包的本质仍是函数，从代码的形式上来看是函数返回一个子函数，子函数访问父函数的局部变量</p><p>3.但是过度使用闭包会造成内存泄漏的现象</p><p>回调函数也能访问函数内部的局部变量。</p><h2 id="12-解构赋值"><a href="#12-解构赋值" class="headerlink" title="12.解构赋值"></a>12.解构赋值</h2><p><strong>解构赋值</strong>语法是一种 Javascript 表达式。通过<strong>解构赋值,</strong> 可以将属性/值从对象/数组中取出,赋值给其他变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, rest;</span><br><span class="line">[a, b] = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">[a, b, ...rest] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// [30, 40, 50]</span></span><br><span class="line"></span><br><span class="line">(&#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">a1</span>:b, <span class="attr">a2</span>:c &#125; = &#123; <span class="attr">a1</span>:<span class="number">1</span>, <span class="attr">a2</span>:<span class="number">2</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stage 4（已完成）提案中的特性</span></span><br><span class="line">(&#123;a, b, ...rest&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// &#123;c: 30, d: 40&#125;</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>数组</p><ol start="3"><li>变量的数量大于单元值数量时，多余的变量将被赋值为  <code>undefined</code></li><li>变量的数量小于单元值数量时，可以通过 <code>...</code> 获取剩余单元值，但只能置于最末位</li><li>允许初始化变量的默认值，且只有单元值为 <code>undefined</code> 时默认值才会生效</li></ol><p>对象</p><p>   1.对象属性的值将被赋值给与属性名相同的变量</p><p>   2.对象中找不到与变量名一致的属性时变量值为 <code>undefined</code></p><p>   3.允许初始化变量的默认值，属性不存在或单元值为 <code>undefined</code> 时默认值才会生效</p><h2 id="13-面向对象"><a href="#13-面向对象" class="headerlink" title="13.面向对象"></a>13.面向对象</h2><h3 id="13-1构造函数"><a href="#13-1构造函数" class="headerlink" title="13.1构造函数"></a>13.1构造函数</h3><p>构造函数是专门用于创建对象的函数，如果一个函数使用 <code>new</code> 关键字调用，那么这个函数就是构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义构造函数</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">   </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 调用函数</span></span><br><span class="line"> <span class="keyword">new</span> foo;</span><br></pre></td></tr></table></figure><ol><li>使用 new 关键字调用函数的行为被称为  <strong>实例化</strong></li><li>实例化构造函数时没有参数时可以省略 （）</li><li>构造函数的返回值即为新创建的对象</li><li>构造函数内部的 <code>return</code> 返回的值无效</li><li><strong>建议构造函数名称的首字母大写</strong></li></ol><h3 id="13-2实例成员"><a href="#13-2实例成员" class="headerlink" title="13.2实例成员"></a>13.2实例成员</h3><p><strong>实例成员只能由实例对象访问</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 构造函数内部的 this 就是实例对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例对象中动态添加属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;小明&#x27;</span>;</span><br><span class="line">    <span class="comment">// 实例对象动态添加方法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实例化，p1是实例对象</span></span><br><span class="line">  <span class="comment">// p1 实际就是 构造函数内部的 this</span></span><br><span class="line">  <span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>); <span class="comment">// 访问实例属性</span></span><br><span class="line">  p1.<span class="title function_">sayHi</span>(); <span class="comment">// 调用实例方法</span></span><br><span class="line"></span><br><span class="line">  p1 <span class="keyword">instanceof</span> <span class="title class_">Person</span><span class="comment">//判断对象p1是否是构造函数Person的实例对象</span></span><br><span class="line">  p1.<span class="property">constructor</span> <span class="comment">// 直接返回p1的构造函数</span></span><br></pre></td></tr></table></figure><ol><li>构造函数内部 <code>this</code> 实际上就是实例对象，为其动态添加的属性和方法即为实例成员</li><li>为构造函数传入参数，动态创建结构相同但值不同的对象</li><li>实例对象的 <code>constructor</code>  属性指向了构造函数</li><li><code>instanceof</code> 用于检测实例对象对应的构造函数</li><li>构造函数创建的实例对象彼此独立互不影响。</li></ol><h3 id="13-3静态成员"><a href="#13-3静态成员" class="headerlink" title="13.3静态成员"></a>13.3静态成员</h3><p><strong>静态成员只能由构造函数访问</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 省略实例成员</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 静态属性</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="property">eyes</span> = <span class="number">2</span>;</span><br><span class="line">  <span class="title class_">Person</span>.<span class="property">arms</span> = <span class="number">2</span>;</span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="title class_">Person</span>.<span class="property">walk</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// this 指向 Person</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">eyes</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li>静态成员指的是添加到构造函数本身的属性和方法</li><li>一般公共特征的属性或方法静态成员设置为静态成员</li><li>静态成员方法中的 <code>this</code> 指向构造函数本身</li></ol><h3 id="13-4引用类型"><a href="#13-4引用类型" class="headerlink" title="13.4引用类型"></a>13.4引用类型</h3><h5 id="13-4-1Object"><a href="#13-4-1Object" class="headerlink" title="13.4.1Object"></a>13.4.1Object</h5><table><thead><tr><th>code</th><th align="center">解释</th></tr></thead><tbody><tr><td>Object.keys(obj)</td><td align="center">获取obj对象的所有键，以数组的形式返回</td></tr><tr><td>Object.values(obj)</td><td align="center">获取obj对象的所有值，以数组的形式返回</td></tr></tbody></table><h5 id="13-4-2Array"><a href="#13-4-2Array" class="headerlink" title="13.4.2Array"></a>13.4.2Array</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有arr都相当于是Array构造的</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="title class_">Array</span></span><br><span class="line"><span class="comment">//1.concat数组拼接  </span></span><br><span class="line"><span class="keyword">let</span> newarr = arr.<span class="title function_">concat</span>(arr1,arr2)</span><br><span class="line"><span class="comment">//2.sort数组排序    从小到大</span></span><br><span class="line"><span class="keyword">let</span> newarr = arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;<span class="keyword">return</span> a-b&#125;)</span><br><span class="line"><span class="comment">//3.join连接数组的每个元素成为字符串</span></span><br><span class="line"><span class="keyword">let</span> str = arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line"><span class="comment">//4.reverse翻转数组顺序</span></span><br><span class="line"><span class="keyword">let</span> newarr = arr.<span class="title function_">reverse</span>()</span><br><span class="line"><span class="comment">//5.from伪数组转真数组   伪数组中必须有length属性</span></span><br><span class="line"><span class="keyword">let</span> newarr = <span class="title class_">Array</span>.<span class="title function_">from</span>(伪数组)</span><br><span class="line"><span class="comment">//6.indexOf查找某个元素在数组中首次出现的索引值</span></span><br><span class="line"><span class="keyword">let</span> num = arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">//7.lastIndexOf查找某个元素在数组中最后出现的索引值</span></span><br><span class="line"><span class="keyword">let</span> num = arr.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.forEach遍历数组    第一个元素表示数组中的每一项，第二个表示每一项的下标，第三个表示数组本身</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;&#125;)</span><br><span class="line"><span class="comment">//9.find用于查找首次出现的满足条件的值</span></span><br><span class="line"><span class="keyword">let</span> re = arr.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//10.findIndex用于查找首次出现的满足条件的值，返回找到的下标</span></span><br><span class="line"><span class="keyword">let</span> re = arr.<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//11.some用于查找，如果有一个满足，返回true</span></span><br><span class="line">arr.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//12.every用于查找，全部满足，返回true</span></span><br><span class="line">arr.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//13.filter筛选数组，把满足条件的元素放入新数组返回</span></span><br><span class="line"><span class="keyword">let</span> newarr = arr.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">5</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//14.map遍历数组，让每个元素都执行一遍回调函数，把所有结果放入新数组返回</span></span><br><span class="line"><span class="keyword">let</span> newarr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item,index,o</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> item * item</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="13-5包装类型"><a href="#13-5包装类型" class="headerlink" title="13.5包装类型"></a>13.5包装类型</h3><p>在 JavaScript 中的字符串、数值、布尔具有对象的使用特征，之所以具有对象特征的原因是字符串、数值、布尔类型数据是 JavaScript 底层使用 Object 构造函数“包装”来的，被称为包装类型。</p><h5 id="13-4-1String"><a href="#13-4-1String" class="headerlink" title="13.4.1String"></a>13.4.1String</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. length 获取字符串长度</span></span><br><span class="line">str.<span class="property">length</span></span><br><span class="line"><span class="comment">//2. trim 去除两端空白符</span></span><br><span class="line"><span class="keyword">let</span> newstr = str.<span class="title function_">trim</span>()</span><br><span class="line"><span class="comment">//3.split 分割字符串，成数组</span></span><br><span class="line"><span class="keyword">let</span> newstr = str.<span class="title function_">splic</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment">//4. toLowerCase toUpperCase 字母转换大小写</span></span><br><span class="line"><span class="keyword">let</span> newstr = str.<span class="title function_">toLowerCase</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment">//5. indexOf lastIndexOf查找某个元素首次出现的索引值</span></span><br><span class="line"><span class="keyword">let</span> num = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="comment">//6. slice 字符串截取  从start索引值截到end索引值 左闭右开</span></span><br><span class="line"><span class="keyword">let</span> newstr = str.<span class="title function_">slice</span>(start,end)</span><br><span class="line"><span class="comment">//7. substring 字符串截取  会自动把小值放前面，大值放后面</span></span><br><span class="line"><span class="keyword">let</span> newstr = str.<span class="title function_">substring</span>(start,end)</span><br><span class="line"><span class="comment">//8. substr 字符串截取 从start索引位置开始截取length个</span></span><br><span class="line"><span class="keyword">let</span> newstr = str.<span class="title function_">substr</span>(start,length)</span><br></pre></td></tr></table></figure><h5 id="13-4-2Number"><a href="#13-4-2Number" class="headerlink" title="13.4.2Number"></a>13.4.2Number</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. toFixed  保留几位有效数字</span></span><br><span class="line">price = prince.<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">parseInt</span>()</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">parseFloat</span>()</span><br></pre></td></tr></table></figure><h3 id="13-6封装"><a href="#13-6封装" class="headerlink" title="13.6封装"></a>13.6封装</h3><p>​封装的本质是将具有关联的代码组合在一起，其优势是能够保证代码复用且易于维护，函数是最典型也是最基础的代码封装形式，面向对象思想中的封装仍以函数为基础，但提供了更高级的封装形式。</p><h5 id="13-6-1构造函数"><a href="#13-6-1构造函数" class="headerlink" title="13.6.1构造函数"></a>13.6.1构造函数</h5><p>​构造函数相当于一个"模子"，能够像字面量那样创建出对象来，所不同的是借助构造函数创建出来的实例对象之间是<strong>彼此不影响</strong>的。</p><h5 id="13-6-2原型对象"><a href="#13-6-2原型对象" class="headerlink" title="13.6.2原型对象"></a>13.6.2原型对象</h5><p>​实际上每一个构造函数都有一个名为 <code>prototype</code> 的属性，译成中文是原型的意思，<code>prototype</code> 的是对象类据类型，称为构造函数的原型对象，每个原型对象都具有 <code>constructor</code> 属性代表了该原型对象对应的构造函数。</p><p>​每次new会产生一块内存空间保存相同的函数，会造成内存浪费，所以可以把相同的方法保存到原型对象中去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 每个函数都有 prototype 属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure><p><strong>当访问对象的属性或方法时，先在当前实例对象是查找，然后再去原型对象查找，并且原型对象被所有实例共享。</strong></p><h5 id="13-6-3原型链"><a href="#13-6-3原型链" class="headerlink" title="13.6.3原型链"></a>13.6.3原型链</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数   放公共属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原型对象   放公共方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="comment">//实例对象</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;aoteman&#x27;</span>,<span class="number">30000</span>)</span><br><span class="line"><span class="comment">//特殊属性额外加</span></span><br><span class="line">obj.<span class="property">skin</span> = <span class="string">&#x27;yellow&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="13-7继承"><a href="#13-7继承" class="headerlink" title="13.7继承"></a>13.7继承</h3><p>继承是面向对象编程的另一个特征，通过继承进一步提升代码封装的程度，JavaScript 中大多是借助原型对象实现继承的特性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步:创建公共构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">People</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="number">1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二步：创建需要继承的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">money</span> = <span class="string">&#x27;a lot&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第三步：公共构造函数的实例对象赋值给继承函数的原型对象</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">People</span>()</span><br><span class="line"><span class="comment">//第四步：指回构造函数本身</span></span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Star</span></span><br></pre></td></tr></table></figure><h2 id="14-this指向"><a href="#14-this指向" class="headerlink" title="14. this指向"></a>14. this指向</h2><h3 id="14-1this指向"><a href="#14-1this指向" class="headerlink" title="14.1this指向"></a>14.1this指向</h3><table><thead><tr><th></th><th align="center">指向</th></tr></thead><tbody><tr><td>普通函数</td><td align="center">window</td></tr><tr><td>方法</td><td align="center">调用者对象</td></tr><tr><td>定时器</td><td align="center">调用者</td></tr><tr><td>立即执行函数</td><td align="center">window,调用者</td></tr><tr><td>构造函数</td><td align="center">实例化对象</td></tr><tr><td>事件处理函数</td><td align="center">事件源</td></tr><tr><td>箭头函数</td><td align="center">没有this，this指向上级作用域的this</td></tr></tbody></table><p>14.2改变this指向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.call     会立即执行</span></span><br><span class="line">函数名.<span class="title function_">call</span>(<span class="variable language_">this</span>指向,参数,参数<span class="number">2</span>)</span><br><span class="line"><span class="comment">//2.apply    会立即执行</span></span><br><span class="line">函数名.<span class="title function_">apply</span>(<span class="variable language_">this</span>指向,[参数<span class="number">1</span>,参数<span class="number">2</span>])</span><br><span class="line"><span class="comment">//3.bind     不会立即执行，而是产生新函数</span></span><br><span class="line">函数名.<span class="title function_">bind</span>(<span class="variable language_">this</span>指向,参数<span class="number">1</span>,参数<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>总结：</p><p><strong>call</strong></p><ol><li><code>call</code> 方法能够在调用函数的同时指定 <code>this</code> 的值</li><li>使用 <code>call</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li><li><code>call</code> 方法的其余参数会依次自动传入函数做为函数的参数</li></ol><p><strong>apply</strong></p><ol><li>apply<code>方法能够在调用函数的同时指定</code>this` 的值</li><li>使用 <code>apply</code> 方法调用函数时，第1个参数为 <code>this</code> 指定的值</li><li><code>apply</code> 方法第2个参数为数组，数组的单元值依次自动传入函数做为函数的参数</li></ol><p><strong>bind</strong></p><p>​<code>bind</code> 方法并<strong>不会调用函数</strong>，而是创建一个指定了 <code>this</code> 值的新函数</p><h2 id="15-类Class"><a href="#15-类Class" class="headerlink" title="15.类Class"></a>15.类Class</h2><h3 id="15-1封装"><a href="#15-1封装" class="headerlink" title="15.1封装"></a>15.1封装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><h3 id="15-2添加成员"><a href="#15-2添加成员" class="headerlink" title="15.2添加成员"></a>15.2添加成员</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//静态成员</span></span><br><span class="line">    <span class="keyword">static</span> language = <span class="string">&#x27;Chinese&#x27;</span></span><br><span class="line"><span class="keyword">static</span> kungfu = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//访问静态属性和静态方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">language</span>)</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">kungfu</span>()</span><br></pre></td></tr></table></figure><ul><li><code>static</code> 关键字用于声明静态属性和方法</li><li>静态属性和方法直接通过类名进行访问</li><li>静态成员只能由构造函数访问</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">//实例成员</span></span><br><span class="line">    name = <span class="string">&#x27;aoteman&#x27;</span></span><br><span class="line"><span class="title function_">jiguang</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"><span class="comment">//访问实例属性和实例方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>)</span><br><span class="line">p.<span class="title function_">jiguang</span>()</span><br></pre></td></tr></table></figure><ul><li>实例成员只能实例调用</li></ul><h3 id="15-3继承"><a href="#15-3继承" class="headerlink" title="15.3继承"></a>15.3继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>&#123;</span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="comment">//需要用constructor传入参数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    houses = <span class="number">2</span></span><br><span class="line"><span class="title function_">skill</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明子类Son继承父类Father</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span>&#123;</span><br><span class="line">    <span class="comment">//子类的构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age,score</span>)&#123;</span><br><span class="line">        <span class="comment">//如果子类有自己的constructor，必须调用super才能调用父类</span></span><br><span class="line">        <span class="variable language_">super</span>(name,age)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">score</span> = score</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">skill</span>(<span class="params"></span>)&#123;<span class="variable language_">super</span>.<span class="title function_">skill</span>()&#125;<span class="comment">//如果依旧想调用父类的方法，也用super</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&#x27;jack&#x27;</span>,<span class="number">20</span>,<span class="number">100</span>)</span><br></pre></td></tr></table></figure><p><code>extends</code> 是 ECMAScript 6 中实现继承的简洁语法</p><p>子类构造函数中的 <code>super</code> 函数的作用是可以将子类实例化时获得的参数传入父类的构造函数之中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">first, last, age, gender, interests</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = &#123;</span><br><span class="line">      first,</span><br><span class="line">      last</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interests</span> = interests;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi! I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name.first&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">farewell</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name.first&#125;</span> has left the building. Bye for now!`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">statciFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是静态方法，this拿不到实例对象&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// get方法</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">subject</span>() &#123;   <span class="comment">// person.subject</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_subject</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// set方法</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">subject</span>(<span class="params">newSubject</span>) &#123; <span class="comment">// person.subject = &quot;math&quot;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_subject</span> = newSubject;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="comment">// Teacher.__proto__ = Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">first, last, age, gender, interests, subject, grade</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(first, last, age, gender, interests);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// subject and grade are specific to Teacher</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subject</span> = subject;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">first, last, age, gender, interests</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = &#123;</span><br><span class="line">      first,</span><br><span class="line">      last</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interests</span> = interests;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">greeting</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">farewell</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params">first, last, age, gender, interests, subject, grade</span>) &#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, first, last, age, gender, interests); <span class="comment">// 调用父原型构造函数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subject</span> = subject;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">grade</span> = grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Teacher</span>.<span class="property">__proto__</span> = <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br></pre></td></tr></table></figure><h2 id="16-深浅拷贝"><a href="#16-深浅拷贝" class="headerlink" title="16.深浅拷贝"></a>16.深浅拷贝</h2><h3 id="16-1浅拷贝"><a href="#16-1浅拷贝" class="headerlink" title="16.1浅拷贝"></a>16.1浅拷贝</h3><p>只拷贝最外层的拷贝方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">uname : <span class="string">&#x27;张三丰&#x27;</span>,</span><br><span class="line">age : <span class="number">22</span>,</span><br><span class="line">sex : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">color : [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>],</span><br><span class="line">message : &#123;</span><br><span class="line">index : <span class="number">1</span>,</span><br><span class="line">score : <span class="number">99</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(newObj, obj)</span><br></pre></td></tr></table></figure><h3 id="16-2深拷贝"><a href="#16-2深拷贝" class="headerlink" title="16.2深拷贝"></a>16.2深拷贝</h3><p>拷贝所有内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">uname : <span class="string">&#x27;张三丰&#x27;</span>,</span><br><span class="line">age : <span class="number">22</span>,</span><br><span class="line">sex : <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">color : [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>],</span><br><span class="line">message : &#123;</span><br><span class="line">score : <span class="number">99</span>,</span><br><span class="line">index : <span class="number">6</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="comment">// 如果遇到obj[key]是复杂类型，再遍历操作</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">kaobei</span> (newObj, obj) &#123;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">let</span> key <span class="keyword">in</span> obj ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( obj[key] <span class="keyword">instanceof</span> <span class="title class_">Array</span> ) &#123;<span class="comment">// obj[key] 是数组</span></span><br><span class="line"><span class="comment">// 保证newObj[key]是数组</span></span><br><span class="line">newObj[key] = [];</span><br><span class="line"></span><br><span class="line"><span class="title function_">kaobei</span>(newObj[key], obj[key]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ( obj[key] <span class="keyword">instanceof</span> <span class="title class_">Object</span> ) &#123;<span class="comment">// obj[key] 是对象</span></span><br><span class="line"><span class="comment">// 保证newObj[key]是对象</span></span><br><span class="line">newObj[key] = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">kaobei</span>(newObj[key], obj[key])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">newObj[key] = obj[key];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">kaobei</span>(newObj, obj);</span><br></pre></td></tr></table></figure><h2 id="17-JS执行机制"><a href="#17-JS执行机制" class="headerlink" title="17.JS执行机制"></a>17.JS执行机制</h2><h3 id="17-1-JS介绍"><a href="#17-1-JS介绍" class="headerlink" title="17.1 JS介绍"></a>17.1 JS介绍</h3><p>​JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p><h3 id="17-2同步和异步"><a href="#17-2同步和异步" class="headerlink" title="17.2同步和异步"></a>17.2同步和异步</h3><p>同步和异步的本质区别是，各个流程的执行顺序不同</p><h5 id="17-2-1同步"><a href="#17-2-1同步" class="headerlink" title="17.2.1同步"></a>17.2.1同步</h5><p>​前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的</p><p>​同步任务都在主线程执行，形成一个<strong>执行栈</strong></p><h5 id="17-2-2异步"><a href="#17-2-2异步" class="headerlink" title="17.2.2异步"></a>17.2.2异步</h5><p>​在做一件事的时候可以去处理其他事情</p><p>​异步任务是通过回调函数实现的，一般包括：1.普通事件（click,resize）2.资源加载事件（load.error）3.定时器（setInterval,setTimeout）</p><p>​异步任务添加到任务队列中</p><h3 id="17-3执行顺序"><a href="#17-3执行顺序" class="headerlink" title="17.3执行顺序"></a>17.3执行顺序</h3><ol><li>先执行<strong>执行栈</strong>中的<strong>同步任务</strong>。</li><li>当有异步任务时，提交给对应的异步进程处理，完毕后推入任务队列</li><li>当主线程执行完毕，查询任务队列，取出一个任务，推入主线程处理。重复该动作。---事件循环</li></ol><h2 id="18-防抖和节流"><a href="#18-防抖和节流" class="headerlink" title="18. 防抖和节流"></a>18. 防抖和节流</h2><h3 id="18-1防抖"><a href="#18-1防抖" class="headerlink" title="18.1防抖"></a>18.1防抖</h3><p>​<strong>防抖策略</strong>(debounce)，当事件被触发之后，<strong>延迟n秒</strong>，再<strong>执行回调</strong>，如果在这n秒内事件<strong>又被触发</strong>，则<strong>重新计时</strong>。</p><p>​<strong>应用场景</strong>用户在输入框中连续输入一串字符时，可以通过防抖策略，只有输入完成之后，才执行查询请求，这样可以有效减少请求次数，节约请求资源。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;<span class="comment">//定义防抖动的函数</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;  <span class="comment">//防抖动的timer</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 箭头函数绑定闭包函数的this</span></span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">task</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;run task&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> debounceTask = <span class="title function_">debounce</span>(task, <span class="number">1000</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, debounceTask)</span><br></pre></td></tr></table></figure><h3 id="18-2-节流"><a href="#18-2-节流" class="headerlink" title="18.2 节流"></a>18.2 节流</h3><p>​<strong>节流策略</strong>（throttle），可以减少一段时间内事件的触发频率。<strong>触发过一次后要等一定时间才能触发下一次</strong>，关键是检测定时任务是否结束</p><p>​<strong>应用场景</strong></p><p>​鼠标连续不断地触发某事件（如点击），只在单位时间内只触发一次；</p><p>​懒加载时要监听计算滚动条的位置，但不必每次滑动都触发，可以降低计算的频率，而不必去浪费 CPU 资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定时器实现</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">        func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用时间戳</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> last = <span class="number">0</span> <span class="comment">// 上次触发时间</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="keyword">if</span> (now - last &gt; delay) &#123;</span><br><span class="line">      last = now</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>防抖：</strong>如果事件被频繁触发，防抖能保证只有最有一次触发生效！前面 N 多次的触发都会被忽略！<br><strong>节流：</strong>如果事件被频繁触发，节流能够减少事件触发的频率，因此，节流是有选择性地执行一部分事件！</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>严格模式对正常的 JavaScript语义做了一些更改。</p><ol><li>严格模式通过<strong>抛出错误</strong>来消除了一些原有<strong>静默错误</strong>。</li><li>严格模式修复了一些导致 JavaScript引擎难以执行优化的缺陷：有时候，相同的代码，严格模式可以比非严格模式下<strong>运行得更快</strong>。</li><li>严格模式<strong>禁用了</strong>在ECMAScript的未来版本中可能会定义的一些语法。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整个脚本都开启严格模式的语法</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> v = <span class="string">&quot;Hi!  I&#x27;m a strict mode script!&quot;</span>;</span><br></pre></td></tr></table></figure><p>合并均为严格模式的脚本或均为非严格模式的都没问题，只有在合并严格模式与非严格模式有可能有问题。建议按一个个函数去开启严格模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strict</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 函数级别严格模式语法</span></span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">nested</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;And so am I!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Hi!  I&#x27;m a strict mode function!  &quot;</span> + <span class="title function_">nested</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sayings = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">sayings.<span class="title function_">set</span>(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;woof&#x27;</span>);</span><br><span class="line">sayings.<span class="title function_">set</span>(<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;meow&#x27;</span>);</span><br><span class="line">sayings.<span class="title function_">set</span>(<span class="string">&#x27;elephant&#x27;</span>, <span class="string">&#x27;toot&#x27;</span>);</span><br><span class="line">sayings.<span class="property">size</span>; <span class="comment">// 3</span></span><br><span class="line">sayings.<span class="title function_">get</span>(<span class="string">&#x27;fox&#x27;</span>); <span class="comment">// undefined</span></span><br><span class="line">sayings.<span class="title function_">has</span>(<span class="string">&#x27;bird&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">sayings.<span class="title function_">delete</span>(<span class="string">&#x27;dog&#x27;</span>);</span><br><span class="line">sayings.<span class="title function_">has</span>(<span class="string">&#x27;dog&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> sayings) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27; : &#x27;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayings.<span class="title function_">clear</span>();</span><br><span class="line">sayings.<span class="property">size</span>; <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><strong>Object和Map的比较</strong></p><p>一般地，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object">objects</a>会被用于将字符串类型映射到数值。<code>Object</code>允许设置键值对、根据键获取值、删除键、检测某个键是否存在。而<code>Map</code>具有更多的优势。</p><ul><li><code>Object</code>的键均为<code>String</code>类型，在<code>Map</code>里键可以是任意类型。</li><li>必须手动计算<code>Object</code>的尺寸，但是可以很容易地获取使用<code>Map</code>的尺寸。</li><li><code>Map</code>的遍历遵循元素的插入顺序。</li><li><code>Object</code>有原型，所以映射中有一些缺省的键。（可以用 <code>map = Object.create(null) 回避</code>）。</li></ul><p>这三条提示可以帮你决定用<code>Map</code>还是<code>Object</code>：</p><ul><li>如果键在运行时才能知道，或者所有的键类型相同，所有的值类型相同，那就使用<code>Map</code>。</li><li>如果需要将原始值存储为键，则使用<code>Map</code>，因为<code>Object</code>将每个键视为字符串，不管它是一个数字值、布尔值还是任何其他原始值。</li><li>如果需要对个别元素进行操作，使用<code>Object</code>。</li></ul><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&quot;some text&quot;</span>);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line">mySet.<span class="title function_">has</span>(<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">mySet.<span class="title function_">delete</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">mySet.<span class="property">size</span>; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> mySet) <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// &quot;some text&quot;</span></span><br></pre></td></tr></table></figure><p><strong>数组和集合的转换</strong></p><p>可以使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from"><code>Array.from</code></a>或<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax">展开操作符</a>来完成集合到数组的转换。同样，<code>Set</code>的构造器接受数组作为参数，可以完成从<code>Array</code>到<code>Set</code>的转换。需要重申的是，<code>Set</code>对象中的值不重复，所以数组转换为集合时，所有重复值将会被删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(mySet);</span><br><span class="line">[...mySet2];</span><br><span class="line"></span><br><span class="line">mySet2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br></pre></td></tr></table></figure><p><strong>Array和Set的对比</strong></p><p>一般情况下，在JavaScript中使用数组来存储一组元素，而新的集合对象有这些优势：</p><ul><li>数组中用于判断元素是否存在的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"><code>indexOf</code></a> 函数效率低下。</li><li><code>Set</code>对象允许根据值删除元素，而数组中必须使用基于下标的 splice 方法。</li><li>数组的<code>indexOf</code>方法无法找到<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN"><code>NaN</code></a>值。</li><li><code>Set</code>对象存储不重复的值，所以不需要手动处理包含重复值的情况。</li></ul><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>js的模块文件后缀可以写成：<code>.mjs</code></p><p><strong>module.exports & exports</strong></p><p><strong>exports：</strong>返回的是模块函数<br><strong>module.exports：</strong>返回的是模块对象本身，返回的是一个类</p><ol><li><p><strong><code>export / export default / import</code> :</strong> 只有es6 支持的导出引入</p><p><strong>export 和 export default</strong></p><ul><li>export与export default均可用于导出常量、函数、文件、模块等</li><li>在一个文件或模块中，export、import可以有多个，export default仅有一个</li><li>通过export方式导出，在导入时要加{ }，export default则不需要</li><li>export能直接导出变量表达式，export default不行。</li></ul><p>import引入export导出的内容。</p></li><li><p><strong><code>module.exports / exports </code> :</strong> 只有 node 支持的导出</p><p>Node里面的模块系统遵循的是<strong>CommonJS规范</strong>。</p><blockquote><p>CommonJS定义的模块分为: 模块标识(module)、模块定义(exports) 、模块引用(require)。</p></blockquote><p>在一个node执行一个文件时，会给这个文件内生成一个 exports 和 module 对象，而 module 又有一个 exports 属性。他们都指向一块内存区域：<code>exports = module.exports = &#123;&#125;</code>，也就是两个指针。真正被 require 出去的内容还是 module.exports 指向的内容。所以尽量都用 module.exports 导出，然后用require导入。</p></li><li><p><strong><code>require</code>:</strong> node 和 es6 都支持的引入</p><p>配合 module.exports 使用</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主文件 app.js</span></span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&#x27;./count.j&#x27;</span><span class="comment">//导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="title function_">add</span>(<span class="number">3</span>,<span class="number">4</span>));<span class="comment">//取出对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count.<span class="property">pi</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块文件 count.js,与主文件在同一目录下</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> <span class="title function_">add</span>=(<span class="params">a,b</span>)=&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;the sum is &#x27;</span>+(a+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi=<span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="comment">// 很容易地使模块提供默认功能，并且还可以帮助JavaScript模块与现有的CommonJS和AMD模块系统进行互操作</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 重命名</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  function1 <span class="keyword">as</span> newFunctionName,</span><br><span class="line">  function2 <span class="keyword">as</span> anotherNewFunctionName</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 导出模块对象</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Module</span> <span class="keyword">from</span> <span class="string">&#x27;/modules/module.mjs&#x27;</span>;</span><br></pre></td></tr></table></figure><p>模块与类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">ctx, listId, length, x, y, color</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Square</span> &#125;;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Square</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./modules/square.mjs&#x27;</span>;</span><br><span class="line">      </span><br><span class="line"><span class="comment">// 或默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Square</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>动态加载模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">import</span>(<span class="string">&#x27;/modules/myModule.mjs&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Do something with the module.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>JavaScript 传统上是单线程的。即使有多个内核，也只能在单一线程上运行多个任务，此线程称为主线程（<strong>main thread</strong>）。</p><p>通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API">Web workers</a> 可以把一些任务交给一个名为worker的单独的线程，这样就可以同时运行多个JavaScript代码块。一般来说，用一个worker来运行一个耗时的任务，主线程就可以处理用户的交互（避免了阻塞）</p><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>有两个队列，分别存放<strong>宏任务</strong>和<strong>微任务</strong>，一次事件循环为：一个宏任务 + 清空微任务队列，直到宏任务清空为止</p><p>宏任务：包括整体代码script，setTimeout，setInterval等</p><p>微任务：Promise.then，process.nextTick，MutationObserver等</p><p><img src="/../pictures/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF.png" alt="prototype_4"></p><h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><p><strong>异步回调</strong></p><p>我们来谈谈订购披萨作为类比。为了使你的订单成功，你必须按顺序执行，不按顺序执行或上一步没完成就执行下一步是不会成功的：</p><ol><li>选择配料。如果你是优柔寡断，这可能需要一段时间，如果你无法下定决心或者决定换咖喱，可能会失败。</li><li>下订单。返回比萨饼可能需要一段时间，如果餐厅没有烹饪所需的配料，可能会失败。</li><li>然后你收集你的披萨吃。如果你忘记了自己的钱包，那么这可能会失败，所以无法支付比萨饼的费用！</li></ol><p>对于旧式<a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Introducing#callbacks">callbacks</a>，上述功能的伪代码表示可能如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">chooseToppings</span>(<span class="keyword">function</span>(<span class="params">toppings</span>) &#123;</span><br><span class="line">  <span class="title function_">placeOrder</span>(toppings, <span class="keyword">function</span>(<span class="params">order</span>) &#123;</span><br><span class="line">    <span class="title function_">collectOrder</span>(order, <span class="keyword">function</span>(<span class="params">pizza</span>) &#123;</span><br><span class="line">      <span class="title function_">eatPizza</span>(pizza);</span><br><span class="line">    &#125;, failureCallback);</span><br><span class="line">  &#125;, failureCallback);</span><br><span class="line">&#125;, failureCallback);</span><br></pre></td></tr></table></figure><p>异步回调的缺陷：</p><ul><li>嵌套回调可能很麻烦且难以阅读（即“回调地狱”）</li><li>每层嵌套都需要故障回调，而使用promises，您只需使用一个<code>.catch（）</code>代码块来处理整个链的错误。</li><li>异步回调不是很优雅。</li><li>Promise回调总是按照它们放在事件队列中的严格顺序调用;异步回调不是。</li><li>当传入到一个第三方库时，异步回调对函数如何执行失去完全控制。</li></ul><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>Promises是一个对象，代表操作的中间状态。虽然 Promise 并不保证操作在何时完成并返回结果，但是它保证当结果可用时（fullfilled），你的代码能正确处理结果，当结果不可用时，你的代码同样会被执行，来优雅的处理错误。</p><p><code>Promise</code> 对象有以下几种状态：</p><ul><li><em>pending：</em>初始的状态，即正在执行，不处于 fulfilled 或 rejected 状态。</li><li><em>fulfilled：</em>成功的完成了操作。</li><li><em>rejected：</em>失败，没有完成操作。</li><li><em>settled：</em>Promise 处于 fulfilled 或 rejected 二者中的任意一个状态, 不会是 pending。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">myPromise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">doSomething</span>(response);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">returnError</span>(e);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">runFinalCode</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promises使得上面的情况更容易编写，解析和运行。如果我们使用异步promises代表上面的伪代码，我们最终会得到这样的结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">chooseToppings</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">toppings</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">placeOrder</span>(toppings);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">order</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">collectOrder</span>(order);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">pizza</span>) &#123;</span><br><span class="line">  <span class="title function_">eatPizza</span>(pizza);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(failureCallback);</span><br></pre></td></tr></table></figure><p>只需要一个<code>.catch()</code>块来处理所有错误，它不会阻塞主线程，并保证每个操作在运行之前等待先前的操作完成。</p><p>使用箭头函数，你可以进一步简化代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">chooseToppings</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">toppings</span> =&gt;</span> <span class="title function_">placeOrder</span>(toppings))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">order</span> =&gt;</span> <span class="title function_">collectOrder</span>(order))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">pizza</span> =&gt;</span> <span class="title function_">eatPizza</span>(pizza))</span><br><span class="line">.<span class="title function_">catch</span>(failureCallback);</span><br></pre></td></tr></table></figure><p>最基本的，promise与事件监听器类似，但有一些差异：</p><ul><li>一个promise只能成功或失败一次。它不能成功或失败两次，并且一旦操作完成，它就无法从成功切换到失败，反之亦然。</li><li>如果promise成功或失败并且你稍后添加成功/失败回调，则将调用正确的回调，即使事件发生在较早的时间。</li></ul><p><strong>例：</strong>fetch用来下载一张图片，返回response对象；判断是否成功下载，成功下载返回blob对象；将blob对象解析放入image；catch失败的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;coffee.jpg&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP error! status: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">blob</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">myBlob</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> objectURL = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(myBlob);</span><br><span class="line">  <span class="keyword">let</span> image = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">  image.<span class="property">src</span> = objectURL;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(image);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;There has been a problem with your fetch operation: &#x27;</span> + e.<span class="property">message</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>响应多个Promises</strong></p><p>如果它们都实现，那么数组中的结果将作为参数传递给<code>.then()</code>块中的执行器函数。如果传递给<code>Promise.all()</code>的任何一个 promise 拒绝，整个块将拒绝。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([a, b, c]).<span class="title function_">then</span>(<span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>自定义Promise</strong></p><p>成功resolve，失败reject。reject会被 catch 到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeoutPromise</span>(<span class="params">message, interval</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (message === <span class="string">&#x27;&#x27;</span> || <span class="keyword">typeof</span> message !== <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;Message is empty or not a string&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (interval &lt; <span class="number">0</span> || <span class="keyword">typeof</span> interval !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;Interval is negative or not a number&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(message);</span><br><span class="line">            &#125;, interval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h2><p>ES6里新增的基于promises的语法糖，使异步代码更易于编写和阅读。</p><p><strong>异步函数 async</strong></p><p>将函数变为promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义异步函数的三种方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span> &#125;; </span><br><span class="line"><span class="keyword">let</span> hello = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">hello</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123; <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello</span>(); <span class="comment">// 返回promise</span></span><br><span class="line"><span class="title function_">hello</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value)) <span class="comment">// 使用promise</span></span><br></pre></td></tr></table></figure><p><strong>异步promise await</strong></p><p><strong>await 只在异步函数里面才起作用</strong>。它可以放在任何异步的，基于 promise 的函数之前。它会阻塞其后的代码，直到promise完成，然后返回结果值。在暂停的同时，其他正在等待执行的代码就有机会执行了。await 相当于 Promise 的 then。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> greeting = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hello</span>().<span class="title function_">then</span>(alert);</span><br></pre></td></tr></table></figure><p><strong>例：</strong>fetch用来下载一张图片，返回response对象；判断是否成功下载，成功下载返回blob对象；将blob对象解析放入image；catch失败的情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFetch</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> response.<span class="title function_">blob</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFetch</span>(<span class="string">&#x27;https://img2.baidu.com/it/u=73016861,4243186123&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=PNG?w=499&amp;h=253&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> objectURL = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    <span class="keyword">let</span> image = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    image.<span class="property">src</span> = objectURL;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(image);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;There has been a problem with your fetch operation: &#x27;</span> + e.<span class="property">message</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>Promise.all()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([coffee, tea, description]);</span><br></pre></td></tr></table></figure><p><strong>async/await的缺陷</strong></p><p><code>await</code> 关键字会阻塞其后的代码，直到promise完成，就像执行同步操作一样。它确实可以允许其他任务在此期间继续运行，但您自己的代码被阻塞。</p><p>这意味着您的代码可能会因为大量<code>await</code>的promises相继发生而变慢。每个<code>await</code>都会等待前一个完成，而你实际想要的是所有的这些promises同时开始处理（就像我们没有使用<code>async/await</code>时那样）。</p><p>有一种模式可以缓解这个问题——通过将 <code>Promise</code> 对象存储在变量中来同时开始它们，然后等待它们全部执行完毕。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改进前</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">timeTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">timeoutPromise</span>(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">timeoutPromise</span>(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">timeoutPromise</span>(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进后</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">timeTest</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> timeoutPromise1 = <span class="title function_">timeoutPromise</span>(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">const</span> timeoutPromise2 = <span class="title function_">timeoutPromise</span>(<span class="number">3000</span>);</span><br><span class="line">  <span class="keyword">const</span> timeoutPromise3 = <span class="title function_">timeoutPromise</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> timeoutPromise1;</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise2;</span><br><span class="line">  <span class="keyword">await</span> timeoutPromise3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Async/await 的类方法</strong></p><p>最后值得一提的是，我们可以在类/对象方法前面添加<code>async</code>，以使它们返回promises，并<code>await</code>它们内部的promises。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">first, last, age, gender, interests</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = &#123;</span><br><span class="line">      first,</span><br><span class="line">      last</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">interests</span> = interests;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">`Hi! I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name.first&#125;</span>`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">farewell</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name.first&#125;</span> has left the building. Bye for now!`</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> han = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Han&#x27;</span>, <span class="string">&#x27;Solo&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;male&#x27;</span>, [<span class="string">&#x27;Smuggling&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>第一个实例方法可以使用如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">han.<span class="title function_">greeting</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript-基础&quot;&gt;&lt;a href=&quot;#JavaScript-基础&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 基础&quot;&gt;&lt;/a&gt;JavaScript 基础&lt;/h1&gt;&lt;h2 id=&quot;1-引用js脚本&quot;&gt;&lt;a href=&quot;#1</summary>
      
    
    
    
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>CSS基础</title>
    <link href="http://example.com/2021/12/02/CSS%20%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/12/02/CSS%20%E5%9F%BA%E7%A1%80/</id>
    <published>2021-12-02T08:44:23.000Z</published>
    <updated>2022-09-12T07:20:58.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li><p>理解 CSS 的作用</p></li><li><p>了解CSS的语法规则</p></li><li><p>知道CSS的引入规则</p></li><li><p>知道类选择器和id选择器的区别</p></li><li><p>能够使用 字体和文本相关样式 修改元素外观样式</p></li></ul><h1 id="CSS—层叠样式表-Cascading-Style-Sheets"><a href="#CSS—层叠样式表-Cascading-Style-Sheets" class="headerlink" title="CSS—层叠样式表(Cascading Style Sheets)"></a>CSS—<strong>层叠样式表(Cascading Style Sheets)</strong></h1><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p> css写在style标签中，style标签一般写在head标签里面，title标签下面 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;    </span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="comment">/* 文字颜色变红色 */</span></span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">            <span class="comment">/* 字变大 px:像素 */</span></span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">            <span class="comment">/* 背景颜色 */</span></span><br><span class="line">            <span class="attribute">background-color</span>: green;</span><br><span class="line">            <span class="comment">/* width  height; */</span></span><br><span class="line">            <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><h2 id="1-引用css"><a href="#1-引用css" class="headerlink" title="1.引用css"></a>1.引用css</h2><p>1.外 联 式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.嵌入式</p><ul><li><p>在head中</p></li><li><p>单个页面</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;<span class="attribute">font</span>: bold <span class="number">20px</span>/<span class="number">2.0em</span> arial,verdana;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.内联式（写在标签的style中）</p><ul><li>单个元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:black; margin:16px&quot;</span>&gt;</span></span><br><span class="line">    Something</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br></pre></td></tr></table></figure><h2 id="2-选择器"><a href="#2-选择器" class="headerlink" title="2.选择器"></a>2.选择器</h2><h3 id="2-1基础选择器"><a href="#2-1基础选择器" class="headerlink" title="2.1基础选择器"></a>2.1基础选择器</h3><p> 2.1.1  标签选择器 </p><p> 结构：<strong>标签名</strong> { css属性名：属性值 }</p><p> 找到页面中所有这类标签 </p><ol><li><p>标签选择器选择的是一类标签，而不是单独某一个 </p></li><li><p>标签选择器无论嵌套关系有多深，都能找到对应的标签</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">p</span>&gt;pppppppp&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure><p>2.1.2   类选择器 </p><p> 结构：**.**类名 { css属性名：属性 }</p><p> 作用：通过类名，找到页面中所有带有这个类名的标签，设置样式 </p><ol><li><strong>所有标签上都有class属性</strong>，class属性的属性值称为类名（类似于名字） </li><li>类名可以由数字、字母、下划线、中划线组成，但不能以数字或者中划线开头 </li><li>一个标签可以同时有多个类名，类名之间以<strong>空格</strong>隔开 </li><li>类名可以重复，一个类选择器可以同时选中多个标签</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.red</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.size</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">66px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">p</span> class=&quot;red size&quot;&gt;<span class="number">222</span>&lt;/<span class="selector-tag">p</span>&gt;</span><br></pre></td></tr></table></figure><p>2.1.3   id选择器</p><p>结构：#id属性值 { css属性名：属性值；} </p><p>作用：通过id属性值，找到页面中带有这个id属性值的标签，设置样式 </p><ol><li>所有标签上都有id属性</li><li>id属性值类似于身份证号码，在一个页面中是唯一的，不可重复的！</li><li>一个标签上只能有一个id属性值</li><li>一个id选择器只能选中一个标签</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-id">#blue</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;blue&quot;&gt;这个<span class="selector-tag">div</span>文字是蓝色的&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><p>2.1.4 通配符选择器</p><p> 结构：* { css属性名：属性值； } </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2选择器进阶"><a href="#2-2选择器进阶" class="headerlink" title="2.2选择器进阶"></a>2.2选择器进阶</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 后代选择器*/</span></span><br><span class="line">选择器<span class="number">1</span> 选择器<span class="number">2</span>&#123;&#125;</span><br><span class="line"><span class="comment">/* 子代选择器*/</span></span><br><span class="line">选择器<span class="number">1</span>&gt;选择器<span class="number">2</span>&#123;&#125;</span><br><span class="line"><span class="comment">/* 并集选择器*/</span></span><br><span class="line">选择器<span class="number">1</span>,选择器<span class="number">2</span>&#123;&#125;</span><br><span class="line"><span class="comment">/* 交集选择器*/</span></span><br><span class="line">选择器<span class="number">1</span>.选择器<span class="number">2</span>&#123;&#125;</span><br><span class="line"><span class="comment">/* hover伪类选择器*/</span></span><br><span class="line">选择器<span class="selector-pseudo">:hover</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3结构伪类选择器"><a href="#2-3结构伪类选择器" class="headerlink" title="2.3结构伪类选择器"></a>2.3结构伪类选择器</h3><p>​根据元素在html中的结构关系查找元素，减少对于HTML中类的依赖，有利于保持代码整洁。</p><table><thead><tr><th align="center">选择器</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">E:first-child{}</td><td align="center">匹配父元素中第一个子元素，并且是E元素</td></tr><tr><td align="center">E:last-child{}</td><td align="center">匹配父元素中最后一个子元素，并且是E元素</td></tr><tr><td align="center">E:nth-child(n){}</td><td align="center">匹配父元素中第n个子元素，并且是E元素</td></tr><tr><td align="center">E:nth-last-child(n){}</td><td align="center">匹配父元素中倒数第n个子元素，并且是E元素</td></tr></tbody></table><p>注意：n为0 1 2 3 4 5 6 ……</p><p>通过n可以组成常见公式，如：</p><table><thead><tr><th align="center">功能</th><th align="center">公式</th></tr></thead><tbody><tr><td align="center">奇数</td><td align="center">2n+1 ; odd</td></tr><tr><td align="center">偶数</td><td align="center">2n ; even</td></tr><tr><td align="center">找到前5个</td><td align="center">-n+5</td></tr><tr><td align="center">第五个往后</td><td align="center">n+5</td></tr></tbody></table><h3 id="2-4链接伪类选择器"><a href="#2-4链接伪类选择器" class="headerlink" title="2.4链接伪类选择器"></a>2.4链接伪类选择器</h3><p>​场景：用于选中超链接的不同状态</p><table><thead><tr><th align="center">选择器语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">a:link{}</td><td align="center">选中链接a<strong>未访问过</strong>的状态</td></tr><tr><td align="center">a:visited{}</td><td align="center">选中链接a<strong>访问之后</strong>的状态</td></tr><tr><td align="center"><strong>a:hover{}</strong></td><td align="center">选中链接a<strong>鼠标悬停</strong>的状态</td></tr><tr><td align="center">a:active{}</td><td align="center">选中链接a<strong>鼠标按下</strong>的状态</td></tr></tbody></table><p>注意：若需要同时实现以上四种状态效果，需要按表所示的顺序书写</p><h3 id="2-5焦点伪类选择器"><a href="#2-5焦点伪类选择器" class="headerlink" title="2.5焦点伪类选择器"></a>2.5焦点伪类选择器</h3><p>​场景：用于选中元素获取焦点时状态，常用于表单控件</p><table><thead><tr><th align="center">选择器语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">input:focus{}</td><td align="center">获取焦点时状态</td></tr></tbody></table><p>注意：表单控件获取焦点时默认会显示外部轮廓线</p><h3 id="2-6属性选择器"><a href="#2-6属性选择器" class="headerlink" title="2.6属性选择器"></a>2.6属性选择器</h3><p>​场景：用于选中元素有该属性的元素</p><table><thead><tr><th align="center">选择器语法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">E[attr]</td><td align="center">选择有attr属性的元素</td></tr><tr><td align="center">E[attr&#x3D;’val’]</td><td align="center">选择有attr属性且值为val的元素</td></tr></tbody></table><h1 id="3-字体和文本样式"><a href="#3-字体和文本样式" class="headerlink" title="3.字体和文本样式"></a>3.字体和文本样式</h1><h3 id="3-1字体样式"><a href="#3-1字体样式" class="headerlink" title="3.1字体样式"></a>3.1字体样式</h3><table><thead><tr><th align="center">字体样式</th><th align="center">属性名</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">字体大小</td><td align="center">font-size</td><td align="center">16px(默认)</td></tr><tr><td align="center">字体粗细</td><td align="center">font-weight</td><td align="center">400；normal(400)；blod(700)</td></tr><tr><td align="center">字体样式</td><td align="center">font-style</td><td align="center">normal&#x2F;italic(倾斜)</td></tr><tr><td align="center">字体系列</td><td align="center">font-family</td><td align="center">具体字体1,具体字体2,具体字体3,具体字体4,…,字体系列</td></tr><tr><td align="center">行高</td><td align="center">line-height</td><td align="center">50px ; 倍数(当前标签font-seze的倍数)</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: ;</span><br><span class="line">        <span class="attribute">font-style</span>: ;</span><br><span class="line">        <span class="attribute">font-weight</span>: ;</span><br><span class="line">        <span class="attribute">font-family</span>: ;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">font</span>: style   weight   size    字体; <span class="comment">/*连写*/</span></span><br><span class="line">        </span><br><span class="line">        <span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">66px</span> 宋体;</span><br><span class="line">        <span class="attribute">font-style</span>: normal; </span><br><span class="line">        <span class="attribute">font</span>: <span class="number">100px</span> 微软雅黑;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 一个属性冒号后面书写多个值的写法 -- 复合属性 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>font-family渲染规则：</strong> </p><ol><li>从左往右按照顺序查找，如果电脑中未安装该字体，则显示下一个字体 </li><li>如果都不支持，此时会根据操作系统，显示最后字体系列的默认字体</li></ol><p><strong>字体连写：</strong>font : style weight size&#x2F;line-height family;</p><h3 id="3-2文本样式"><a href="#3-2文本样式" class="headerlink" title="3.2文本样式"></a>3.2文本样式</h3><table><thead><tr><th align="center">文本样式</th><th align="center">属性名</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">文本缩进</td><td align="center">text-indent</td><td align="center">100px ; 1em(1em &#x3D; 当前标签的font-size大小)</td></tr><tr><td align="center">水平对齐方式</td><td align="center">ext-align</td><td align="center">center；left; right(给文本的父元素设置)</td></tr><tr><td align="center">文本修饰</td><td align="center">text-decoration</td><td align="center">none; underline(下划线)</td></tr></tbody></table><h1 id="4-背景和显示模式"><a href="#4-背景和显示模式" class="headerlink" title="4.背景和显示模式"></a>4.背景和显示模式</h1><h3 id="4-1背景"><a href="#4-1背景" class="headerlink" title="4.1背景"></a>4.1背景</h3><table><thead><tr><th align="center">背景</th><th align="center">属性名</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">背景色</td><td align="center">background-color</td><td align="center">rgba(0, 0, 0, .5) ; rgb(0,0,0) ; #ccc ; pink</td></tr><tr><td align="center">背景图</td><td align="center">background-image</td><td align="center">url(地址);</td></tr><tr><td align="center">背景平铺</td><td align="center">background-repeat</td><td align="center">repeat ; no-repeat ; repeat-x ; repeat-y</td></tr><tr><td align="center">背景位置</td><td align="center">background-position</td><td align="center">水平位置 垂直位置   （方位名词  or 数字+px）</td></tr><tr><td align="center"><strong>背景连写：</strong>background: color image repeat position&#x2F;size</td><td align="center"></td><td align="center"></td></tr></tbody></table><h5 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h5><table><thead><tr><th align="center">属性名</th><th align="center">属性值</th><th align="center">场景</th></tr></thead><tbody><tr><td align="center">background-size</td><td align="center">数字+px</td><td align="center">简单常用</td></tr><tr><td align="center">background-size</td><td align="center">百分比</td><td align="center">相对于当前盒子的宽高的百分比</td></tr><tr><td align="center">background-size</td><td align="center">contain</td><td align="center">包含，将背景图按自身大小等比缩放</td></tr><tr><td align="center">background-size</td><td align="center">cover</td><td align="center">覆盖，将背景图等比缩放，刚好填满整个盒子</td></tr></tbody></table><h3 id="4-2显示模式-块，行内，行内块"><a href="#4-2显示模式-块，行内，行内块" class="headerlink" title="4.2显示模式(块，行内，行内块)"></a>4.2显示模式(块，行内，行内块)</h3><ul><li>块<ul><li>特点<ul><li>独占一行</li><li>设置宽高生效</li><li>宽度默认是父级的100%</li></ul></li><li>转换写法 : display: block</li></ul></li><li>行内<ul><li>特点<ul><li>一行显示多个</li><li>设置宽高不生效</li><li>尺寸和内容一样大</li></ul></li><li>转换写法 :  display: inline;</li></ul></li><li>行内块<ul><li>特点<ul><li>一行显示多个</li><li>设置宽高生效</li></ul></li><li>转换写法: display: inline-block</li></ul></li></ul><h1 id="5-CSS特性-继承性，层叠性"><a href="#5-CSS特性-继承性，层叠性" class="headerlink" title="5.CSS特性(继承性，层叠性)"></a>5.CSS特性(继承性，层叠性)</h1><h3 id="4-1继承性"><a href="#4-1继承性" class="headerlink" title="4.1继承性"></a>4.1继承性</h3><p>子元素可以继承父元素的属性：文字控制属性都能继承, 不是控制文字的都不能继承；自己有相关的属性则执行自己的, 不执行继承。</p><p><strong>控制继承</strong></p><p>CSS 为控制继承提供了四个特殊的通用属性值。每个css属性都接收这些值。</p><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/inherit"><code>inherit</code></a></p><p>设置该属性会使子元素属性和父元素相同。实际上，就是 “开启继承”.</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/initial"><code>initial</code></a></p><p>设置属性值和浏览器默认样式相同。如果浏览器默认样式中未设置且该属性是自然继承的，那么会设置为 <code>inherit</code> 。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/unset"><code>unset</code></a></p><p>将属性重置为自然值，也就是如果属性是自然继承那么就是 <code>inherit</code>，否则和 <code>initial</code>一样</p></li></ul><h3 id="4-2层叠性"><a href="#4-2层叠性" class="headerlink" title="4.2层叠性"></a>4.2层叠性</h3><p><strong>优先级</strong>：继承 &lt; 通配符 &lt; 标签 &lt; 类 &lt; id &lt; 行内样式 &lt; !important</p><p><strong>权重叠加计算</strong>一个选择器的优先级可以说是由四个部分相加 (分量)</p><table><thead><tr><th>千位</th><th>百位</th><th>十位</th><th>个位</th></tr></thead><tbody><tr><td>行内选择器个数</td><td>id选择器个数</td><td>类选择器个数</td><td>标签选择器个数</td></tr></tbody></table><p><strong>!important</strong>：覆盖所有上面所有优先级计算（<strong>强烈建议除了非常情况不要使用它。</strong> <code>!important</code> 改变了层叠的常规工作方式，它会使调试 CSS 问题非常困难，特别是在大型样式表中）</p><h1 id="6-盒子模型"><a href="#6-盒子模型" class="headerlink" title="6.盒子模型"></a>6.盒子模型</h1><h3 id="6-1盒子的概念"><a href="#6-1盒子的概念" class="headerlink" title="6.1盒子的概念"></a>6.1盒子的概念</h3><p>​1.页面中的每一个标签，都可看做是一个 “盒子”，通过盒子的视角更方便的进行布局</p><p>​2.浏览器在渲染（显示）网页时，会将网页中的元素看做是一个个的矩形区域，我们也形象的称之为 盒子</p><h3 id="6-2内容-content"><a href="#6-2内容-content" class="headerlink" title="6.2内容(content)"></a>6.2内容(content)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h3 id="6-3内边距-padding"><a href="#6-3内边距-padding" class="headerlink" title="6.3内边距(padding)"></a>6.3内边距(padding)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span> : <span class="number">5px</span>;<span class="comment">/*一个值：上下左右*/</span></span><br><span class="line">    <span class="attribute">padding</span> : <span class="number">5px</span> <span class="number">5px</span>;<span class="comment">/*两个值：上下，左右*/</span></span><br><span class="line">    <span class="attribute">padding</span> : <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span>;<span class="comment">/*三个值：上，左右，下*/</span></span><br><span class="line">    <span class="attribute">padding</span> : <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">10px</span>;<span class="comment">/*四个值：上，右，下，左*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">padding-top</span> : <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span> : <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span> : <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span> : <span class="number">5px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4边框-border"><a href="#6-4边框-border" class="headerlink" title="6.4边框(border)"></a>6.4边框(border)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* border: 粗细  线条样式   颜色 -- 不分先后顺序 */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;<span class="comment">/*实线*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> dashed <span class="number">#000</span>;<span class="comment">/*虚线*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> dotted <span class="number">#000</span>;<span class="comment">/*点线*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5外边距-margin"><a href="#6-5外边距-margin" class="headerlink" title="6.5外边距(margin)"></a>6.5外边距(margin)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span> : <span class="number">5px</span>;<span class="comment">/*一个值：上下左右*/</span></span><br><span class="line">    <span class="attribute">margin</span> : <span class="number">5px</span> <span class="number">5px</span>;<span class="comment">/*两个值：上下，左右*/</span></span><br><span class="line">    <span class="attribute">margin</span> : <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span>;<span class="comment">/*三个值：上，左右，下*/</span></span><br><span class="line">    <span class="attribute">margin</span> : <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">10px</span>;<span class="comment">/*四个值：上，右，下，左*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">margin-top</span> : <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span> : <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span> : <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span> : <span class="number">5px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>版心居中： margin: 0 auto</strong>;</p><h1 id="7-伪元素"><a href="#7-伪元素" class="headerlink" title="7.伪元素"></a>7.伪元素</h1><p>伪元素是由css模拟出的标签效果，根据元素在HTML中的结构关系查找元素，减少对于HTML中类的依赖，有利于保持代码整洁。常用于查找某父级选择器中的子元素</p><table><thead><tr><th align="center">伪元素</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">::before</td><td align="center">在父元素内容的最前面添加一个伪元素</td></tr><tr><td align="center">::after</td><td align="center">在父元素内容的最后面添加一个伪元素</td></tr></tbody></table><p>注意：</p><ol><li>必须设置content属性才能生效</li><li>伪元素默认是行内元素<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.father</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="8-浮动float"><a href="#8-浮动float" class="headerlink" title="8.浮动float"></a>8.浮动float</h1><h3 id="8-1标准流"><a href="#8-1标准流" class="headerlink" title="8.1标准流"></a>8.1标准流</h3><p>​标准流：又称文档流，是浏览器在渲染显示网页内容时默认采用的一套排版规则，规定了应该以何种方式排列元素 </p><p>➢ 常见标准流排版规则： </p><ol><li><p>块级元素：从上往下，垂直布局，独占一行 </p></li><li><p>行内元素 或 行内块元素：从左往右，水平布局，空间不够自动折行</p></li></ol><p>​</p><h3 id="8-2浮动"><a href="#8-2浮动" class="headerlink" title="8.2浮动"></a>8.2浮动</h3><p>​让垂直布局的盒子变成水平布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    <span class="comment">/* flr */</span></span><br><span class="line">    <span class="comment">/* float: right; */</span></span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3浮动的特点"><a href="#8-3浮动的特点" class="headerlink" title="8.3浮动的特点"></a>8.3浮动的特点</h3><ol><li><p>浮动元素会脱离标准流（简称：脱标），在标准流中不占位置 </p></li><li><p>浮动元素比标准流高半个级别，可以覆盖标准流中的元素 </p></li><li><p>浮动找浮动，下一个浮动元素会在上一个浮动元素后面左右浮动 </p></li><li><p>浮动元素有特殊的显示效果 </p><p>• 一行可以显示多个 </p><p>• 可以设置宽高</p></li></ol><p>➢ 注意点： • 浮动的元素不能通过text-align:center或者margin:0 auto </p><h3 id="8-4清除浮动"><a href="#8-4清除浮动" class="headerlink" title="8.4清除浮动"></a>8.4清除浮动</h3><p>​浮动后脱标，不占位置。若子元素浮动了，此时子元素不能撑开标准流的块级父元素。需要清除浮动。</p><p>方法1：<strong>直接给父元素设置高度</strong>   优点：简单粗暴   缺点：有些布局中，父元素的高度是不能固定的，不适用。</p><p>方法2：在父元素内容的最后添加一个块级元素 ，给添加的块级元素设置 <strong>clear:both</strong>。缺点：会在页面中添加额外的标签，让页面HTML结构更加复杂。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    <span class="comment">/* 清除左右两侧浮动的影响 */</span></span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法3：单伪元素清除：用伪元素替代了方法2中的额外标签，直接给标签添加类即可清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 为了兼容性 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法4：双伪元素清除：用伪元素替代了额外标签，直接给标签添加类即可清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 清除浮动 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 真正清除浮动的标签 */</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="comment">/* content: &#x27;&#x27;;</span></span><br><span class="line"><span class="comment">    display: table; */</span></span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法5：给父元素设置<strong>overflow : hidden</strong> </p><h1 id="9-定位position"><a href="#9-定位position" class="headerlink" title="9.定位position"></a>9.定位position</h1><h3 id="9-1标准流、浮动、定位"><a href="#9-1标准流、浮动、定位" class="headerlink" title="9.1标准流、浮动、定位"></a>9.1标准流、浮动、定位</h3><p>​标准流：又称文档流，是浏览器在渲染显示网页内容时默认采用的一套排版规则，规定了应该以何种方式排列元素 </p><p>​浮动：可以让原本垂直布局的 块级元素变成水平布局 </p><p>​定位：可以让元素自由摆放在网页的任意位置</p><h3 id="9-2定位的使用"><a href="#9-2定位的使用" class="headerlink" title="9.2定位的使用"></a>9.2定位的使用</h3><p>​<strong>1.</strong> <strong>设置定位方式</strong></p><table><thead><tr><th>属性名</th><th>属性值</th><th>定位方式</th></tr></thead><tbody><tr><td>position</td><td>static</td><td>静态定位</td></tr><tr><td>position</td><td>relative</td><td>相对定位</td></tr><tr><td>position</td><td>absolute</td><td>绝对定位</td></tr><tr><td>position</td><td>fixed</td><td>固定定位</td></tr></tbody></table><p>​<strong>2.</strong> <strong>设置偏移量</strong></p><table><thead><tr><th align="center">方向</th><th align="center">属性名</th><th align="center">属性值</th></tr></thead><tbody><tr><td align="center">左:水平</td><td align="center">left</td><td align="center">数字 + px</td></tr><tr><td align="center">右:水平</td><td align="center">right</td><td align="center">数字 + px</td></tr><tr><td align="center">上:垂直</td><td align="center">top</td><td align="center">数字 + px</td></tr><tr><td align="center">下:垂直</td><td align="center">bottom</td><td align="center">数字 + px</td></tr></tbody></table><h3 id="9-3静态定位static"><a href="#9-3静态定位static" class="headerlink" title="9.3静态定位static"></a>9.3静态定位static</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="comment">/* 静态定位, 默认值, 标准流 */</span></span><br><span class="line">    <span class="attribute">position</span>: static;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点： 静态定位就是之前标准流，不能通过方位属性进行移动 </p><h3 id="9-4相对定位relative"><a href="#9-4相对定位relative" class="headerlink" title="9.4相对定位relative"></a>9.4相对定位relative</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">        1. 占有原来的位置</span></span><br><span class="line"><span class="comment">        2. 仍然具体标签原有的显示模式特点</span></span><br><span class="line"><span class="comment">        3. 改变位置参照自己原来的位置</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点： </p><ol><li><p>需要配合方位属性实现移动 </p></li><li><p>相对于自己原来位置进行移动 </p></li><li><p>在页面中占位置 → 没有脱标</p></li></ol><h3 id="9-5绝对定位absolute"><a href="#9-5绝对定位absolute" class="headerlink" title="9.5绝对定位absolute"></a>9.5绝对定位absolute</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="comment">/* 绝对定位: </span></span><br><span class="line"><span class="comment">        先找已经定位的父级, 如果有这样的父级就以这个父级为参照物进行定位;</span></span><br><span class="line"><span class="comment">        有父级, 但父级没有定位, 以浏览器窗口为参照为进行定位</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="comment">/* left: 50px; */</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    1. 脱标, 不占位</span></span><br><span class="line"><span class="comment">    2. 改变标签的显示模式特点: 具体行内块特点(在一行共存, 宽高生效)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点： </p><ol><li><p>需要配合方位属性实现移动 </p></li><li><p>如果祖先元素没有定位，则默认相对于浏览器进行移动</p></li><li><p>如果祖先元素有定位，则相对于<strong>最近的</strong> <strong>有定位</strong> 的祖先元素进行移动</p></li><li><p>脱标，在页面中不占位置</p></li></ol><h3 id="9-6固定定位fixed"><a href="#9-6固定定位fixed" class="headerlink" title="9.6固定定位fixed"></a>9.6固定定位fixed</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">        1. 脱标-不占位置</span></span><br><span class="line"><span class="comment">        2. 改变位置参考浏览器窗口</span></span><br><span class="line"><span class="comment">        3. 具备行内块特点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点： </p><ol><li><p>需要配合方位属性实现移动 </p></li><li><p>相对于浏览器可视区域进行移动</p><p>3.脱标，在页面中不占位置</p></li></ol><h3 id="9-7子绝父相"><a href="#9-7子绝父相" class="headerlink" title="9.7子绝父相"></a>9.7子绝父相</h3><p>​• 子元素：绝对定位 </p><p>​• 父元素：相对定位 </p><p>​让子元素相对于父元素进行自由移动，此时父元素是相对定位，对网页的布局影响最小</p><h5 id="子元素相对父元素水平居中"><a href="#子元素相对父元素水平居中" class="headerlink" title="子元素相对父元素水平居中"></a>子元素相对父元素水平居中</h5><p>​子元素绝对定位，父元素相对定位</p><p>​先让子元素往右移动父盒子的一半，left ： 50%</p><p>​再让子元素往左移动自己的一半transform : translateX(-50%)</p><h3 id="9-8层级关系"><a href="#9-8层级关系" class="headerlink" title="9.8层级关系"></a>9.8层级关系</h3><p>​• 标准流 &lt; 浮动 &lt; 定位 </p><p>​• 相对、绝对、固定默认层级相同，此时HTML中写在下面的元素层级更高，会覆盖上面的元素</p><h5 id="更改定位元素层级"><a href="#更改定位元素层级" class="headerlink" title="更改定位元素层级"></a>更改定位元素层级</h5><p>​属性名：z-index  属性值  数字               数字越大，层级越高</p><h1 id="10-装饰"><a href="#10-装饰" class="headerlink" title="10.装饰"></a>10.装饰</h1><h3 id="10-1垂直对齐方式vertical"><a href="#10-1垂直对齐方式vertical" class="headerlink" title="10.1垂直对齐方式vertical"></a>10.1垂直对齐方式vertical</h3><table><thead><tr><th>属性名</th><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>vertical-align</td><td>baseline</td><td>默认，基线对齐</td></tr><tr><td>vertical-align</td><td>top</td><td>顶部对齐</td></tr><tr><td>vertical-align</td><td>middle</td><td>中部对齐</td></tr><tr><td>vertical-align</td><td>bottom</td><td>底部对齐</td></tr></tbody></table><p>➢ 可以解决： </p><ol><li>文本框和表单按钮无法对齐</li><li>input和img无法对齐</li><li>div中的文本框，文本框无法贴顶</li><li>div不设高度由img标签撑开，此时img标签下面会存在额外间隙</li></ol><h3 id="10-2光标类型cursor"><a href="#10-2光标类型cursor" class="headerlink" title="10.2光标类型cursor"></a>10.2光标类型cursor</h3><p>​设置鼠标光标在元素上时显示的样式</p><table><thead><tr><th>属性名</th><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>cursor</td><td>defult</td><td>默认，箭头</td></tr><tr><td>cursor</td><td>pointer</td><td>抓手，提示用户点击</td></tr><tr><td>cursor</td><td>text</td><td>工，提示用户选择文字</td></tr><tr><td>cursor</td><td>move</td><td>十字光标，提示用户移动</td></tr></tbody></table><h3 id="10-3边框圆角border-radius"><a href="#10-3边框圆角border-radius" class="headerlink" title="10.3边框圆角border-radius"></a>10.3边框圆角border-radius</h3><table><thead><tr><th>属性名</th><th>属性值</th></tr></thead><tbody><tr><td>border-radius</td><td>数字+px  ; 百分比</td></tr></tbody></table><p>赋值顺序：左上角开始顺时针，若未赋值，与对角相同</p><h5 id="正圆"><a href="#正圆" class="headerlink" title="正圆"></a>正圆</h5><p>​盒子为正方形，设置边框为盒子宽高的一半      border-radius:50%</p><h5 id="胶囊"><a href="#胶囊" class="headerlink" title="胶囊"></a>胶囊</h5><p>​盒子为长方形，边框为盒子高度的一半              border-radius:盒子高度的一半</p><h5 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h5><p>​设置一个盒子，四周不同颜色的边框，将盒子的宽高设置为0仅保留border，得到四个三角形，将其余边框（三角形）设置为透明。opacity：0；</p><h3 id="10-4溢出部分显示特效overflow"><a href="#10-4溢出部分显示特效overflow" class="headerlink" title="10.4溢出部分显示特效overflow"></a>10.4溢出部分显示特效overflow</h3><p>盒子的内容部分超出盒子的区域范围时的显示：</p><table><thead><tr><th>属性名</th><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>overflow</td><td>visible</td><td>默认，溢出可见</td></tr><tr><td>overflow</td><td>hidden</td><td>溢出部分隐藏</td></tr><tr><td>overflow</td><td>scroll</td><td>无论是否溢出都显示滚动条</td></tr><tr><td>overflow</td><td>auto</td><td>溢出显示滚动条</td></tr></tbody></table><h3 id="10-5元素的显示-x2F-隐藏visibility-x2F-display"><a href="#10-5元素的显示-x2F-隐藏visibility-x2F-display" class="headerlink" title="10.5元素的显示&#x2F;隐藏visibility&#x2F;display"></a>10.5元素的显示&#x2F;隐藏visibility&#x2F;display</h3><p>元素本身的显示或隐藏，如hover后元素隐藏&#x2F;可见</p><table><thead><tr><th>属性名</th><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>visibility</td><td>hidden</td><td>隐藏元素，占位</td></tr><tr><td>display</td><td>none&#x2F;clock</td><td>隐藏元素，不占位</td></tr></tbody></table><h3 id="10-6透明度opacity"><a href="#10-6透明度opacity" class="headerlink" title="10.6透明度opacity"></a>10.6透明度opacity</h3><p>让元素整体变透明</p><table><thead><tr><th>属性名</th><th>属性值</th><th>效果</th></tr></thead><tbody><tr><td>opacity</td><td>0-1之间的数字</td><td>0完全透明，1不透明</td></tr></tbody></table><h3 id="10-7精灵图"><a href="#10-7精灵图" class="headerlink" title="10.7精灵图"></a>10.7精灵图</h3><p>场景：项目中将多张小图片，合并成一张大图片，这张大图片称之为精灵图 </p><p>减少服务器发送次数，提高页面加载速度 </p><h5 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h5><p>​1.创建一个盒子</p><p>​2.量取所需小图的宽高，并且将宽高设为盒子的宽高</p><p>​3.将精灵图设为盒子的背景图片backgroungimg</p><p>​4.测量小图左上角的坐标，<strong>取负</strong>设置  background-position:x y</p><h3 id="10-8阴影shadow"><a href="#10-8阴影shadow" class="headerlink" title="10.8阴影shadow"></a>10.8阴影shadow</h3><h5 id="文字阴影"><a href="#文字阴影" class="headerlink" title="文字阴影"></a>文字阴影</h5><table><thead><tr><th>属性名</th><th>参数</th><th>效果</th></tr></thead><tbody><tr><td>text-shadow</td><td>h-shadow</td><td>水平偏移量</td></tr><tr><td>text-shadow</td><td>v-shadow</td><td>垂直偏移量</td></tr><tr><td>text-shadow</td><td>blur</td><td>模糊度</td></tr><tr><td>text-shadow</td><td>color</td><td>阴影色</td></tr></tbody></table><p>前两个属性必需，阴影可以叠加设置，每组阴影取值之间逗号隔开</p><h5 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h5><table><thead><tr><th>属性名</th><th>参数</th><th>效果</th></tr></thead><tbody><tr><td>box-shadow</td><td>h-shadow</td><td>水平偏移量</td></tr><tr><td>box-shadow</td><td>v-shadow</td><td>垂直偏移量</td></tr><tr><td>box-shadow</td><td>blur</td><td>模糊度</td></tr><tr><td>box-shadow</td><td>spread</td><td>阴影扩大</td></tr><tr><td>box-shadow</td><td>color</td><td>阴影色</td></tr><tr><td>box-shadow</td><td>inset</td><td>改为内部阴影</td></tr></tbody></table><h3 id="10-9过渡transition"><a href="#10-9过渡transition" class="headerlink" title="10.9过渡transition"></a>10.9过渡transition</h3><table><thead><tr><th>属性名</th><th>参数</th><th>取值</th></tr></thead><tbody><tr><td>transition</td><td>过渡的属性</td><td>all 或 具体的属性名称，如width：只有width过渡</td></tr><tr><td>transition</td><td>过渡时长</td><td>数字 + s</td></tr></tbody></table><p>注意点： </p><ol><li><p>过渡需要：默认状态 和 hover状态样式不同，才能有过渡效果 </p></li><li><p>transition属性给需要过渡的元素本身加 </p></li><li><p>transition属性设置在不同状态中，效果不同的 </p><p>① 给默认状态设置，鼠标移入移出都有过渡效果 </p><p>② 给hover状态设置，鼠标移入有过渡效果，移出没有过渡效果</p></li></ol><h3 id="10-10字体图标-icon"><a href="#10-10字体图标-icon" class="headerlink" title="10.10字体图标  icon"></a>10.10字体图标  icon</h3><h5 id="图标库-www-icon-font-com"><a href="#图标库-www-icon-font-com" class="headerlink" title="图标库   www.icon-font.com"></a>图标库   <a href="http://www.icon-font.com/">www.icon-font.com</a></h5><p>​字体图标的本质也是字体</p><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><p>​1.引样式表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./iconfont/iconfont.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​2.使用字体图标对应的类名，必须两个类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconfont icon-xxx&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-11平面转换transform"><a href="#10-11平面转换transform" class="headerlink" title="10.11平面转换transform"></a>10.11平面转换transform</h3><h5 id="1-位移translate"><a href="#1-位移translate" class="headerlink" title="1.位移translate"></a>1.位移translate</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="comment">/* transform: translate(水平移动距离, 垂直移动距离); */</span></span><br><span class="line">    <span class="comment">/* transform: translate(100px, 50px); */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 百分比: 盒子自身尺寸的百分比 */</span></span><br><span class="line">    <span class="comment">/* transform: translate(100%, 50%); */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* transform: translate(-100%, 50%); */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 只给出一个值表示x轴移动距离 */</span></span><br><span class="line">    <span class="comment">/* transform: translate(100px); */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transform:translate(水平移动距离, 垂直移动距离);</p><p>X轴向右为正，Y轴向下为正</p><p>取值：像素单位数值    百分比（参照物为盒子自身的尺寸）</p><p>单独设置单个方向的距离：transform: translateX（）   transform: translateY（）</p><h5 id="2-旋转rotate"><a href="#2-旋转rotate" class="headerlink" title="2.旋转rotate"></a>2.旋转rotate</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transform: rotate(角度);     角度单位为deg</p><p>取值为正，顺时针</p><p><strong>修改转换原点</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">2s</span>;</span><br><span class="line">    <span class="attribute">transform-origin</span>: right bottom;</span><br><span class="line">    <span class="comment">/*transform-origin: 水平位置 垂直位置;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认圆点是盒子中心点</p><p>取值可以为    数字+px  方位名词  百分比（参照物为盒子自身尺寸）</p><h5 id="3-缩放scale"><a href="#3-缩放scale" class="headerlink" title="3.缩放scale"></a>3.缩放scale</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">    <span class="comment">/*transform: scale(缩放倍数);*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>scale大于1表示放大，小于1表示缩小</p><h5 id="4-渐变background-img"><a href="#4-渐变background-img" class="headerlink" title="4.渐变background-img"></a>4.渐变background-img</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">box&#123;</span><br><span class="line">    <span class="comment">/*background-img:linear-gradient(颜色1，颜色2);*/</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">                transparent,</span><br><span class="line">                <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, .<span class="number">8</span>)</span><br><span class="line">            );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transparent透明</p><h3 id="10-11空间转换transform"><a href="#10-11空间转换transform" class="headerlink" title="10.11空间转换transform"></a>10.11空间转换transform</h3><h5 id="1-位移translate-1"><a href="#1-位移translate-1" class="headerlink" title="1.位移translate"></a>1.位移translate</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.div</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="comment">/* transform: translate3d(水平移动距离, 垂直移动距离,Z轴移动距离); */</span></span><br><span class="line">    <span class="comment">/* 百分比: 盒子自身尺寸的百分比 */</span></span><br><span class="line">    <span class="comment">/* transform: translate(100%, 50%,50%)*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transform:translate(水平移动距离, 垂直移动距离，Z轴移动距离);</p><p>X轴向右为正，Y轴向下为正，Z轴从screen指向自己为正</p><p>取值：像素单位数值    百分比（参照物为盒子自身的尺寸）</p><p>单独设置单个方向的距离：transform: translateX（）   transform: translateY（）transform: translateZ（）</p><h5 id="2-旋转rotate-1"><a href="#2-旋转rotate-1" class="headerlink" title="2.旋转rotate"></a>2.旋转rotate</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(<span class="number">90deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transform: rotateX&#x2F;Y&#x2F;Z(角度);     角度单位为deg<br>判断旋转方向：左手法则，左手握住旋转轴，大拇指指向正值方向，手指方向为旋转正值的方向</p><h5 id="3-透视perspective"><a href="#3-透视perspective" class="headerlink" title="3.透视perspective"></a>3.透视perspective</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">1000px</span>;</span><br><span class="line">    <span class="comment">/*perspective:值;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>perspective属性添加给父级，取值为像素单位值，一般取800-1200</p><p>在空间转换的过程中，为元素添加近大远小，近实远虚的视觉效果</p><h5 id="4-立体呈现"><a href="#4-立体呈现" class="headerlink" title="4.立体呈现"></a>4.立体呈现</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">box&#123;</span><br><span class="line">    <span class="comment">/*background-img:linear-gradient(颜色1，颜色2);*/</span></span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">                transparent,</span><br><span class="line">                <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, .<span class="number">8</span>)</span><br><span class="line">            );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用perspective透视属性不能呈现立体图形，父元素需要添加  transform-style:preserve-3d;使子元素处于3d空间</p><h5 id="5-空间缩放"><a href="#5-空间缩放" class="headerlink" title="5.空间缩放"></a>5.空间缩放</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">1.2</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">1.2</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleZ</span>(<span class="number">1.2</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(x,y,z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-12动画animation"><a href="#10-12动画animation" class="headerlink" title="10.12动画animation"></a>10.12动画animation</h3><h5 id="1-使用动画"><a href="#1-使用动画" class="headerlink" title="1.使用动画"></a>1.使用动画</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 使用动画 */</span></span><br><span class="line">    <span class="attribute">animation</span>: change <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义动画*/</span></span><br><span class="line"><span class="comment">/*@keyframes 动画名称&#123;</span></span><br><span class="line"><span class="comment">from&#123;&#125;</span></span><br><span class="line"><span class="comment">to()</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/*@keyframes 动画名称&#123;</span></span><br><span class="line"><span class="comment">0%&#123;&#125;</span></span><br><span class="line"><span class="comment">20%&#123;&#125;</span></span><br><span class="line"><span class="comment">100%&#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> change &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 百分比指的是动画总时长的占比 */</span></span><br></pre></td></tr></table></figure><p>步骤：    1.定义动画       2.使用动画</p><h5 id="2-动画属性"><a href="#2-动画属性" class="headerlink" title="2.动画属性"></a>2.动画属性</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">animation</span>: 动画名称 动画时长 速度曲线 延迟事件 重复次数 动画方向 执行完毕时的状态</span><br></pre></td></tr></table></figure><p>动画名称和动画时长必须赋值；</p><p>取值不分先后顺序；</p><p>如果有2个时间值，第一个时间表示动画时长，第二个时间表示延迟时间</p><h1 id="11-HTML前置认知"><a href="#11-HTML前置认知" class="headerlink" title="11.HTML前置认知"></a>11.HTML前置认知</h1><h3 id="11-1网站与网页"><a href="#11-1网站与网页" class="headerlink" title="11.1网站与网页"></a>11.1网站与网页</h3><p>​网页相当于一本书，网页相当于一本书的每一页，网站是多个冲主题的网页的整合。</p><h3 id="11-2骨架结构标签"><a href="#11-2骨架结构标签" class="headerlink" title="11.2骨架结构标签"></a>11.2骨架结构标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​文档类型声明，告诉浏览器该网页的html版本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​认识网页所用的语言，用于<strong>搜索引擎归类</strong>和<strong>浏览器翻译</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​认识网页所用的字符编码，保存和打开的字符编码需要统一设置，否则可能会出现乱码</p><p>​常见字符编码： </p><ol><li><p>UTF-8：万国码，国际化的字符编码，收录了全球语言的文字 </p></li><li><p>GB2312：6000+ 汉字 </p></li><li><p>GBK：20000+ 汉字 </p><p>注意点：开发中 统一使用 UTF-8 字符编码 即可</p></li></ol><h3 id="11-3SEO-Search-Engine-Optimization-搜索引擎优化"><a href="#11-3SEO-Search-Engine-Optimization-搜索引擎优化" class="headerlink" title="11.3SEO(Search Engine Optimization)搜索引擎优化"></a>11.3SEO(Search Engine Optimization)搜索引擎优化</h3><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><p>​让网站在搜索引擎上的排名更靠前</p><h5 id="提升SEO"><a href="#提升SEO" class="headerlink" title="提升SEO"></a>提升SEO</h5><ol><li><p>竞价排名 </p></li><li><p>将网页制作成html后缀 </p></li><li><p>标签语义化（在合适的地方使用合适的标签） ……</p></li></ol><h5 id="SEO三大标签"><a href="#SEO三大标签" class="headerlink" title="SEO三大标签"></a>SEO三大标签</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>京东(JD.COM)-正品低价、品质保障、配送及时、轻松购物！<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网页标题标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;京东JD.COM-专业的综合网上购物商城，为您提供正品低价的购物选择、优质便捷的服务体验。商品来自全球数十万品牌商家，囊括家电、手机、电脑、服装、居家、母婴、美妆、个护、食品、生鲜等丰富品类，满足各种购物需求。&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网页描述标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网上购物,网上商城,家电,手机,电脑,服装,居家,母婴,美妆,个护,食品,生鲜,京东&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>网页关键词标签<br>​</p><h1 id="12-CSS书写规范"><a href="#12-CSS书写规范" class="headerlink" title="12.CSS书写规范"></a>12.CSS书写规范</h1><table><thead><tr><th>顺序</th><th>类型</th><th>举例</th></tr></thead><tbody><tr><td>1</td><td>布局属性</td><td>display position float clear visibility overflow</td></tr><tr><td>2</td><td>盒子模型</td><td>width height margin padding border background</td></tr><tr><td>3</td><td>文本内容</td><td>color font text-decoration text-align line-height</td></tr><tr><td>4</td><td>装饰</td><td>cursor border-radius text-shadow</td></tr></tbody></table><h1 id="CSS加载过程"><a href="#CSS加载过程" class="headerlink" title="CSS加载过程"></a>CSS加载过程</h1><p>当浏览器展示一个文件的时候，它必须兼顾文件的内容和文件的样式信息，下面我们会了解到它处理文件的标准的流程。需要知道的是，下面的步骤是浏览加载网页的简化版本，而且不同的浏览器在处理文件的时候会有不同的方式，但是下面的步骤基本都会出现。</p><ol><li>浏览器载入HTML文件（比如从网络上获取）。</li><li>将HTML文件转化成一个DOM（Document Object Model），DOM是文件在计算机内存中的表现形式。</li><li>接下来，浏览器会拉取该HTML相关的大部分资源，比如嵌入到页面的图片、视频和CSS样式。JavaScript则会稍后进行处理，简单起见，同时此节主讲CSS，所以这里对如何加载JavaScript不会展开叙述。</li><li>浏览器拉取到CSS之后会进行解析，根据选择器的不同类型（比如element、class、id等等）把他们分到不同的“桶”中。浏览器基于它找到的不同的选择器，将不同的规则（基于选择器的规则，如元素选择器、类选择器、id选择器等）应用在对应的DOM的节点中，并添加节点依赖的样式（这个中间步骤称为渲染树）。</li><li>上述的规则应用于渲染树之后，渲染树会依照应该出现的结构进行布局。</li><li>网页展示在屏幕上（这一步被称为着色）。</li></ol><p><strong>当浏览器遇到无法解析的CSS代码时，浏览器什么也不会做，继续解析下一个CSS样式。</strong></p><h1 id="CSS扩展"><a href="#CSS扩展" class="headerlink" title="CSS扩展"></a>CSS扩展</h1><h2 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h2><p>是一种动态样式语言. 对CSS赋予了动态语言的特性，如变量、继承、运算、函数。</p><p>Less 既可以在客户端上运行 (支持IE 6+, Webkit, Firefox)，也可在服务端运行。</p><p><strong>Mixins 混合</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bordered</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">  <span class="selector-class">.bordered</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="selector-id">#menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#111</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: dotted <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">border-bottom</span>: solid <span class="number">2px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Nesting 嵌套</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="selector-class">.navigation</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="selector-id">#header</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.navigation</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&amp;一般用于串联选择器，较多用于伪类选择器，典型应用如下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  zoom: 1;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Scope 作用域</strong></p><p>变量为局部作用域</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"><span class="selector-id">#page</span> &#123;</span><br><span class="line">  <span class="selector-id">#header</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// white</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">@var:</span> white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注释</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 一个块注释</span></span><br><span class="line"><span class="comment"> * style comment! */</span></span><br><span class="line"><span class="variable">@var:</span> red;</span><br><span class="line"><span class="comment">// 这一行被注释掉了！</span></span><br><span class="line"><span class="variable">@var:</span> white;</span><br></pre></td></tr></table></figure><p><strong>导入</strong></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;library&quot;</span>; <span class="comment">// library.less</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;typo.css&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><p>是一种动态样式语言，Sass语法属于缩排语法。</p><p>比css比多出好些功能(如变量、嵌套、运算,混入(Mixin)、继承、颜色处理，函数等)，更容易阅读。</p><p>Sass的缩排语法，对于写惯css前端的web开发者来说很不直观，也不能将css代码加入到Sass里面，因此sass语法进行了改良，<code>Sass</code> 就变成了<code>Scss</code>(sassy css)。与原来的语法兼容，只是用{}取代了原来的缩进。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;理解 CSS 的作用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;了解CSS的语法规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;</summary>
      
    
    
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="http://example.com/2021/12/01/HTML/"/>
    <id>http://example.com/2021/12/01/HTML/</id>
    <published>2021-12-01T07:54:03.000Z</published>
    <updated>2022-09-12T07:21:01.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h1><ul><li>理解HTML的 基本语法 和标签的关系 </li><li>使用 排版标签 实现网页中标题、段落等效果 </li><li>使用 相对路径 选择不同目录下的文件 </li><li>使用 媒体标签 在网页中显示图片、播放音频和视频 </li><li>使用 链接标签 实现页面跳转功能</li></ul><h1 id="基础认知"><a href="#基础认知" class="headerlink" title="基础认知"></a>基础认知</h1><p>HTML(Hyper Text Markup Language):超文本标记语言</p><p>Web标准：在不同的浏览器按照相同的标准显示效果，展示统一。包括以下三部分</p><table><thead><tr><th align="center">构成</th><th align="center">语言</th><th>说明</th></tr></thead><tbody><tr><td align="center">结构</td><td align="center">HTML</td><td>页面元素和内容</td></tr><tr><td align="center">表现</td><td align="center">CSS</td><td>网页元素的外观和位置等页面样式（颜色、大小等）</td></tr><tr><td align="center">行为</td><td align="center">JavaScript</td><td>网页模型的定义和页面交互的动态效果</td></tr></tbody></table><h1 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h1><h2 id="标签的结构"><a href="#标签的结构" class="headerlink" title="标签的结构"></a>标签的结构</h2><p><img src="https://s1.vika.cn/space/2022/09/11/5c12e9d17bd149e29b74b434c1bcdf32"></p><p> <strong>&lt; &gt;<strong>包括起来的英文单词或字母称为</strong>标签名</strong> </p><p>标签里属性用<strong>空格</strong> </p><p>包裹内容 双标签</p><p>不包裹 单标签 <hr><br></p><p>标签之间的关系</p><p> 父子关系（嵌套关系） </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 兄弟关系（并列关系） </p><h2 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h2><h3 id="排版标签-div-x2F-span"><a href="#排版标签-div-x2F-span" class="headerlink" title="排版标签 div&#x2F;span"></a>排版标签 <strong>div&#x2F;span</strong></h3><table><thead><tr><th align="center">标签</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">h1-h5</td><td align="center">标题（独占一行）</td></tr><tr><td align="center">p</td><td align="center">段落（独占一行）</td></tr><tr><td align="center">br</td><td align="center">换行</td></tr><tr><td align="center">hr</td><td align="center">分割线</td></tr><tr><td align="center">div&#x2F;span</td><td align="center">没有语义div：独占一行span：一行可以显示多个</td></tr></tbody></table><h3 id="文本格式标签-strong-del"><a href="#文本格式标签-strong-del" class="headerlink" title="文本格式标签 strong del"></a>文本格式标签 <strong>strong del</strong></h3><table><thead><tr><th align="center">标签</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">b&#x2F;strong</td><td align="center">加粗</td></tr><tr><td align="center">u&#x2F;ins</td><td align="center">下划线</td></tr><tr><td align="center">i&#x2F;em</td><td align="center">倾斜</td></tr><tr><td align="center">s&#x2F;del</td><td align="center">删除线</td></tr><tr><td align="center">后者 突出重要性的强调语境</td><td align="center"></td></tr></tbody></table><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;路径&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;加载失败的替换文本&quot;</span> <span class="attr">title</span>=<span class="string">&quot;悬停显示文本&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p> 标签的属性写在开始标签内部 </p><p>  属性之间以空格隔开 </p><p> 属性名：src➢ 属性值：路径</p><p> 属性名：alt ➢ 属性值：替换文本 </p><p> 属性名：title ➢ 属性值：提示文本 </p><p> 属性名：width和height ➢ 属性值：宽度和高度（数字）</p><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p> 同级目录  直接写或.&#x2F;</p><p>下级目录 文件夹&#x2F;(vs .&#x2F;)</p><p>上级目录  ..&#x2F;</p><h3 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;路径&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>controls</td><td>控件界面</td></tr><tr><td>&lt;video&gt; 标签内的内容</td><td>后备内容 — 当浏览器不支持 &lt;video&gt; 标签的时候，就会显示这段内容</td></tr><tr><td>autoplay</td><td>音频和视频内容立即播放</td></tr><tr><td>loop</td><td>让音频或者视频文件循环播放</td></tr><tr><td>muted</td><td>媒体播放时，默认关闭声音</td></tr><tr><td>poster</td><td>指向了一个图像的URL，这个图像会在视频播放前显示。通常用于粗略的预览或者广告</td></tr><tr><td>preload</td><td>用来缓冲较大的文件，有3个值可选：”none” ：不缓冲；”auto” ：页面加载后缓存媒体文件；”metadata” ：仅缓冲文件的元数据</td></tr></tbody></table><p> 音频标签有哪些常见属性？</p><p> • src：音频路径 • controls：音频控件 • autoplay：自动播放 • loop：循环播放  </p><h3 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;路径&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 视频标签有哪些常见属性？</p><p> • src：视频路径 • controls：视频控件 • autoplay：自动播放 → 谷歌浏览器中可以配合muted属性实现自动静音播放 • loop：循环播放 </p><h3 id="超链接标签-href-a-target"><a href="#超链接标签-href-a-target" class="headerlink" title="超链接标签 href a target"></a>超链接标签 <strong>href a target</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>跳转到百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  _blank:新窗口打开   _self:当前窗口打开  --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>绝对超链接：链接到网络上（非本站）的网页链接</li><li>相对超链接：链接到本网站内的一个网页链接</li><li>锚点超链接（书签）：链接到本页面特定位置（文字，段落，标题等）的链接</li></ul><table><thead><tr><th align="center">属性</th><th align="center">作用</th><th align="center">注意</th></tr></thead><tbody><tr><td align="center">href</td><td align="center">超链接的</td><td align="center">#代表本页面</td></tr><tr><td align="center">name</td><td align="center">锚点的名称</td><td align="center">用 #+锚点名称 跳转到锚点</td></tr><tr><td align="center">target</td><td align="center">重定向打开方式</td><td align="center">_blank:新窗口打开   _self:当前窗口打开</td></tr></tbody></table><p>空链接</p><p> 功能： </p><p>• 点击之后回到网页顶部 • 开发中不确定该链接最终跳转位置，用空链接占个位置 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span> 空连接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表、表格、表单标签"><a href="#列表、表格、表单标签" class="headerlink" title="列表、表格、表单标签"></a>列表、表格、表单标签</h2><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><p>无序列表<br>ul标签：表示无序列表的整体，只允许嵌套li标签；<br>li标签：表示无序列表的每一项，可以嵌套任意内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有序列表<br>列表的每一项<strong>前默认显示序号标识</strong><br>ol标签：表示无序列表的整体，只允许嵌套li标签；</p><p>li标签：表示无序列表的每一项，可以嵌套任意内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义列表<br>dl标签：自定义列表的整体;<strong>dt标签</strong>：自定义列表的主题;dd标签：主题的每一项内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.vika.cn/space/2022/09/11/0a677e09dab14254beeafab6d714ee14"></p><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><ul><li><p>table标签：表格整体</p><p>- </p></li><li><p>tr标签：表格每行 </p></li><li><p>td标签：对于主题的每一项内容 </p></li><li><p>caption标签： 表格整体大标题 </p></li><li><p>th标签： 表头单元格</p></li></ul><p>结构标签</p><ul><li>thead：表格头部 </li><li>tbody：表格主体</li><li>tfoot：表格底部</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>表格大标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头单元格默认加粗居中<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>表格内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">colspan</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>表格内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​合并单元格：给保留的单元格设置</p><p>跨行合并(rowspan) 上下合并→只保留最上的，删除其他 </p><p>跨列合并(colspan) 左右合并→只保留最左的，删除其他 </p><p> 可以跨结构标签合并单元格吗？ </p><p>不 </p><p><strong>列表属性</strong></p><table><thead><tr><th align="center">属性值</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">1，I，i，A，a (il)</td><td align="center">有序列表样式</td></tr><tr><td align="center">disc</td><td align="center">实心圆点</td></tr><tr><td align="center">circle</td><td align="center">空心圆点</td></tr><tr><td align="center">square</td><td align="center">实心方形</td></tr></tbody></table><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><h4 id="input系列标签"><a href="#input系列标签" class="headerlink" title="input系列标签"></a>input系列标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入昵称&gt;</span></span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">type属性内容</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">text</td><td align="center">文本框</td></tr><tr><td align="center">password</td><td align="center">密码框</td></tr><tr><td align="center">radio</td><td align="center">单选框</td></tr><tr><td align="center">checkbox</td><td align="center">多选框</td></tr><tr><td align="center">file</td><td align="center">文件选择</td></tr><tr><td align="center">submit</td><td align="center">提交按钮</td></tr><tr><td align="center">reset</td><td align="center">重置按钮</td></tr><tr><td align="center">button</td><td align="center">按钮</td></tr><tr><td align="center">​select下拉菜单标签</td><td align="center"></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--selected  默认选择--&gt;</span></span><br></pre></td></tr></table></figure><p>​textarea文本域标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 单选框和多选框的默认选中：checked </p><p> 如果需要实现<strong>单选</strong>效果，需要设置相同的name属性值 </p><h4 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h4><p> 使用方法①：</p><ol><li>使用label标签把内容（如：文本）包裹起来 2. 在表单标签上添加id属性 3. 在label标签的for属性中设置对应的id属性值</li></ol><p> 使用方法②：</p><ol><li>直接使用label标签把内容（如：文本）和表单标签一起包裹起来 2. 需要把label标签的for属性删除即可</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">check</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><table><thead><tr><th align="center">标签</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">header</td><td align="center">网页头部</td></tr><tr><td align="center">nav</td><td align="center">网页导航</td></tr><tr><td align="center">footer</td><td align="center">网页尾部</td></tr><tr><td align="center">aside</td><td align="center">网页侧边栏</td></tr><tr><td align="center">section</td><td align="center">网页区块</td></tr><tr><td align="center">article</td><td align="center">网页文章</td></tr></tbody></table><h2 id="3-head标签"><a href="#3-head标签" class="headerlink" title="3.head标签"></a>3.head标签</h2><p>内含标签包括：</p><table><thead><tr><th align="center">标签</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">meta</td><td align="center">网页介绍，关键字，网页编码，作者，自动跳转定义等</td></tr><tr><td align="center">base</td><td align="center">定义html网页默认打开方式</td></tr><tr><td align="center">link</td><td align="center">目标文件链接（css,js,favicon.ico等)</td></tr><tr><td align="center">script</td><td align="center">引入或嵌入js代码</td></tr><tr><td align="center">style</td><td align="center">嵌入网页的css代码</td></tr><tr><td align="center">title</td><td align="center">网页唯一标题</td></tr></tbody></table><p><strong>meta</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//http-equiv:http协议文件头</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> &gt;</span>//字符集</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Language&quot;</span> <span class="attr">content</span>=<span class="string">&quot;en&quot;</span> &gt;</span>//页面语言</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;1;url=http://www.baidu.com&quot;</span> /&gt;</span>//重定向</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;king&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;revised&quot;</span> <span class="attr">content</span>=<span class="string">&quot;king,01/15/2017&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;generator&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Sublime Text3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML5文档head标签元素使用&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML5, CSS, JavaScript&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">http-equiv属性</th><th align="center">描述</th><th align="center">使用方法</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Content-Type</td><td align="center">字符集</td><td align="center"><code>&lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;en&quot; &gt;</code></td><td align="center"></td></tr><tr><td align="center">Content-Language</td><td align="center">页面语言</td><td align="center"><code>&lt;meta http-equiv=&quot;Content-Language&quot; content=&quot;en&quot; &gt;</code></td><td align="center"></td></tr><tr><td align="center">refresh</td><td align="center">重定向</td><td align="center"><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;1;url=http://www.baidu.com&quot; /&gt;</code></td><td align="center"></td></tr><tr><td align="center">expires</td><td align="center">期限</td><td align="center"><code>&lt;meta http-equiv=&quot;expires&quot; content=&quot;GMT格式时间&quot; /&gt;</code></td><td align="center">设定网页过期时间</td></tr><tr><td align="center">pragma</td><td align="center">cache模式</td><td align="center"><code>&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cashe&quot; /&gt;</code></td><td align="center">禁止浏览器从本地计算机的缓存中访问网页</td></tr><tr><td align="center">Set-Cookie</td><td align="center">cookie过期设定</td><td align="center"><code>&lt;meta http-equiv=&quot;Set-Cookie&quot; content=&quot;cookie-value=xxx;expires=GMT格式时间；path&quot; /&gt;</code></td><td align="center">如果网页过期，保存在本机的全部cookie自动删除</td></tr><tr><td align="center">Window-target</td><td align="center">显示窗口的设定</td><td align="center"><code>&lt;meta http-equiv=&quot;Window-target&quot; content=&quot;GMT 格式时间&quot; /&gt;</code></td><td align="center">强制在当前窗口以独立页面方式显示（防止外部页面在框架里调用本页面）</td></tr></tbody></table><p><strong>link</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p><strong>style</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;<span class="attribute">font</span>: bold <span class="number">20px</span>/<span class="number">2.0em</span> arial,verdana;&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>script</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;h1&gt;HTML5 + CSS + JS --- head标签&lt;/h1&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>title</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML 5 之网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>base</strong></p><p>页面上的所有链接规定的默认地址</p><ul><li>前面的base标签会覆盖后面的标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;./url/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">target属性值</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">_blank</td><td align="center">在新的窗口打开链接</td></tr><tr><td align="center">_self（默认值）</td><td align="center">自身窗口</td></tr><tr><td align="center">_parent</td><td align="center">父窗口或超链接引用框架的框架集中打开</td></tr><tr><td align="center">_top</td><td align="center">清除所有被包含的框架并将文档载入整个浏览器窗口</td></tr></tbody></table><h2 id="块级元素-amp-内联元素-amp-空元素"><a href="#块级元素-amp-内联元素-amp-空元素" class="headerlink" title="块级元素 &amp; 内联元素 &amp; 空元素"></a>块级元素 &amp; 内联元素 &amp; 空元素</h2><ul><li><p>块级元素在页面中以块的形式展现 —— 相对于其前面的内容它会出现在新的一行，其后的内容也会被挤到下一行展现。块级元素通常用于展示页面上结构化的内容，例如段落、列表、导航菜单、页脚等等。一个以block形式展现的块级元素不会被嵌套进内联元素中，但可以嵌套在其它块级元素中。</p></li><li><p>内联元素通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行：它通常出现在一堆文字之间例如超链接元素&lt;a&gt;或者强调元素&lt;em&gt;和&lt;strong&gt;。</p></li><li><p>不是所有元素都拥有开始标签，内容，结束标签。一些元素只有一个标签，通常用来在此元素所在位置插入&#x2F;嵌入一些东西。例如：元素&lt;img&gt;是用来在元素&lt;img&gt;所在位置插入一张指定的图片。</p></li></ul><h2 id="嵌入-iframe"><a href="#嵌入-iframe" class="headerlink" title="嵌入 iframe"></a>嵌入 iframe</h2><p>&lt;iframe&gt;元素旨在允许您将其他Web文档嵌入到当前文档中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://developer.mozilla.org/en-US/docs/Glossary&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">allowfullscreen</span> <span class="attr">sandbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://developer.mozilla.org/en-US/docs/Glossary&quot;</span>&gt;</span></span><br><span class="line">    Fallback link for browsers that don&#x27;t support iframes</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><p>在网上，你会和两种类型的图片打交道 — 位图和矢量图:</p><ul><li>位图使用像素网格来定义 — 一个位图文件精确得包含了每个像素的位置和它的色彩信息。流行的位图格式包括 Bitmap (<code>.bmp</code>), PNG (<code>.png</code>), JPEG (<code>.jpg</code>), and GIF (<code>.gif</code>.)</li><li>矢量图使用算法来定义 — 一个矢量图文件包含了图形和路径的定义，电脑可以根据这些定义计算出当它们在屏幕上渲染时应该呈现的样子。 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/SVG">SVG</a> 格式可以让我们创造用于 Web 的精彩的矢量图形。<strong>无论它的尺寸如何，都使用算法来计算出图像的形状，仅仅是根据放大的倍数来调整算法中的值。</strong></li></ul><p>SVG 是用于描述矢量图像的XML语言。 它基本上是像HTML一样的标记，只是你有许多不同的元素来定义要显示在图像中的形状，以及要应用于这些形状的效果。 SVG用于标记图形，而不是内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">baseProfile</span>=<span class="string">&quot;full&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;black&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;150&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;100&quot;</span> <span class="attr">r</span>=<span class="string">&quot;90&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习目标&quot;&gt;&lt;a href=&quot;#学习目标&quot; class=&quot;headerlink&quot; title=&quot;学习目标&quot;&gt;&lt;/a&gt;学习目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;理解HTML的 基本语法 和标签的关系 &lt;/li&gt;
&lt;li&gt;使用 排版标签 实现网页中标题、段落等效果 &lt;/li</summary>
      
    
    
    
    
    <category term="html" scheme="http://example.com/tags/html/"/>
    
  </entry>
  
</feed>
